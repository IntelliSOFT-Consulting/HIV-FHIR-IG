{
  "resourceType": "Library",
  "id": "HIVEncounterElements",
  "meta": {
    "profile": [ "http://hl7.org/fhir/uv/crmi/StructureDefinition/crmi-shareablelibrary", "http://hl7.org/fhir/uv/crmi/StructureDefinition/crmi-publishablelibrary", "http://hl7.org/fhir/uv/cql/StructureDefinition/cql-library", "http://hl7.org/fhir/uv/cql/StructureDefinition/cql-module" ]
  },
  "contained": [ {
    "resourceType": "Parameters",
    "id": "options",
    "parameter": [ {
      "name": "translatorVersion",
      "valueString": "3.11.0"
    }, {
      "name": "option",
      "valueString": "EnableAnnotations"
    }, {
      "name": "option",
      "valueString": "EnableLocators"
    }, {
      "name": "option",
      "valueString": "DisableListDemotion"
    }, {
      "name": "option",
      "valueString": "DisableListPromotion"
    }, {
      "name": "format",
      "valueString": "JSON"
    }, {
      "name": "analyzeDataRequirements",
      "valueBoolean": false
    }, {
      "name": "collapseDataRequirements",
      "valueBoolean": true
    }, {
      "name": "compatibilityLevel",
      "valueString": "1.5"
    }, {
      "name": "enableCqlOnly",
      "valueBoolean": false
    }, {
      "name": "errorLevel",
      "valueString": "Info"
    }, {
      "name": "signatureLevel",
      "valueString": "All"
    }, {
      "name": "validateUnits",
      "valueBoolean": true
    }, {
      "name": "verifyOnly",
      "valueBoolean": false
    } ]
  } ],
  "extension": [ {
    "url": "http://hl7.org/fhir/StructureDefinition/cqf-knowledgeCapability",
    "valueCode": "computable"
  }, {
    "url": "http://hl7.org/fhir/StructureDefinition/cqf-cqlOptions",
    "valueReference": {
      "reference": "#options"
    }
  }, {
    "url": "http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-softwaresystem",
    "valueReference": {
      "reference": "Device/cqf-tooling"
    }
  } ],
  "url": "http://smart.who.int/hiv/Library/HIVEncounterElements",
  "name": "HIVEncounterElements",
  "title": "HIVEncounterElements",
  "status": "draft",
  "experimental": true,
  "type": {
    "coding": [ {
      "system": "http://terminology.hl7.org/CodeSystem/library-type",
      "code": "logic-library"
    } ]
  },
  "publisher": "World Health Organization (WHO)",
  "description": "Description not yet available for HIVEncounterElements.",
  "content": [ {
    "contentType": "text/cql",
    "data": "bGlicmFyeSBISVZFbmNvdW50ZXJFbGVtZW50cwoKdXNpbmcgRkhJUiB2ZXJzaW9uICc0LjAuMScKCmluY2x1ZGUgRkhJUkhlbHBlcnMgdmVyc2lvbiAnNC4wLjEnCgppbmNsdWRlIFdIT0NvbmNlcHRzCmluY2x1ZGUgV0hPQ29tbW9uIGNhbGxlZCBXQwppbmNsdWRlIFdIT0VsZW1lbnRzIGNhbGxlZCBXRQoKaW5jbHVkZSBISVZDb25jZXB0cyBjYWxsZWQgQ29uY2VwdHMKaW5jbHVkZSBISVZDb21tb24gdmVyc2lvbiAnMC4wLjEnIGNhbGxlZCBDb21tb24KaW5jbHVkZSBISVZFbGVtZW50cyBjYWxsZWQgRWxlbWVudHMKCnBhcmFtZXRlciBUb2RheSBEYXRlIGRlZmF1bHQgVG9kYXkoKQpwYXJhbWV0ZXIgRW5jb3VudGVySWQgU3RyaW5nCgpjb250ZXh0IFBhdGllbnQKCi8qKgogKiBISVYgRWxlbWVudHMKICovCgovLyBBdXRvLWdlbmVyYXRlZCBFbGVtZW50cyBmcm9tIERBSyBEYXRhIERpY3Rpb25hcnkKLy8gICBFbnRyaWVzIGJhc2VkIG9uIERBSyBEYXRhIERpY3Rpb25hcnkgZm9yIERhdGEgRWxlbWVudHMgbWFya2VkIGFzIHVzZWQKLy8gICBpbiBhdCBsZWFzdCBvbmUgRGVjaXNpb24gU3VwcG9ydCBUYWJsZSBvciBBZ2dyZWdhdGUgSW5kaWNhdG9yCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5BLkRFMyAtIFZpc2l0IGRhdGUKQGFjdGl2aXR5OiBISVYuQTIgR2F0aGVyIGNsaWVudCBkZXRhaWxzCkBkZXNjcmlwdGlvbjogVGhlIGRhdGUgYW5kIHRpbWUgb2YgdGhlIGNsaWVudCdzIHZpc2l0CiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJWaXNpdCBkYXRlIEEuREUzIjoKICBFbGVtZW50cy4iVmlzaXQgZGF0ZSBBLkRFMyIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJWaXNpdCBkYXRlIEEuREUzIFZhbHVlIjoKICAiVmlzaXQgZGF0ZSBBLkRFMyIgTwogIHJldHVybiBPLnZhbHVlCi8qIEVuZCBvZiBWaXNpdCBkYXRlIEEuREUzICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5BLkRFMTYgLSBFc3RpbWF0ZWQgYWdlCkBhY3Rpdml0eTogSElWLkE2LjEgUmV2aWV3IHNvY2lvZGVtb2dyYXBoaWMgZGF0YSB3aXRoIGNsaWVudCB8IEhJVi5BNSBDcmVhdGUgbmV3IGNsaWVudCByZWNvcmQKQGRlc2NyaXB0aW9uOiBJZiBET0IgaXMgdW5rbm93biwgZW50ZXIgdGhlIGNsaWVudCdzIGVzdGltYXRlZCBhZ2UuIERpc3BsYXkgY2xpZW50J3MgYWdlIGluIG51bWJlciBvZiB5ZWFycy4KKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkVzdGltYXRlZCBhZ2UiOgogIEVsZW1lbnRzLiJFc3RpbWF0ZWQgYWdlIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIkVzdGltYXRlZCBhZ2UgVmFsdWUiOgogICJFc3RpbWF0ZWQgYWdlIiBPCiAgcmV0dXJuIE8udmFsdWUKLyogRW5kIG9mIEVzdGltYXRlZCBhZ2UgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkEuREUxNyAtIEFnZQpAYWN0aXZpdHk6IEhJVi5BNi4xIFJldmlldyBzb2Npb2RlbW9ncmFwaGljIGRhdGEgd2l0aCBjbGllbnQgfCBISVYuQTUgQ3JlYXRlIG5ldyBjbGllbnQgcmVjb3JkCkBkZXNjcmlwdGlvbjogQ2FsY3VsYXRlZCBhZ2UgKG51bWJlciBvZiB5ZWFycykgb2YgdGhlIGNsaWVudCBiYXNlZCBvbiBkYXRlIG9mIGJpcnRoCiovCi8qKiAKICogQGRhdGFFbGVtZW50IFBhdGllbnQgYWdlIGluIHllYXJzCiAqLwpkZWZpbmUgIkN1cnJlbnQgUGF0aWVudCBBZ2UgSW4gWWVhcnMiOgogIEFnZUluWWVhcnNBdChUb2RheSgpKQoKLyoqIAogKiBAZGF0YUVsZW1lbnQgUGF0aWVudCBhZ2UgaW4gd2Vla3MKICovCmRlZmluZSAiQ3VycmVudCBQYXRpZW50IEFnZSBJbiBXZWVrcyI6CiAgQWdlSW5XZWVrc0F0KFRvZGF5KCkpCgovKiogCiAqIEBkYXRhRWxlbWVudCBQYXRpZW50IGFnZSBpbiBtb250aHMKICovCmRlZmluZSAiQ3VycmVudCBQYXRpZW50IEFnZSBJbiBNb250aHMiOgogIEFnZUluTW9udGhzQXQoVG9kYXkoKSkKLyogRW5kIG9mIEFnZSAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuQS5ERTE4IC0gR2VuZGVyCkBhY3Rpdml0eTogSElWLkE2LjEgUmV2aWV3IHNvY2lvZGVtb2dyYXBoaWMgZGF0YSB3aXRoIGNsaWVudCB8IEhJVi5BNSBDcmVhdGUgbmV3IGNsaWVudCByZWNvcmQKQGRlc2NyaXB0aW9uOiBHZW5kZXIgb2YgdGhlIGNsaWVudAoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiR2VuZGVyIjoKICBleGlzdHMgIkdlbmRlciBPYnNlcnZhdGlvbiIKZGVmaW5lICJHZW5kZXIgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJHZW5kZXIgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBHZW5kZXIgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkEuREUxOSAtIEZlbWFsZQpAYWN0aXZpdHk6IEhJVi5BNi4xIFJldmlldyBzb2Npb2RlbW9ncmFwaGljIGRhdGEgd2l0aCBjbGllbnQgfCBISVYuQTUgQ3JlYXRlIG5ldyBjbGllbnQgcmVjb3JkCkBkZXNjcmlwdGlvbjogQ2xpZW50IGlkZW50aWZpZXMgYXMgZmVtYWxlCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJGZW1hbGUiOgogIGV4aXN0cyAiRmVtYWxlIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiRmVtYWxlIE9ic2VydmF0aW9uIgpkZWZpbmUgIkZlbWFsZSBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJGZW1hbGUgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJGZW1hbGUgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJGZW1hbGUgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBGZW1hbGUgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkEuREUyMCAtIE1hbGUKQGFjdGl2aXR5OiBISVYuQTYuMSBSZXZpZXcgc29jaW9kZW1vZ3JhcGhpYyBkYXRhIHdpdGggY2xpZW50IHwgSElWLkE1IENyZWF0ZSBuZXcgY2xpZW50IHJlY29yZApAZGVzY3JpcHRpb246IENsaWVudCBpZGVudGlmaWVzIGFzIG1hbGUKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIk1hbGUiOgogIGV4aXN0cyAiTWFsZSBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIk1hbGUgT2JzZXJ2YXRpb24iCmRlZmluZSAiTWFsZSBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJNYWxlIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiTWFsZSBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIk1hbGUgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBNYWxlICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5BLkRFMjEgLSBUcmFuc2dlbmRlciBtYWxlCkBhY3Rpdml0eTogSElWLkE2LjEgUmV2aWV3IHNvY2lvZGVtb2dyYXBoaWMgZGF0YSB3aXRoIGNsaWVudCB8IEhJVi5BNSBDcmVhdGUgbmV3IGNsaWVudCByZWNvcmQKQGRlc2NyaXB0aW9uOiBDbGllbnQgaWRlbnRpZmllcyBhcyB0cmFuc2dlbmRlciBtYWxlCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJUcmFuc2dlbmRlciBtYWxlIjoKICBleGlzdHMgIlRyYW5zZ2VuZGVyIG1hbGUgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJUcmFuc2dlbmRlciBtYWxlIE9ic2VydmF0aW9uIgpkZWZpbmUgIlRyYW5zZ2VuZGVyIG1hbGUgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iVHJhbnNnZW5kZXIgbWFsZSBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIlRyYW5zZ2VuZGVyIG1hbGUgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJUcmFuc2dlbmRlciBtYWxlIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgVHJhbnNnZW5kZXIgbWFsZSAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuQS5ERTIyIC0gVHJhbnNnZW5kZXIgZmVtYWxlCkBhY3Rpdml0eTogSElWLkE2LjEgUmV2aWV3IHNvY2lvZGVtb2dyYXBoaWMgZGF0YSB3aXRoIGNsaWVudCB8IEhJVi5BNSBDcmVhdGUgbmV3IGNsaWVudCByZWNvcmQKQGRlc2NyaXB0aW9uOiBDbGllbnQgaWRlbnRpZmllcyBhcyB0cmFuc2dlbmRlciBmZW1hbGUKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIlRyYW5zZ2VuZGVyIGZlbWFsZSI6CiAgZXhpc3RzICJUcmFuc2dlbmRlciBmZW1hbGUgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJUcmFuc2dlbmRlciBmZW1hbGUgT2JzZXJ2YXRpb24iCmRlZmluZSAiVHJhbnNnZW5kZXIgZmVtYWxlIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIlRyYW5zZ2VuZGVyIGZlbWFsZSBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIlRyYW5zZ2VuZGVyIGZlbWFsZSBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIlRyYW5zZ2VuZGVyIGZlbWFsZSBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIFRyYW5zZ2VuZGVyIGZlbWFsZSAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuQS5ERTIzIC0gT3RoZXIKQGFjdGl2aXR5OiBISVYuQTYuMSBSZXZpZXcgc29jaW9kZW1vZ3JhcGhpYyBkYXRhIHdpdGggY2xpZW50IHwgSElWLkE1IENyZWF0ZSBuZXcgY2xpZW50IHJlY29yZApAZGVzY3JpcHRpb246IEFkZGl0aW9uYWwgY2F0ZWdvcnkKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIk90aGVyIEEuREUyMyI6CiAgZXhpc3RzICJPdGhlciBBLkRFMjMgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJPdGhlciBBLkRFMjMgT2JzZXJ2YXRpb24iCmRlZmluZSAiT3RoZXIgQS5ERTIzIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIk90aGVyIEEuREUyMyBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIk90aGVyIEEuREUyMyBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIk90aGVyIEEuREUyMyBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIE90aGVyIEEuREUyMyAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuQi5ERTEgLSBSZWFzb24gZm9yIHZpc2l0CkBhY3Rpdml0eTogSElWLkIxIERldGVybWluZSByZWFzb24gZm9yIHZpc2l0CkBkZXNjcmlwdGlvbjogUmVhc29uIGZvciBISVYgdGVzdGluZyBzZXJ2aWNlcyB2aXNpdAoqLwpkZWZpbmUgIlJlYXNvbiBmb3IgdmlzaXQgQi5ERTEiOgogIEVsZW1lbnRzLiJIVFMgVmlzaXQgRW5jb3VudGVyIiBFCiAgICB3aGVyZSBFLnBhcnRPZi5yZWZlcmVuY2VzKEVuY291bnRlcklkKSAKICAgIG9yIEUucGVyaW9kLnN0YXJ0ID0gVG9kYXkKICAgIHJldHVybiBFLnJlYXNvbkNvZGUKLyogRW5kIG9mIFJlYXNvbiBmb3IgdmlzaXQgQi5ERTEgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkIuREUyIC0gRmlyc3QtdGltZSBISVYgdGVzdApAYWN0aXZpdHk6IEhJVi5CMSBEZXRlcm1pbmUgcmVhc29uIGZvciB2aXNpdApAZGVzY3JpcHRpb246IEZpcnN0IGVuY291bnRlciBmb3Igc2NyZWVuaW5nIGZvciBodW1hbiBpbW11bm9kZWZpY2llbmN5IHZpcnVzCiovCmRlZmluZSAiSXMgRmlyc3QtdGltZSBISVYgdGVzdCBFbmNvdW50ZXIiOgogIGV4aXN0cyAiRmlyc3QtdGltZSBISVYgdGVzdCBFbmNvdW50ZXIiCmRlZmluZSAiRmlyc3QtdGltZSBISVYgdGVzdCBFbmNvdW50ZXIiOgogIEVsZW1lbnRzLiJGaXJzdC10aW1lIEhJViB0ZXN0IEVuY291bnRlciIgRQogICAgd2hlcmUgRS5wYXJ0T2YucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkgCiAgICBvciBFLnBlcmlvZC5zdGFydCA9IFRvZGF5Ci8qIEVuZCBvZiBGaXJzdC10aW1lIEhJViB0ZXN0ICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5CLkRFMyAtIFJldGVzdGluZyBmb3IgSElWCkBhY3Rpdml0eTogSElWLkIxIERldGVybWluZSByZWFzb24gZm9yIHZpc2l0CkBkZXNjcmlwdGlvbjogUmV0ZXN0aW5nIGZvciBodW1hbiBpbW11bm9kZWZpY2llbmN5IHZpcnVzCiovCmRlZmluZSAiSXMgUmV0ZXN0aW5nIGZvciBISVYgQi5ERTMgRW5jb3VudGVyIjoKICBleGlzdHMgIlJldGVzdGluZyBmb3IgSElWIEIuREUzIEVuY291bnRlciIKZGVmaW5lICJSZXRlc3RpbmcgZm9yIEhJViBCLkRFMyBFbmNvdW50ZXIiOgogIEVsZW1lbnRzLiJSZXRlc3RpbmcgZm9yIEhJViBCLkRFMyBFbmNvdW50ZXIiIEUKICAgIHdoZXJlIEUucGFydE9mLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpIAogICAgb3IgRS5wZXJpb2Quc3RhcnQgPSBUb2RheQovKiBFbmQgb2YgUmV0ZXN0aW5nIGZvciBISVYgQi5ERTMgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkIuREU0IC0gSElWIHRlc3Rpbmcgc2VydmljZXMgdmlzaXQKQGFjdGl2aXR5OiBISVYuQjEgRGV0ZXJtaW5lIHJlYXNvbiBmb3IgdmlzaXQKQGRlc2NyaXB0aW9uOiBDbGllbnQgYXR0ZW5kaW5nIGZhY2lsaXR5IGZvciBISVYgdGVzdGluZyBzZXJ2aWNlcyB2aXNpdAoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiSXMgSElWIHRlc3Rpbmcgc2VydmljZXMgdmlzaXQiOgogIGV4aXN0cyAiSElWIHRlc3Rpbmcgc2VydmljZXMgdmlzaXQgRW5jb3VudGVyIgpkZWZpbmUgIkhJViB0ZXN0aW5nIHNlcnZpY2VzIHZpc2l0IEVuY291bnRlciI6CiAgRWxlbWVudHMuIkhJViB0ZXN0aW5nIHNlcnZpY2VzIHZpc2l0IEVuY291bnRlciIgRQogICAgd2hlcmUgRS5wYXJ0T2YucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkgCiAgICBvciBFLnBlcmlvZC5zdGFydCA9IFRvZGF5Ci8qIEVuZCBvZiBISVYgdGVzdGluZyBzZXJ2aWNlcyB2aXNpdCAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuQi5ERTE0IC0gRGF0ZS90aW1lIG9mIHN1c3BlY3RlZCBleHBvc3VyZSB0byBISVYKQGFjdGl2aXR5OiBISVYuQjEgRGV0ZXJtaW5lIHJlYXNvbiBmb3IgdmlzaXQKQGRlc2NyaXB0aW9uOiBEYXRlIGFuZCB0aW1lIHdoZW4gdGhlIGNsaWVudCBoYWQgc3VzcGVjdGVkIGV4cG9zdXJlIHRvIEhJVgoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiRGF0ZS90aW1lIG9mIHN1c3BlY3RlZCBleHBvc3VyZSB0byBISVYgQi5ERTE0IjoKICBFbGVtZW50cy4iRGF0ZS90aW1lIG9mIHN1c3BlY3RlZCBleHBvc3VyZSB0byBISVYgQi5ERTE0IiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIkRhdGUvdGltZSBvZiBzdXNwZWN0ZWQgZXhwb3N1cmUgdG8gSElWIEIuREUxNCBWYWx1ZSI6CiAgIkRhdGUvdGltZSBvZiBzdXNwZWN0ZWQgZXhwb3N1cmUgdG8gSElWIEIuREUxNCIgTwogIHJldHVybiBPLnZhbHVlCi8qIEVuZCBvZiBEYXRlL3RpbWUgb2Ygc3VzcGVjdGVkIGV4cG9zdXJlIHRvIEhJViBCLkRFMTQgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkIuREUyOSAtIEN1cnJlbnRseSBwcmVnbmFudApAYWN0aXZpdHk6IEhJVi5CNiBDYXB0dXJlIG9yIHVwZGF0ZSBjbGllbnQgaGlzdG9yeQpAZGVzY3JpcHRpb246IENsaWVudCBpcyBjdXJyZW50bHkgcHJlZ25hbnQKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkN1cnJlbnRseSBwcmVnbmFudCBCLkRFMjkiOgogIGV4aXN0cyAiQ3VycmVudGx5IHByZWduYW50IEIuREUyOSBPYnNlcnZhdGlvbiIKZGVmaW5lICJDdXJyZW50bHkgcHJlZ25hbnQgQi5ERTI5IE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iQ3VycmVudGx5IHByZWduYW50IEIuREUyOSBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIEN1cnJlbnRseSBwcmVnbmFudCBCLkRFMjkgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkIuREUzMyAtIFBhcnRuZXIgSElWIHN0YXR1cyByZXBvcnRlZApAYWN0aXZpdHk6IEhJVi5CNiBDYXB0dXJlIG9yIHVwZGF0ZSBjbGllbnQgaGlzdG9yeQpAZGVzY3JpcHRpb246IFRoZSBISVYgc3RhdHVzIG9mIHRoZSBjbGllbnQncyBwYXJ0bmVyLgoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiUGFydG5lciBISVYgc3RhdHVzIHJlcG9ydGVkIjoKICBleGlzdHMgIlBhcnRuZXIgSElWIHN0YXR1cyByZXBvcnRlZCBPYnNlcnZhdGlvbiIKZGVmaW5lICJQYXJ0bmVyIEhJViBzdGF0dXMgcmVwb3J0ZWQgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJQYXJ0bmVyIEhJViBzdGF0dXMgcmVwb3J0ZWQgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBQYXJ0bmVyIEhJViBzdGF0dXMgcmVwb3J0ZWQgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkIuREUzNCAtIEhJVi1wb3NpdGl2ZQpAYWN0aXZpdHk6IEhJVi5CNiBDYXB0dXJlIG9yIHVwZGF0ZSBjbGllbnQgaGlzdG9yeQpAZGVzY3JpcHRpb246IENsaWVudCdzIHBhcnRuZXIgaXMgSElWLXBvc2l0aXZlCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJISVYtcG9zaXRpdmUgQi5ERTM0IjoKICBleGlzdHMgIkhJVi1wb3NpdGl2ZSBCLkRFMzQgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJISVYtcG9zaXRpdmUgQi5ERTM0IE9ic2VydmF0aW9uIgpkZWZpbmUgIkhJVi1wb3NpdGl2ZSBCLkRFMzQgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iSElWLXBvc2l0aXZlIEIuREUzNCBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIkhJVi1wb3NpdGl2ZSBCLkRFMzQgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJISVYtcG9zaXRpdmUgQi5ERTM0IE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgSElWLXBvc2l0aXZlIEIuREUzNCAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuQi5ERTM1IC0gSElWLW5lZ2F0aXZlCkBhY3Rpdml0eTogSElWLkI2IENhcHR1cmUgb3IgdXBkYXRlIGNsaWVudCBoaXN0b3J5CkBkZXNjcmlwdGlvbjogQ2xpZW50J3MgcGFydG5lciBpcyBISVYtbmVnYXRpdmUKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkhJVi1uZWdhdGl2ZSBCLkRFMzUiOgogIGV4aXN0cyAiSElWLW5lZ2F0aXZlIEIuREUzNSBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIkhJVi1uZWdhdGl2ZSBCLkRFMzUgT2JzZXJ2YXRpb24iCmRlZmluZSAiSElWLW5lZ2F0aXZlIEIuREUzNSBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJISVYtbmVnYXRpdmUgQi5ERTM1IENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiSElWLW5lZ2F0aXZlIEIuREUzNSBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkhJVi1uZWdhdGl2ZSBCLkRFMzUgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBISVYtbmVnYXRpdmUgQi5ERTM1ICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5CLkRFMzYgLSBVbmtub3duCkBhY3Rpdml0eTogSElWLkI2IENhcHR1cmUgb3IgdXBkYXRlIGNsaWVudCBoaXN0b3J5CkBkZXNjcmlwdGlvbjogRG9uJ3Qga25vdyBISVYgc3RhdHVzIC0gY2xpZW50IGRvZXMgbm90IGtub3cgcGFydG5lcidzIEhJViBzdGF0dXMKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIlVua25vd24gQi5ERTM2IjoKICBleGlzdHMgIlVua25vd24gQi5ERTM2IENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiVW5rbm93biBCLkRFMzYgT2JzZXJ2YXRpb24iCmRlZmluZSAiVW5rbm93biBCLkRFMzYgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iVW5rbm93biBCLkRFMzYgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJVbmtub3duIEIuREUzNiBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIlVua25vd24gQi5ERTM2IE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgVW5rbm93biBCLkRFMzYgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkIuREU0OSAtIEtleSBwb3B1bGF0aW9uIG1lbWJlcgpAYWN0aXZpdHk6IEhJVi5CNiBDYXB0dXJlIG9yIHVwZGF0ZSBjbGllbnQgaGlzdG9yeQpAZGVzY3JpcHRpb246IENsaWVudCBpcyBhIG1lbWJlciBvZiBhIGtleSBwb3B1bGF0aW9uIHRoYXQgaGFzIGFuIGluY3JlYXNlZCByaXNrIG9mIEhJVgoqLwpkZWZpbmUgIklzIEtleSBwb3B1bGF0aW9uIG1lbWJlciBCLkRFNDkiOgogIGV4aXN0cygiS2V5IHBvcHVsYXRpb24gbWVtYmVyIHR5cGUgT2JzZXJ2YXRpb24iKQovKiBFbmQgb2YgS2V5IHBvcHVsYXRpb24gbWVtYmVyIEIuREU0OSAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuQi5ERTUwIC0gS2V5IHBvcHVsYXRpb24gbWVtYmVyIHR5cGUKQGFjdGl2aXR5OiBISVYuQjYgQ2FwdHVyZSBvciB1cGRhdGUgY2xpZW50IGhpc3RvcnkKQGRlc2NyaXB0aW9uOiBUaGUgdHlwZSBvZiBrZXkgcG9wdWxhdGlvbiB0aGF0IHRoZSBjbGllbnQgaXMgaW5jbHVkZWQgaW4KKi8KZGVmaW5lICJLZXkgcG9wdWxhdGlvbiBtZW1iZXIgdHlwZSBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIktleSBwb3B1bGF0aW9uIG1lbWJlciB0eXBlIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgS2V5IHBvcHVsYXRpb24gbWVtYmVyIHR5cGUgQi5ERTUwICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5CLkRFNjUgLSBEYXRlIGluZm9ybWVkIG9mIEhJVi1wb3NpdGl2ZSBkaWFnbm9zaXMKQGFjdGl2aXR5OiBISVYuQjYgQ2FwdHVyZSBvciB1cGRhdGUgY2xpZW50IGhpc3RvcnkKQGRlc2NyaXB0aW9uOiBUaGUgZGF0ZSBvbiB3aGljaCB0aGUgY2xpZW50IHdhcyBkaWFnbm9zZWQgd2l0aCBISVYKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkRhdGUgaW5mb3JtZWQgb2YgSElWLXBvc2l0aXZlIGRpYWdub3NpcyI6CiAgRWxlbWVudHMuIkRhdGUgaW5mb3JtZWQgb2YgSElWLXBvc2l0aXZlIGRpYWdub3NpcyIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJEYXRlIGluZm9ybWVkIG9mIEhJVi1wb3NpdGl2ZSBkaWFnbm9zaXMgVmFsdWUiOgogICJEYXRlIGluZm9ybWVkIG9mIEhJVi1wb3NpdGl2ZSBkaWFnbm9zaXMiIE8KICByZXR1cm4gTy52YWx1ZQovKiBFbmQgb2YgRGF0ZSBpbmZvcm1lZCBvZiBISVYtcG9zaXRpdmUgZGlhZ25vc2lzICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5CLkRFNzEgLSBISVYgZGlhZ25vc2lzIGRhdGUKQGFjdGl2aXR5OiBISVYuQjggUHJvdmlkZSBwb3N0LXRlc3QgY291bnNlbGxpbmcKQGRlc2NyaXB0aW9uOiBEYXRlIGRpYWdub3NpcyB3YXMgcmV0dXJuZWQgdG8gY2xpZW50CiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJISVYgZGlhZ25vc2lzIGRhdGUiOgogIEVsZW1lbnRzLiJISVYgZGlhZ25vc2lzIGRhdGUiIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiSElWIGRpYWdub3NpcyBkYXRlIFZhbHVlIjoKICAiSElWIGRpYWdub3NpcyBkYXRlIiBPCiAgcmV0dXJuIE8udmFsdWUKLyogRW5kIG9mIEhJViBkaWFnbm9zaXMgZGF0ZSAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuQi5ERTcyIC0gQVJUIHN0YXJ0IGRhdGUKQGFjdGl2aXR5OiBISVYuQjggUHJvdmlkZSBwb3N0LXRlc3QgY291bnNlbGxpbmcKQGRlc2NyaXB0aW9uOiBUaGUgZGF0ZSBvbiB3aGljaCB0aGUgY2xpZW50IHN0YXJ0ZWQgb3IgcmVzdGFydGVkIGFudGlyZXRyb3ZpcmFsIHRoZXJhcHkgKEFSVCkKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkFSVCBzdGFydCBkYXRlIEIuREU3MiI6CiAgRWxlbWVudHMuIkFSVCBzdGFydCBkYXRlIEIuREU3MiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJBUlQgc3RhcnQgZGF0ZSBCLkRFNzIgVmFsdWUiOgogICJBUlQgc3RhcnQgZGF0ZSBCLkRFNzIiIE8KICByZXR1cm4gTy52YWx1ZQovKiBFbmQgb2YgQVJUIHN0YXJ0IGRhdGUgQi5ERTcyICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5CLkRFODAgLSBISVYgdGVzdCBjb25kdWN0ZWQKQGFjdGl2aXR5OiBISVYuQjcgVGVzdCBmb3IgSElWIHVzaW5nIHRlc3RpbmcgYWxnb3JpdGhtCkBkZXNjcmlwdGlvbjogQW4gSElWIHRlc3Qgd2FzIHBlcmZvcm1lZCBvbiB0aGUgY2xpZW50IGR1cmluZyB0aGUgdmlzaXQKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkhJViB0ZXN0IGNvbmR1Y3RlZCI6CiAgZXhpc3RzICJISVYgdGVzdCBjb25kdWN0ZWQgT2JzZXJ2YXRpb24iCmRlZmluZSAiSElWIHRlc3QgY29uZHVjdGVkIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iSElWIHRlc3QgY29uZHVjdGVkIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgSElWIHRlc3QgY29uZHVjdGVkICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5CLkRFODEgLSBISVYgdGVzdCB0eXBlCkBhY3Rpdml0eTogSElWLkI3IFRlc3QgZm9yIEhJViB1c2luZyB0ZXN0aW5nIGFsZ29yaXRobQpAZGVzY3JpcHRpb246IFR5cGUgb2YgSElWIHRlc3QKKi8KZGVmaW5lICJISVYgdGVzdCB0eXBlIEIuREU4MSI6CiAgRWxlbWVudHMuIkhJViB0ZXN0IHR5cGUgQi5ERTgxIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIkhJViB0ZXN0IHR5cGUgQi5ERTgxIFZhbHVlIjoKICAiSElWIHRlc3QgdHlwZSBCLkRFODEiIE8KICByZXR1cm4gTy52YWx1ZQovKiBFbmQgb2YgSElWIHRlc3QgdHlwZSBCLkRFODEgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkIuREU4MiAtIFJhcGlkIGRpYWdub3N0aWMgdGVzdCBmb3IgSElWCkBhY3Rpdml0eTogSElWLkI3IFRlc3QgZm9yIEhJViB1c2luZyB0ZXN0aW5nIGFsZ29yaXRobQpAZGVzY3JpcHRpb246IEFudGlib2R5IHRlc3QgZm9yIEhJViBwZXJmb3JtZWQgd2l0aCBhIHJhcGlkIGRpYWdub3N0aWMKKi8KZGVmaW5lICJSYXBpZCBkaWFnbm9zdGljIHRlc3QgZm9yIEhJViBCLkRFODIiOgogIEVsZW1lbnRzLiJSYXBpZCBkaWFnbm9zdGljIHRlc3QgZm9yIEhJViBCLkRFODIiIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBSYXBpZCBkaWFnbm9zdGljIHRlc3QgZm9yIEhJViBCLkRFODIgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkIuREU4MyAtIEVuenltZSBpbW11bm9hc3NheSBmb3IgSElWCkBhY3Rpdml0eTogSElWLkI3IFRlc3QgZm9yIEhJViB1c2luZyB0ZXN0aW5nIGFsZ29yaXRobQpAZGVzY3JpcHRpb246IEFudGlib2R5IHRlc3QgZm9yIEhJViBwZXJmb3JtZWQgd2l0aCBhbiBlbnp5bWUgaW1tdW5vYXNzYXkKKi8KZGVmaW5lICJFbnp5bWUgaW1tdW5vYXNzYXkgZm9yIEhJViBCLkRFODMiOgogIEVsZW1lbnRzLiJFbnp5bWUgaW1tdW5vYXNzYXkgZm9yIEhJViBCLkRFODMiIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBFbnp5bWUgaW1tdW5vYXNzYXkgZm9yIEhJViBCLkRFODMgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkIuREU4NCAtIE51Y2xlaWMgYWNpZCB0ZXN0IGZvciBISVYKQGFjdGl2aXR5OiBISVYuQjcgVGVzdCBmb3IgSElWIHVzaW5nIHRlc3RpbmcgYWxnb3JpdGhtCkBkZXNjcmlwdGlvbjogVmlyb2xvZ2ljYWwgdGVzdCwgd2hpY2ggaW5jbHVkZXMgdGVzdGluZyBmb3IgZWFybHkgaW5mYW50IGRpYWdub3NpcwoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiTnVjbGVpYyBhY2lkIHRlc3QgZm9yIEhJViBCLkRFODQiOgogIEVsZW1lbnRzLiJOdWNsZWljIGFjaWQgdGVzdCBmb3IgSElWIEIuREU4NCIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIE51Y2xlaWMgYWNpZCB0ZXN0IGZvciBISVYgQi5ERTg0ICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5CLkRFODUgLSBEdWFsIEhJVi9zeXBoaWxpcyByYXBpZCBkaWFnbm9zdGljIHRlc3QKQGFjdGl2aXR5OiBISVYuQjcgVGVzdCBmb3IgSElWIHVzaW5nIHRlc3RpbmcgYWxnb3JpdGhtCkBkZXNjcmlwdGlvbjogQW50aWJvZHkgdGVzdCBmb3IgSElWIGFuZCBzeXBoaWxpcyBwZXJmb3JtZWQgd2l0aCBhIHJhcGlkIGRpYWdub3N0aWMKKi8KZGVmaW5lICJEdWFsIEhJVi9zeXBoaWxpcyByYXBpZCBkaWFnbm9zdGljIHRlc3QgQi5ERTg1IjoKICBFbGVtZW50cy4iRHVhbCBISVYvc3lwaGlsaXMgcmFwaWQgZGlhZ25vc3RpYyB0ZXN0IEIuREU4NSIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIER1YWwgSElWL3N5cGhpbGlzIHJhcGlkIGRpYWdub3N0aWMgdGVzdCBCLkRFODUgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkIuREU4NiAtIEhJViBzZWxmLXRlc3QKQGFjdGl2aXR5OiBISVYuQjcgVGVzdCBmb3IgSElWIHVzaW5nIHRlc3RpbmcgYWxnb3JpdGhtCkBkZXNjcmlwdGlvbjogQW50aWJvZHkgdGVzdCBmb3IgSElWIHBlcmZvcm1lZCBieSBzZWxmLXRlc3RlciB1c2luZyBhIHJhcGlkIGRpYWdub3N0aWMKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkhJViBzZWxmLXRlc3QiOgogIEVsZW1lbnRzLiJISVYgc2VsZi10ZXN0IiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgSElWIHNlbGYtdGVzdCAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuQi5ERTg4IC0gQXNzYXkgbnVtYmVyIGluIHRlc3Rpbmcgc3RyYXRlZ3kKQGFjdGl2aXR5OiBISVYuQjcgVGVzdCBmb3IgSElWIHVzaW5nIHRlc3RpbmcgYWxnb3JpdGhtCkBkZXNjcmlwdGlvbjogVGhlIG51bWJlciBvZiB0aGUgYXNzYXkgKHRlc3Qga2l0KSBpbiB0aGUgSElWIHRlc3Rpbmcgc3RyYXRlZ3kKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkFzc2F5IG51bWJlciBpbiB0ZXN0aW5nIHN0cmF0ZWd5IEIuREU4OCI6CiAgZXhpc3RzICJBc3NheSBudW1iZXIgaW4gdGVzdGluZyBzdHJhdGVneSBCLkRFODggT2JzZXJ2YXRpb24iCmRlZmluZSAiQXNzYXkgbnVtYmVyIGluIHRlc3Rpbmcgc3RyYXRlZ3kgQi5ERTg4IE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iQXNzYXkgbnVtYmVyIGluIHRlc3Rpbmcgc3RyYXRlZ3kgQi5ERTg4IE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgQXNzYXkgbnVtYmVyIGluIHRlc3Rpbmcgc3RyYXRlZ3kgQi5ERTg4ICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5CLkRFODkgLSBBc3NheSAwCkBhY3Rpdml0eTogSElWLkI3IFRlc3QgZm9yIEhJViB1c2luZyB0ZXN0aW5nIGFsZ29yaXRobQpAZGVzY3JpcHRpb246IEEgY29tbXVuaXR5IG91dHJlYWNoIHRlc3QtZm9yLXRyaWFnZSBvciBzZWxmLXRlc3Qgd2hpY2ggaXMgbm90IGluY2x1ZGVkIGluIHRoZSBISVYgdGVzdGluZyBzdHJhdGVneQoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiQXNzYXkgMCBCLkRFODkiOgogIGV4aXN0cyAiQXNzYXkgMCBCLkRFODkgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJBc3NheSAwIEIuREU4OSBPYnNlcnZhdGlvbiIKZGVmaW5lICJBc3NheSAwIEIuREU4OSBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJBc3NheSAwIEIuREU4OSBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIkFzc2F5IDAgQi5ERTg5IE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iQXNzYXkgMCBCLkRFODkgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBBc3NheSAwIEIuREU4OSAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuQi5ERTkwIC0gQXNzYXkgMQpAYWN0aXZpdHk6IEhJVi5CNyBUZXN0IGZvciBISVYgdXNpbmcgdGVzdGluZyBhbGdvcml0aG0KQGRlc2NyaXB0aW9uOiBUaGUgZmlyc3QgdGVzdCBpbiB0aGUgSElWIHRlc3Rpbmcgc3RyYXRlZ3kKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkFzc2F5IDEgQi5ERTkwIjoKICBleGlzdHMgIkFzc2F5IDEgQi5ERTkwIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiQXNzYXkgMSBCLkRFOTAgT2JzZXJ2YXRpb24iCmRlZmluZSAiQXNzYXkgMSBCLkRFOTAgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iQXNzYXkgMSBCLkRFOTAgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJBc3NheSAxIEIuREU5MCBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkFzc2F5IDEgQi5ERTkwIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgQXNzYXkgMSBCLkRFOTAgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkIuREU5MSAtIEFzc2F5IDIKQGFjdGl2aXR5OiBISVYuQjcgVGVzdCBmb3IgSElWIHVzaW5nIHRlc3RpbmcgYWxnb3JpdGhtCkBkZXNjcmlwdGlvbjogVGhlIHNlY29uZCB0ZXN0IGluIHRoZSBISVYgdGVzdGluZyBzdHJhdGVneQoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiQXNzYXkgMiBCLkRFOTEiOgogIGV4aXN0cyAiQXNzYXkgMiBCLkRFOTEgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJBc3NheSAyIEIuREU5MSBPYnNlcnZhdGlvbiIKZGVmaW5lICJBc3NheSAyIEIuREU5MSBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJBc3NheSAyIEIuREU5MSBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIkFzc2F5IDIgQi5ERTkxIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iQXNzYXkgMiBCLkRFOTEgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBBc3NheSAyIEIuREU5MSAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuQi5ERTkyIC0gQXNzYXkgMwpAYWN0aXZpdHk6IEhJVi5CNyBUZXN0IGZvciBISVYgdXNpbmcgdGVzdGluZyBhbGdvcml0aG0KQGRlc2NyaXB0aW9uOiBUaGUgdGhpcmQgdGVzdCBpbiB0aGUgSElWIHRlc3Rpbmcgc3RyYXRlZ3kKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkFzc2F5IDMgQi5ERTkyIjoKICBleGlzdHMgIkFzc2F5IDMgQi5ERTkyIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiQXNzYXkgMyBCLkRFOTIgT2JzZXJ2YXRpb24iCmRlZmluZSAiQXNzYXkgMyBCLkRFOTIgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iQXNzYXkgMyBCLkRFOTIgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJBc3NheSAzIEIuREU5MiBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkFzc2F5IDMgQi5ERTkyIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgQXNzYXkgMyBCLkRFOTIgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkIuREU5MyAtIEFzc2F5IDEgcmVwZWF0ZWQKQGFjdGl2aXR5OiBISVYuQjcgVGVzdCBmb3IgSElWIHVzaW5nIHRlc3RpbmcgYWxnb3JpdGhtCkBkZXNjcmlwdGlvbjogVGhlIGZpcnN0IHRlc3QgaW4gdGhlIEhJViB0ZXN0aW5nIHN0cmF0ZWd5CiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJBc3NheSAxIHJlcGVhdGVkIEIuREU5MyI6CiAgZXhpc3RzICJBc3NheSAxIHJlcGVhdGVkIEIuREU5MyBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIkFzc2F5IDEgcmVwZWF0ZWQgQi5ERTkzIE9ic2VydmF0aW9uIgpkZWZpbmUgIkFzc2F5IDEgcmVwZWF0ZWQgQi5ERTkzIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIkFzc2F5IDEgcmVwZWF0ZWQgQi5ERTkzIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiQXNzYXkgMSByZXBlYXRlZCBCLkRFOTMgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJBc3NheSAxIHJlcGVhdGVkIEIuREU5MyBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIEFzc2F5IDEgcmVwZWF0ZWQgQi5ERTkzICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5CLkRFOTQgLSBUZXN0IHJlc3VsdCBvZiBISVYgYXNzYXkgMQpAYWN0aXZpdHk6IEhJVi5CNyBUZXN0IGZvciBISVYgdXNpbmcgdGVzdGluZyBhbGdvcml0aG0KQGRlc2NyaXB0aW9uOiBUaGUgcmVzdWx0IG9mIHRoZSBmaXJzdCBISVYgYXNzYXkgaW4gdGhlIHRlc3Rpbmcgc3RyYXRlZ3kKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIlRlc3QgcmVzdWx0IG9mIEhJViBhc3NheSAxIEIuREU5NCI6CiAgZXhpc3RzICJUZXN0IHJlc3VsdCBvZiBISVYgYXNzYXkgMSBCLkRFOTQgT2JzZXJ2YXRpb24iCmRlZmluZSAiVGVzdCByZXN1bHQgb2YgSElWIGFzc2F5IDEgQi5ERTk0IE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iVGVzdCByZXN1bHQgb2YgSElWIGFzc2F5IDEgQi5ERTk0IE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgVGVzdCByZXN1bHQgb2YgSElWIGFzc2F5IDEgQi5ERTk0ICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5CLkRFOTUgLSBSZWFjdGl2ZQpAYWN0aXZpdHk6IEhJVi5CNyBUZXN0IGZvciBISVYgdXNpbmcgdGVzdGluZyBhbGdvcml0aG0KQGRlc2NyaXB0aW9uOiBUaGUgcmVzdWx0IG9mIHRoZSBISVYgYXNzYXkgaW4gdGhlIHRlc3Rpbmcgc3RyYXRlZ3kgd2FzIHJlYWN0aXZlCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJSZWFjdGl2ZSBCLkRFOTUiOgogIGV4aXN0cyAiUmVhY3RpdmUgQi5ERTk1IENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiUmVhY3RpdmUgQi5ERTk1IE9ic2VydmF0aW9uIgpkZWZpbmUgIlJlYWN0aXZlIEIuREU5NSBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJSZWFjdGl2ZSBCLkRFOTUgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJSZWFjdGl2ZSBCLkRFOTUgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJSZWFjdGl2ZSBCLkRFOTUgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBSZWFjdGl2ZSBCLkRFOTUgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkIuREU5NiAtIE5vbi1yZWFjdGl2ZQpAYWN0aXZpdHk6IEhJVi5CNyBUZXN0IGZvciBISVYgdXNpbmcgdGVzdGluZyBhbGdvcml0aG0KQGRlc2NyaXB0aW9uOiBUaGUgcmVzdWx0IG9mIHRoZSBISVYgYXNzYXkgaW4gdGhlIHRlc3Rpbmcgc3RyYXRlZ3kgd2FzIG5vbi1yZWFjdGl2ZQoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiTm9uLXJlYWN0aXZlIEIuREU5NiI6CiAgZXhpc3RzICJOb24tcmVhY3RpdmUgQi5ERTk2IENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiTm9uLXJlYWN0aXZlIEIuREU5NiBPYnNlcnZhdGlvbiIKZGVmaW5lICJOb24tcmVhY3RpdmUgQi5ERTk2IENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIk5vbi1yZWFjdGl2ZSBCLkRFOTYgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJOb24tcmVhY3RpdmUgQi5ERTk2IE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iTm9uLXJlYWN0aXZlIEIuREU5NiBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIE5vbi1yZWFjdGl2ZSBCLkRFOTYgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkIuREU5NyAtIEludmFsaWQKQGFjdGl2aXR5OiBISVYuQjcgVGVzdCBmb3IgSElWIHVzaW5nIHRlc3RpbmcgYWxnb3JpdGhtCkBkZXNjcmlwdGlvbjogVGhlIHJlc3VsdCBvZiB0aGUgSElWIGFzc2F5IGluIHRoZSB0ZXN0aW5nIHN0cmF0ZWd5IHdhcyBpbnZhbGlkCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJJbnZhbGlkIEIuREU5NyI6CiAgZXhpc3RzICJJbnZhbGlkIEIuREU5NyBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIkludmFsaWQgQi5ERTk3IE9ic2VydmF0aW9uIgpkZWZpbmUgIkludmFsaWQgQi5ERTk3IENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIkludmFsaWQgQi5ERTk3IENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiSW52YWxpZCBCLkRFOTcgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJJbnZhbGlkIEIuREU5NyBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIEludmFsaWQgQi5ERTk3ICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5CLkRFOTggLSBUZXN0IHJlc3VsdCBvZiBISVYgYXNzYXkgMgpAYWN0aXZpdHk6IEhJVi5CNyBUZXN0IGZvciBISVYgdXNpbmcgdGVzdGluZyBhbGdvcml0aG0KQGRlc2NyaXB0aW9uOiBUaGUgcmVzdWx0IG9mIHRoZSBzZWNvbmQgSElWIGFzc2F5IGluIHRoZSB0ZXN0aW5nIHN0cmF0ZWd5CiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJUZXN0IHJlc3VsdCBvZiBISVYgYXNzYXkgMiBCLkRFOTgiOgogIGV4aXN0cyAiVGVzdCByZXN1bHQgb2YgSElWIGFzc2F5IDIgQi5ERTk4IE9ic2VydmF0aW9uIgpkZWZpbmUgIlRlc3QgcmVzdWx0IG9mIEhJViBhc3NheSAyIEIuREU5OCBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIlRlc3QgcmVzdWx0IG9mIEhJViBhc3NheSAyIEIuREU5OCBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIFRlc3QgcmVzdWx0IG9mIEhJViBhc3NheSAyIEIuREU5OCAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuQi5ERTk5IC0gUmVhY3RpdmUKQGFjdGl2aXR5OiBISVYuQjcgVGVzdCBmb3IgSElWIHVzaW5nIHRlc3RpbmcgYWxnb3JpdGhtCkBkZXNjcmlwdGlvbjogVGhlIHJlc3VsdCBvZiB0aGUgSElWIGFzc2F5IGluIHRoZSB0ZXN0aW5nIHN0cmF0ZWd5IHdhcyByZWFjdGl2ZQoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiUmVhY3RpdmUgQi5ERTk5IjoKICBleGlzdHMgIlJlYWN0aXZlIEIuREU5OSBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIlJlYWN0aXZlIEIuREU5OSBPYnNlcnZhdGlvbiIKZGVmaW5lICJSZWFjdGl2ZSBCLkRFOTkgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iUmVhY3RpdmUgQi5ERTk5IENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiUmVhY3RpdmUgQi5ERTk5IE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iUmVhY3RpdmUgQi5ERTk5IE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgUmVhY3RpdmUgQi5ERTk5ICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5CLkRFMTAwIC0gTm9uLXJlYWN0aXZlCkBhY3Rpdml0eTogSElWLkI3IFRlc3QgZm9yIEhJViB1c2luZyB0ZXN0aW5nIGFsZ29yaXRobQpAZGVzY3JpcHRpb246IFRoZSByZXN1bHQgb2YgdGhlIEhJViBhc3NheSBpbiB0aGUgdGVzdGluZyBzdHJhdGVneSB3YXMgbm9uLXJlYWN0aXZlCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJOb24tcmVhY3RpdmUgQi5ERTEwMCI6CiAgZXhpc3RzICJOb24tcmVhY3RpdmUgQi5ERTEwMCBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIk5vbi1yZWFjdGl2ZSBCLkRFMTAwIE9ic2VydmF0aW9uIgpkZWZpbmUgIk5vbi1yZWFjdGl2ZSBCLkRFMTAwIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIk5vbi1yZWFjdGl2ZSBCLkRFMTAwIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiTm9uLXJlYWN0aXZlIEIuREUxMDAgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJOb24tcmVhY3RpdmUgQi5ERTEwMCBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIE5vbi1yZWFjdGl2ZSBCLkRFMTAwICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5CLkRFMTAxIC0gSW52YWxpZApAYWN0aXZpdHk6IEhJVi5CNyBUZXN0IGZvciBISVYgdXNpbmcgdGVzdGluZyBhbGdvcml0aG0KQGRlc2NyaXB0aW9uOiBUaGUgcmVzdWx0IG9mIHRoZSBISVYgYXNzYXkgaW4gdGhlIHRlc3Rpbmcgc3RyYXRlZ3kgd2FzIGludmFsaWQKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkludmFsaWQgQi5ERTEwMSI6CiAgZXhpc3RzICJJbnZhbGlkIEIuREUxMDEgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJJbnZhbGlkIEIuREUxMDEgT2JzZXJ2YXRpb24iCmRlZmluZSAiSW52YWxpZCBCLkRFMTAxIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIkludmFsaWQgQi5ERTEwMSBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIkludmFsaWQgQi5ERTEwMSBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkludmFsaWQgQi5ERTEwMSBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIEludmFsaWQgQi5ERTEwMSAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuQi5ERTEwMiAtIFRlc3QgcmVzdWx0IG9mIEhJViBhc3NheSAzCkBhY3Rpdml0eTogSElWLkI3IFRlc3QgZm9yIEhJViB1c2luZyB0ZXN0aW5nIGFsZ29yaXRobQpAZGVzY3JpcHRpb246IFRoZSByZXN1bHQgb2YgdGhlIHRoaXJkIEhJViBhc3NheSBpbiB0aGUgdGVzdGluZyBzdHJhdGVneQoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiVGVzdCByZXN1bHQgb2YgSElWIGFzc2F5IDMgQi5ERTEwMiI6CiAgZXhpc3RzICJUZXN0IHJlc3VsdCBvZiBISVYgYXNzYXkgMyBCLkRFMTAyIE9ic2VydmF0aW9uIgpkZWZpbmUgIlRlc3QgcmVzdWx0IG9mIEhJViBhc3NheSAzIEIuREUxMDIgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJUZXN0IHJlc3VsdCBvZiBISVYgYXNzYXkgMyBCLkRFMTAyIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgVGVzdCByZXN1bHQgb2YgSElWIGFzc2F5IDMgQi5ERTEwMiAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuQi5ERTEwMyAtIFJlYWN0aXZlCkBhY3Rpdml0eTogSElWLkI3IFRlc3QgZm9yIEhJViB1c2luZyB0ZXN0aW5nIGFsZ29yaXRobQpAZGVzY3JpcHRpb246IFRoZSByZXN1bHQgb2YgdGhlIEhJViBhc3NheSBpbiB0aGUgdGVzdGluZyBzdHJhdGVneSB3YXMgcmVhY3RpdmUKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIlJlYWN0aXZlIEIuREUxMDMiOgogIGV4aXN0cyAiUmVhY3RpdmUgQi5ERTEwMyBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIlJlYWN0aXZlIEIuREUxMDMgT2JzZXJ2YXRpb24iCmRlZmluZSAiUmVhY3RpdmUgQi5ERTEwMyBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJSZWFjdGl2ZSBCLkRFMTAzIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiUmVhY3RpdmUgQi5ERTEwMyBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIlJlYWN0aXZlIEIuREUxMDMgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBSZWFjdGl2ZSBCLkRFMTAzICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5CLkRFMTA0IC0gTm9uLXJlYWN0aXZlCkBhY3Rpdml0eTogSElWLkI3IFRlc3QgZm9yIEhJViB1c2luZyB0ZXN0aW5nIGFsZ29yaXRobQpAZGVzY3JpcHRpb246IFRoZSByZXN1bHQgb2YgdGhlIEhJViBhc3NheSBpbiB0aGUgdGVzdGluZyBzdHJhdGVneSB3YXMgbm9uLXJlYWN0aXZlCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJOb24tcmVhY3RpdmUgQi5ERTEwNCI6CiAgZXhpc3RzICJOb24tcmVhY3RpdmUgQi5ERTEwNCBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIk5vbi1yZWFjdGl2ZSBCLkRFMTA0IE9ic2VydmF0aW9uIgpkZWZpbmUgIk5vbi1yZWFjdGl2ZSBCLkRFMTA0IENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIk5vbi1yZWFjdGl2ZSBCLkRFMTA0IENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiTm9uLXJlYWN0aXZlIEIuREUxMDQgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJOb24tcmVhY3RpdmUgQi5ERTEwNCBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIE5vbi1yZWFjdGl2ZSBCLkRFMTA0ICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5CLkRFMTA1IC0gSW52YWxpZApAYWN0aXZpdHk6IEhJVi5CNyBUZXN0IGZvciBISVYgdXNpbmcgdGVzdGluZyBhbGdvcml0aG0KQGRlc2NyaXB0aW9uOiBUaGUgcmVzdWx0IG9mIHRoZSBISVYgYXNzYXkgaW4gdGhlIHRlc3Rpbmcgc3RyYXRlZ3kgd2FzIGludmFsaWQKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkludmFsaWQgQi5ERTEwNSI6CiAgZXhpc3RzICJJbnZhbGlkIEIuREUxMDUgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJJbnZhbGlkIEIuREUxMDUgT2JzZXJ2YXRpb24iCmRlZmluZSAiSW52YWxpZCBCLkRFMTA1IENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIkludmFsaWQgQi5ERTEwNSBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIkludmFsaWQgQi5ERTEwNSBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkludmFsaWQgQi5ERTEwNSBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIEludmFsaWQgQi5ERTEwNSAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuQi5ERTEwNiAtIFRlc3QgcmVzdWx0IG9mIEhJViBhc3NheSAxIHJlcGVhdGVkCkBhY3Rpdml0eTogSElWLkI3IFRlc3QgZm9yIEhJViB1c2luZyB0ZXN0aW5nIGFsZ29yaXRobQpAZGVzY3JpcHRpb246IFRoZSByZXN1bHQgb2YgdGhlIHJlcGVhdGVkIGZpcnN0IEhJViBhc3NheSBpbiB0aGUgdGVzdGluZyBzdHJhdGVneQoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiVGVzdCByZXN1bHQgb2YgSElWIGFzc2F5IDEgcmVwZWF0ZWQgQi5ERTEwNiI6CiAgZXhpc3RzICJUZXN0IHJlc3VsdCBvZiBISVYgYXNzYXkgMSByZXBlYXRlZCBCLkRFMTA2IE9ic2VydmF0aW9uIgpkZWZpbmUgIlRlc3QgcmVzdWx0IG9mIEhJViBhc3NheSAxIHJlcGVhdGVkIEIuREUxMDYgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJUZXN0IHJlc3VsdCBvZiBISVYgYXNzYXkgMSByZXBlYXRlZCBCLkRFMTA2IE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgVGVzdCByZXN1bHQgb2YgSElWIGFzc2F5IDEgcmVwZWF0ZWQgQi5ERTEwNiAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuQi5ERTEwNyAtIFJlYWN0aXZlCkBhY3Rpdml0eTogSElWLkI3IFRlc3QgZm9yIEhJViB1c2luZyB0ZXN0aW5nIGFsZ29yaXRobQpAZGVzY3JpcHRpb246IFRoZSByZXN1bHQgb2YgdGhlIEhJViBhc3NheSBpbiB0aGUgdGVzdGluZyBzdHJhdGVneSB3YXMgcmVhY3RpdmUKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIlJlYWN0aXZlIEIuREUxMDciOgogIGV4aXN0cyAiUmVhY3RpdmUgQi5ERTEwNyBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIlJlYWN0aXZlIEIuREUxMDcgT2JzZXJ2YXRpb24iCmRlZmluZSAiUmVhY3RpdmUgQi5ERTEwNyBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJSZWFjdGl2ZSBCLkRFMTA3IENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiUmVhY3RpdmUgQi5ERTEwNyBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIlJlYWN0aXZlIEIuREUxMDcgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBSZWFjdGl2ZSBCLkRFMTA3ICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5CLkRFMTA4IC0gTm9uLXJlYWN0aXZlCkBhY3Rpdml0eTogSElWLkI3IFRlc3QgZm9yIEhJViB1c2luZyB0ZXN0aW5nIGFsZ29yaXRobQpAZGVzY3JpcHRpb246IFRoZSByZXN1bHQgb2YgdGhlIEhJViBhc3NheSBpbiB0aGUgdGVzdGluZyBzdHJhdGVneSB3YXMgbm9uLXJlYWN0aXZlCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJOb24tcmVhY3RpdmUgQi5ERTEwOCI6CiAgZXhpc3RzICJOb24tcmVhY3RpdmUgQi5ERTEwOCBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIk5vbi1yZWFjdGl2ZSBCLkRFMTA4IE9ic2VydmF0aW9uIgpkZWZpbmUgIk5vbi1yZWFjdGl2ZSBCLkRFMTA4IENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIk5vbi1yZWFjdGl2ZSBCLkRFMTA4IENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiTm9uLXJlYWN0aXZlIEIuREUxMDggT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJOb24tcmVhY3RpdmUgQi5ERTEwOCBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIE5vbi1yZWFjdGl2ZSBCLkRFMTA4ICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5CLkRFMTA5IC0gSW52YWxpZApAYWN0aXZpdHk6IEhJVi5CNyBUZXN0IGZvciBISVYgdXNpbmcgdGVzdGluZyBhbGdvcml0aG0KQGRlc2NyaXB0aW9uOiBUaGUgcmVzdWx0IG9mIHRoZSBISVYgYXNzYXkgaW4gdGhlIHRlc3Rpbmcgc3RyYXRlZ3kgd2FzIGludmFsaWQKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkludmFsaWQgQi5ERTEwOSI6CiAgZXhpc3RzICJJbnZhbGlkIEIuREUxMDkgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJJbnZhbGlkIEIuREUxMDkgT2JzZXJ2YXRpb24iCmRlZmluZSAiSW52YWxpZCBCLkRFMTA5IENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIkludmFsaWQgQi5ERTEwOSBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIkludmFsaWQgQi5ERTEwOSBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkludmFsaWQgQi5ERTEwOSBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIEludmFsaWQgQi5ERTEwOSAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuQi5ERTExMSAtIEhJViB0ZXN0IHJlc3VsdApAYWN0aXZpdHk6IEhJVi5CNyBUZXN0IGZvciBISVYgdXNpbmcgdGVzdGluZyBhbGdvcml0aG0KQGRlc2NyaXB0aW9uOiBUaGUgcmVzdWx0IGZyb20gSElWIHRlc3RpbmcgYWZ0ZXIgYXBwbHlpbmcgdGhlIHRlc3RpbmcgYWxnb3JpdGhtCiovCmRlZmluZSAiSElWIHRlc3QgcmVzdWx0IE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iSElWIHRlc3QgcmVzdWx0IE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIkhJViB0ZXN0IHJlc3VsdCBWYWx1ZSI6CiAgRWxlbWVudHMuIkhJViB0ZXN0IHJlc3VsdCBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKICByZXR1cm4gTy52YWx1ZQovKiBFbmQgb2YgSElWIHRlc3QgcmVzdWx0IEIuREUxMTEgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkIuREUxMTIgLSBISVYtcG9zaXRpdmUKQGFjdGl2aXR5OiBISVYuQjcgVGVzdCBmb3IgSElWIHVzaW5nIHRlc3RpbmcgYWxnb3JpdGhtCkBkZXNjcmlwdGlvbjogVGVzdCByZXN1bHQgaXMgSElWLXBvc2l0aXZlCiovCmRlZmluZSAiSElWLXBvc2l0aXZlIHRlc3QgcmVzdWx0IjoKICBFbGVtZW50cy4iSElWLXBvc2l0aXZlIHRlc3QgcmVzdWx0IiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgSElWLXBvc2l0aXZlIEIuREUxMTIgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkIuREUxMTMgLSBISVYtbmVnYXRpdmUKQGFjdGl2aXR5OiBISVYuQjcgVGVzdCBmb3IgSElWIHVzaW5nIHRlc3RpbmcgYWxnb3JpdGhtCkBkZXNjcmlwdGlvbjogVGVzdCByZXN1bHQgaXMgSElWLW5lZ2F0aXZlCiovCmRlZmluZSAiSElWLW5lZ2F0aXZlIHRlc3QgcmVzdWx0IjoKICBFbGVtZW50cy4iSElWLW5lZ2F0aXZlIHRlc3QgcmVzdWx0IiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgSElWLW5lZ2F0aXZlIEIuREUxMTMgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkIuREUxMTQgLSBISVYtaW5jb25jbHVzaXZlCkBhY3Rpdml0eTogSElWLkI3IFRlc3QgZm9yIEhJViB1c2luZyB0ZXN0aW5nIGFsZ29yaXRobQpAZGVzY3JpcHRpb246IFRlc3QgcmVzdWx0IGlzIEhJVi1pbmNvbmNsdXNpdmUKKi8KZGVmaW5lICJISVYtaW5jb25jbHVzaXZlIHRlc3QgcmVzdWx0IjoKICBFbGVtZW50cy4iSElWLWluY29uY2x1c2l2ZSB0ZXN0IHJlc3VsdCIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIEhJVi1pbmNvbmNsdXNpdmUgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkIuREUxMTUgLSBISVYgc3RhdHVzCkBhY3Rpdml0eTogSElWLkI3IFRlc3QgZm9yIEhJViB1c2luZyB0ZXN0aW5nIGFsZ29yaXRobQpAZGVzY3JpcHRpb246IEhJViBzdGF0dXMgcmVwb3J0ZWQgYWZ0ZXIgYXBwbHlpbmcgdGhlIG5hdGlvbmFsIEhJViB0ZXN0aW5nIGFsZ29yaXRobS4gTm8gc2luZ2xlIEhJViB0ZXN0IGNhbiBwcm92aWRlIGFuIEhJVi1wb3NpdGl2ZSBkaWFnbm9zaXMuCiovCmRlZmluZSAiSElWIFN0YXR1cyBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkhJViBTdGF0dXMgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CgogIC8vIGNhc2UgCiAgLy8gICAgIHdoZW4gZXhpc3RzKCJISVYtcG9zaXRpdmUgQ29uZGl0aW9uIikgb3IgZXhpc3RzKCJISVYtcG9zaXRpdmUgQ29uZGl0aW9uIikgdGhlbiBDb25jZXB0cy4iSElWLXBvc2l0aXZlIC0gSElWLkIuREUxMTYiCiAgLy8gICAgIHdoZW4gbm90IGV4aXN0cygiSElWLXBvc2l0aXZlIENvbmRpdGlvbiIpIGFuZCBleGlzdHMoQ29tbW9uLiJISVYgTmVnYXRpdmUgT2JzZXJ2YXRpb24iKSB0aGVuICBDb25jZXB0cy4iSElWLW5lZ2F0aXZlIC0gSElWLkIuREUxMTciCiAgLy8gICAgIGVsc2UgQ29uY2VwdHMuIlVua25vd24gLSBISVYuQi5ERTExOCIKICAvLyBlbmQKLyogRW5kIG9mIEhJViBzdGF0dXMgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkIuREUxMTYgLSBISVYtcG9zaXRpdmUKQGFjdGl2aXR5OiBISVYuQjcgVGVzdCBmb3IgSElWIHVzaW5nIHRlc3RpbmcgYWxnb3JpdGhtCkBkZXNjcmlwdGlvbjogQ2xpZW50IGlzIEhJVi1wb3NpdGl2ZQoqLwpkZWZpbmUgIkhJViBTdGF0dXMgUG9zdGl0aXZlIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iSElWIFN0YXR1cyBQb3NpdGl2ZSBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJISVYgU3RhdHVzIFBvc2l0aXZlIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIkhJViBTdGF0dXMgUG9zaXRpdmUgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIEhJVi1wb3NpdGl2ZSBCLkRFMTE2ICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5CLkRFMTQxIC0gUGFydG5lciB2aXJhbGx5IHN1cHByZXNzZWQgb24gQVJUCkBhY3Rpdml0eTogSElWLkI2IENhcHR1cmUgb3IgdXBkYXRlIGNsaWVudCBoaXN0b3J5CkBkZXNjcmlwdGlvbjogQVJUIGFuZCB2aXJhbGx5IHN1cHByZXNzaW9uIHN0YXR1cyBvZiBhIHBhcnRuZXIgb2YgdGhlIGNsaWVudAoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiUGFydG5lciB2aXJhbGx5IHN1cHByZXNzZWQgb24gQVJUIjoKICBleGlzdHMgIlBhcnRuZXIgdmlyYWxseSBzdXBwcmVzc2VkIG9uIEFSVCBPYnNlcnZhdGlvbiIKZGVmaW5lICJQYXJ0bmVyIHZpcmFsbHkgc3VwcHJlc3NlZCBvbiBBUlQgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJQYXJ0bmVyIHZpcmFsbHkgc3VwcHJlc3NlZCBvbiBBUlQgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBQYXJ0bmVyIHZpcmFsbHkgc3VwcHJlc3NlZCBvbiBBUlQgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkIuREUxNDIgLSBDb3Vuc2VsbGluZyBwcm92aWRlZApAYWN0aXZpdHk6IEhJVi5COCBQcm92aWRlIHBvc3QtdGVzdCBjb3Vuc2VsbGluZwpAZGVzY3JpcHRpb246IFdoZXRoZXIgY291bnNlbGxpbmcgd2FzIHByb3ZpZGVkIHRvIGEgY2xpZW50IGR1cmluZyB0aGUgdmlzaXQKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkNvdW5zZWxsaW5nIHByb3ZpZGVkIjoKICBleGlzdHMgIkNvdW5zZWxsaW5nIHByb3ZpZGVkIE9ic2VydmF0aW9uIgpkZWZpbmUgIkNvdW5zZWxsaW5nIHByb3ZpZGVkIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iQ291bnNlbGxpbmcgcHJvdmlkZWQgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBDb3Vuc2VsbGluZyBwcm92aWRlZCAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuQi5ERTE0MyAtIEhJVi1wb3NpdGl2ZSBjb3Vuc2VsbGluZyBjb25kdWN0ZWQKQGFjdGl2aXR5OiBISVYuQjggUHJvdmlkZSBwb3N0LXRlc3QgY291bnNlbGxpbmcKQGRlc2NyaXB0aW9uOiBXaGV0aGVyIGNvdW5zZWxsaW5nIHdhcyBwcm92aWRlZCB0byBhIGNsaWVudCB3aG8gaGFzIGJlZW4gZGlhZ25vc2VkIHdpdGggSElWCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJISVYtcG9zaXRpdmUgY291bnNlbGxpbmcgY29uZHVjdGVkIjoKICBleGlzdHMgIkhJVi1wb3NpdGl2ZSBjb3Vuc2VsbGluZyBjb25kdWN0ZWQgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJISVYtcG9zaXRpdmUgY291bnNlbGxpbmcgY29uZHVjdGVkIE9ic2VydmF0aW9uIgpkZWZpbmUgIkhJVi1wb3NpdGl2ZSBjb3Vuc2VsbGluZyBjb25kdWN0ZWQgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iSElWLXBvc2l0aXZlIGNvdW5zZWxsaW5nIGNvbmR1Y3RlZCBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIkhJVi1wb3NpdGl2ZSBjb3Vuc2VsbGluZyBjb25kdWN0ZWQgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJISVYtcG9zaXRpdmUgY291bnNlbGxpbmcgY29uZHVjdGVkIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgSElWLXBvc2l0aXZlIGNvdW5zZWxsaW5nIGNvbmR1Y3RlZCAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuQi5ERTE0NCAtIEhlcGF0aXRpcyBCIHBvc2l0aXZlIGNvdW5zZWxsaW5nIGNvbmR1Y3RlZApAYWN0aXZpdHk6IEhJVi5COCBQcm92aWRlIHBvc3QtdGVzdCBjb3Vuc2VsbGluZwpAZGVzY3JpcHRpb246IFdoZXRoZXIgY291bnNlbGxpbmcgd2FzIHByb3ZpZGVkIHRvIGEgY2xpZW50IHdobyBoYXMgYmVlbiBkaWFnbm9zZWQgd2l0aCBoZXBhdGl0aXMgQgoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiSGVwYXRpdGlzIEIgcG9zaXRpdmUgY291bnNlbGxpbmcgY29uZHVjdGVkIjoKICBleGlzdHMgIkhlcGF0aXRpcyBCIHBvc2l0aXZlIGNvdW5zZWxsaW5nIGNvbmR1Y3RlZCBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIkhlcGF0aXRpcyBCIHBvc2l0aXZlIGNvdW5zZWxsaW5nIGNvbmR1Y3RlZCBPYnNlcnZhdGlvbiIKZGVmaW5lICJIZXBhdGl0aXMgQiBwb3NpdGl2ZSBjb3Vuc2VsbGluZyBjb25kdWN0ZWQgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iSGVwYXRpdGlzIEIgcG9zaXRpdmUgY291bnNlbGxpbmcgY29uZHVjdGVkIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiSGVwYXRpdGlzIEIgcG9zaXRpdmUgY291bnNlbGxpbmcgY29uZHVjdGVkIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iSGVwYXRpdGlzIEIgcG9zaXRpdmUgY291bnNlbGxpbmcgY29uZHVjdGVkIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgSGVwYXRpdGlzIEIgcG9zaXRpdmUgY291bnNlbGxpbmcgY29uZHVjdGVkICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5CLkRFMTQ1IC0gSGVwYXRpdGlzIEMgcG9zaXRpdmUgY291bnNlbGxpbmcgY29uZHVjdGVkCkBhY3Rpdml0eTogSElWLkI4IFByb3ZpZGUgcG9zdC10ZXN0IGNvdW5zZWxsaW5nCkBkZXNjcmlwdGlvbjogV2hldGhlciBjb3Vuc2VsbGluZyB3YXMgcHJvdmlkZWQgdG8gYSBjbGllbnQgd2hvIGhhcyBiZWVuIGRpYWdub3NlZCB3aXRoIGhlcGF0aXRpcyBDCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJIZXBhdGl0aXMgQyBwb3NpdGl2ZSBjb3Vuc2VsbGluZyBjb25kdWN0ZWQiOgogIGV4aXN0cyAiSGVwYXRpdGlzIEMgcG9zaXRpdmUgY291bnNlbGxpbmcgY29uZHVjdGVkIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiSGVwYXRpdGlzIEMgcG9zaXRpdmUgY291bnNlbGxpbmcgY29uZHVjdGVkIE9ic2VydmF0aW9uIgpkZWZpbmUgIkhlcGF0aXRpcyBDIHBvc2l0aXZlIGNvdW5zZWxsaW5nIGNvbmR1Y3RlZCBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJIZXBhdGl0aXMgQyBwb3NpdGl2ZSBjb3Vuc2VsbGluZyBjb25kdWN0ZWQgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJIZXBhdGl0aXMgQyBwb3NpdGl2ZSBjb3Vuc2VsbGluZyBjb25kdWN0ZWQgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJIZXBhdGl0aXMgQyBwb3NpdGl2ZSBjb3Vuc2VsbGluZyBjb25kdWN0ZWQgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBIZXBhdGl0aXMgQyBwb3NpdGl2ZSBjb3Vuc2VsbGluZyBjb25kdWN0ZWQgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkIuREUxNDYgLSBTeXBoaWxpcyBjb3Vuc2VsbGluZywgdHJlYXRtZW50IGFuZCBmdXJ0aGVyIHRlc3RpbmcKQGFjdGl2aXR5OiBISVYuQjggUHJvdmlkZSBwb3N0LXRlc3QgY291bnNlbGxpbmcKQGRlc2NyaXB0aW9uOiBXaGV0aGVyIGNvdW5zZWxsaW5nIGFuZCB0cmVhdG1lbnQgd2FzIHByb3ZpZGVkIHRvIGEgY2xpZW50IHdobyBoYXMgYmVlbiBkaWFnbm9zZWQgd2l0aCBzeXBoaWxpcy4gQWRkaXRpb25hbCB0ZXN0aW5nIChSUFIgdGVzdCkgcmVjb21tZW5kZWQuCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJTeXBoaWxpcyBjb3Vuc2VsbGluZywgdHJlYXRtZW50IGFuZCBmdXJ0aGVyIHRlc3RpbmciOgogIGV4aXN0cyAiU3lwaGlsaXMgY291bnNlbGxpbmcsIHRyZWF0bWVudCBhbmQgZnVydGhlciB0ZXN0aW5nIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiU3lwaGlsaXMgY291bnNlbGxpbmcsIHRyZWF0bWVudCBhbmQgZnVydGhlciB0ZXN0aW5nIE9ic2VydmF0aW9uIgpkZWZpbmUgIlN5cGhpbGlzIGNvdW5zZWxsaW5nLCB0cmVhdG1lbnQgYW5kIGZ1cnRoZXIgdGVzdGluZyBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJTeXBoaWxpcyBjb3Vuc2VsbGluZywgdHJlYXRtZW50IGFuZCBmdXJ0aGVyIHRlc3RpbmcgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJTeXBoaWxpcyBjb3Vuc2VsbGluZywgdHJlYXRtZW50IGFuZCBmdXJ0aGVyIHRlc3RpbmcgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJTeXBoaWxpcyBjb3Vuc2VsbGluZywgdHJlYXRtZW50IGFuZCBmdXJ0aGVyIHRlc3RpbmcgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBTeXBoaWxpcyBjb3Vuc2VsbGluZywgdHJlYXRtZW50IGFuZCBmdXJ0aGVyIHRlc3RpbmcgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkIuREUxNDcgLSBMaW5rZWQgdG8gZW5yb2xtZW50IGluIGNhcmUgYW5kIEFSVCBpbml0aWF0aW9uCkBhY3Rpdml0eTogSElWLkI4IFByb3ZpZGUgcG9zdC10ZXN0IGNvdW5zZWxsaW5nCkBkZXNjcmlwdGlvbjogTGlua2FnZSBtYWRlIGZyb20gSElWIHRlc3RpbmcgdG8gZW5yb2xtZW50IGluIGNhcmUgZm9sbG93aW5nIGFuIEhJViBkaWFnbm9zaXMKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkxpbmtlZCB0byBlbnJvbG1lbnQgaW4gY2FyZSBhbmQgQVJUIGluaXRpYXRpb24iOgogIGV4aXN0cyAiTGlua2VkIHRvIGVucm9sbWVudCBpbiBjYXJlIGFuZCBBUlQgaW5pdGlhdGlvbiBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIkxpbmtlZCB0byBlbnJvbG1lbnQgaW4gY2FyZSBhbmQgQVJUIGluaXRpYXRpb24gT2JzZXJ2YXRpb24iCmRlZmluZSAiTGlua2VkIHRvIGVucm9sbWVudCBpbiBjYXJlIGFuZCBBUlQgaW5pdGlhdGlvbiBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJMaW5rZWQgdG8gZW5yb2xtZW50IGluIGNhcmUgYW5kIEFSVCBpbml0aWF0aW9uIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiTGlua2VkIHRvIGVucm9sbWVudCBpbiBjYXJlIGFuZCBBUlQgaW5pdGlhdGlvbiBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkxpbmtlZCB0byBlbnJvbG1lbnQgaW4gY2FyZSBhbmQgQVJUIGluaXRpYXRpb24gT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBMaW5rZWQgdG8gZW5yb2xtZW50IGluIGNhcmUgYW5kIEFSVCBpbml0aWF0aW9uICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5CLkRFMTQ4IC0gVk1NQyBjb3Vuc2VsbGluZyBwcm92aWRlZApAYWN0aXZpdHk6IEhJVi5COCBQcm92aWRlIHBvc3QtdGVzdCBjb3Vuc2VsbGluZwpAZGVzY3JpcHRpb246IFdoZXRoZXIgY291bnNlbGxpbmcgZm9yIHZvbHVudGFyeSBtZWRpY2FsIG1hbGUgY2lyY3VtY2lzaW9uIChWTU1DKSB3YXMgcHJvdmlkZWQgZm9sbG93aW5nIGFuIEhJVi1uZWdhdGl2ZSB0ZXN0CiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJWTU1DIGNvdW5zZWxsaW5nIHByb3ZpZGVkIjoKICBleGlzdHMgIlZNTUMgY291bnNlbGxpbmcgcHJvdmlkZWQgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJWTU1DIGNvdW5zZWxsaW5nIHByb3ZpZGVkIE9ic2VydmF0aW9uIgpkZWZpbmUgIlZNTUMgY291bnNlbGxpbmcgcHJvdmlkZWQgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iVk1NQyBjb3Vuc2VsbGluZyBwcm92aWRlZCBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIlZNTUMgY291bnNlbGxpbmcgcHJvdmlkZWQgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJWTU1DIGNvdW5zZWxsaW5nIHByb3ZpZGVkIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgVk1NQyBjb3Vuc2VsbGluZyBwcm92aWRlZCAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuQi5ERTE0OSAtIFByZXZlbnRpb24gc2VydmljZXMgb2ZmZXJlZCBhbmQgcmVmZXJyYWxzCkBhY3Rpdml0eTogSElWLkI5IERldGVybWluZSByZWNvbW1lbmRlZCBzZXJ2aWNlcwpAZGVzY3JpcHRpb246IE9mZmVyIG9yIHJlZmVyIHRvIHByZXZlbnRpb24gc2VydmljZXMKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIlByZXZlbnRpb24gc2VydmljZXMgb2ZmZXJlZCBhbmQgcmVmZXJyYWxzIEIuREUxNDkiOgogIGV4aXN0cyAiUHJldmVudGlvbiBzZXJ2aWNlcyBvZmZlcmVkIGFuZCByZWZlcnJhbHMgQi5ERTE0OSBPYnNlcnZhdGlvbiIKZGVmaW5lICJQcmV2ZW50aW9uIHNlcnZpY2VzIG9mZmVyZWQgYW5kIHJlZmVycmFscyBCLkRFMTQ5IE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iUHJldmVudGlvbiBzZXJ2aWNlcyBvZmZlcmVkIGFuZCByZWZlcnJhbHMgQi5ERTE0OSBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIFByZXZlbnRpb24gc2VydmljZXMgb2ZmZXJlZCBhbmQgcmVmZXJyYWxzIEIuREUxNDkgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkIuREUxNTAgLSBPZmZlciBtYWxlIGFuZCBmZW1hbGUgY29uZG9tcyBhbmQgY29uZG9tLWNvbXBhdGlibGUgbHVicmljYW50cwpAYWN0aXZpdHk6IEhJVi5COSBEZXRlcm1pbmUgcmVjb21tZW5kZWQgc2VydmljZXMKQGRlc2NyaXB0aW9uOiBPZmZlciBtYWxlIGFuZCBmZW1hbGUgY29uZG9tcyBhbmQgY29uZG9tLWNvbXBhdGlibGUgbHVicmljYW50cwoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiT2ZmZXIgbWFsZSBhbmQgZmVtYWxlIGNvbmRvbXMgYW5kIGNvbmRvbS1jb21wYXRpYmxlIGx1YnJpY2FudHMgQi5ERTE1MCI6CiAgZXhpc3RzICJPZmZlciBtYWxlIGFuZCBmZW1hbGUgY29uZG9tcyBhbmQgY29uZG9tLWNvbXBhdGlibGUgbHVicmljYW50cyBCLkRFMTUwIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiT2ZmZXIgbWFsZSBhbmQgZmVtYWxlIGNvbmRvbXMgYW5kIGNvbmRvbS1jb21wYXRpYmxlIGx1YnJpY2FudHMgQi5ERTE1MCBPYnNlcnZhdGlvbiIKZGVmaW5lICJPZmZlciBtYWxlIGFuZCBmZW1hbGUgY29uZG9tcyBhbmQgY29uZG9tLWNvbXBhdGlibGUgbHVicmljYW50cyBCLkRFMTUwIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIk9mZmVyIG1hbGUgYW5kIGZlbWFsZSBjb25kb21zIGFuZCBjb25kb20tY29tcGF0aWJsZSBsdWJyaWNhbnRzIEIuREUxNTAgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJPZmZlciBtYWxlIGFuZCBmZW1hbGUgY29uZG9tcyBhbmQgY29uZG9tLWNvbXBhdGlibGUgbHVicmljYW50cyBCLkRFMTUwIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iT2ZmZXIgbWFsZSBhbmQgZmVtYWxlIGNvbmRvbXMgYW5kIGNvbmRvbS1jb21wYXRpYmxlIGx1YnJpY2FudHMgQi5ERTE1MCBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIE9mZmVyIG1hbGUgYW5kIGZlbWFsZSBjb25kb21zIGFuZCBjb25kb20tY29tcGF0aWJsZSBsdWJyaWNhbnRzIEIuREUxNTAgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkIuREUxNTEgLSBPZmZlciBwcmUtZXhwb3N1cmUgcHJvcGh5bGF4aXMgUHJFUCBmb3IgcGVvcGxlIGF0IGVsZXZhdGVkIHJpc2sgZm9yIEhJViBhY3F1aXNpdGlvbgpAYWN0aXZpdHk6IEhJVi5COSBEZXRlcm1pbmUgcmVjb21tZW5kZWQgc2VydmljZXMKQGRlc2NyaXB0aW9uOiBPZmZlciBwcmUtZXhwb3N1cmUgcHJvcGh5bGF4aXMgKFByRVApIHRvIHBlb3BsZSB3aXRoIHN1YnN0YW50aWFsIG9uZ29pbmcgcmlzayBvZiBISVYgaW5mZWN0aW9uCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJPZmZlciBwcmUtZXhwb3N1cmUgcHJvcGh5bGF4aXMgUHJFUCBmb3IgcGVvcGxlIGF0IGVsZXZhdGVkIHJpc2sgZm9yIEhJViBhY3F1aXNpdGlvbiI6CiAgZXhpc3RzICJPZmZlciBwcmUtZXhwb3N1cmUgcHJvcGh5bGF4aXMgUHJFUCBmb3IgcGVvcGxlIGF0IGVsZXZhdGVkIHJpc2sgZm9yIEhJViBhY3F1aXNpdGlvbiBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIk9mZmVyIHByZS1leHBvc3VyZSBwcm9waHlsYXhpcyBQckVQIGZvciBwZW9wbGUgYXQgZWxldmF0ZWQgcmlzayBmb3IgSElWIGFjcXVpc2l0aW9uIE9ic2VydmF0aW9uIgpkZWZpbmUgIk9mZmVyIHByZS1leHBvc3VyZSBwcm9waHlsYXhpcyBQckVQIGZvciBwZW9wbGUgYXQgZWxldmF0ZWQgcmlzayBmb3IgSElWIGFjcXVpc2l0aW9uIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIk9mZmVyIHByZS1leHBvc3VyZSBwcm9waHlsYXhpcyBQckVQIGZvciBwZW9wbGUgYXQgZWxldmF0ZWQgcmlzayBmb3IgSElWIGFjcXVpc2l0aW9uIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiT2ZmZXIgcHJlLWV4cG9zdXJlIHByb3BoeWxheGlzIFByRVAgZm9yIHBlb3BsZSBhdCBlbGV2YXRlZCByaXNrIGZvciBISVYgYWNxdWlzaXRpb24gT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJPZmZlciBwcmUtZXhwb3N1cmUgcHJvcGh5bGF4aXMgUHJFUCBmb3IgcGVvcGxlIGF0IGVsZXZhdGVkIHJpc2sgZm9yIEhJViBhY3F1aXNpdGlvbiBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIE9mZmVyIHByZS1leHBvc3VyZSBwcm9waHlsYXhpcyBQckVQIGZvciBwZW9wbGUgYXQgZWxldmF0ZWQgcmlzayBmb3IgSElWIGFjcXVpc2l0aW9uICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5CLkRFMTUyIC0gT2ZmZXIgcG9zdC1leHBvc3VyZSBwcm9waHlsYXhpcyBQRVAgZm9sbG93aW5nIHN1c3BlY3RlZCBleHBvc3VyZQpAYWN0aXZpdHk6IEhJVi5COSBEZXRlcm1pbmUgcmVjb21tZW5kZWQgc2VydmljZXMKQGRlc2NyaXB0aW9uOiBPZmZlciBvciByZWZlciBjbGllbnQgZm9yIFBFUCBmb2xsb3dpbmcgc3VzcGVjdGVkIGV4cG9zdXJlCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJPZmZlciBwb3N0LWV4cG9zdXJlIHByb3BoeWxheGlzIFBFUCBmb2xsb3dpbmcgc3VzcGVjdGVkIGV4cG9zdXJlIjoKICBleGlzdHMgIk9mZmVyIHBvc3QtZXhwb3N1cmUgcHJvcGh5bGF4aXMgUEVQIGZvbGxvd2luZyBzdXNwZWN0ZWQgZXhwb3N1cmUgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJPZmZlciBwb3N0LWV4cG9zdXJlIHByb3BoeWxheGlzIFBFUCBmb2xsb3dpbmcgc3VzcGVjdGVkIGV4cG9zdXJlIE9ic2VydmF0aW9uIgpkZWZpbmUgIk9mZmVyIHBvc3QtZXhwb3N1cmUgcHJvcGh5bGF4aXMgUEVQIGZvbGxvd2luZyBzdXNwZWN0ZWQgZXhwb3N1cmUgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iT2ZmZXIgcG9zdC1leHBvc3VyZSBwcm9waHlsYXhpcyBQRVAgZm9sbG93aW5nIHN1c3BlY3RlZCBleHBvc3VyZSBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIk9mZmVyIHBvc3QtZXhwb3N1cmUgcHJvcGh5bGF4aXMgUEVQIGZvbGxvd2luZyBzdXNwZWN0ZWQgZXhwb3N1cmUgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJPZmZlciBwb3N0LWV4cG9zdXJlIHByb3BoeWxheGlzIFBFUCBmb2xsb3dpbmcgc3VzcGVjdGVkIGV4cG9zdXJlIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgT2ZmZXIgcG9zdC1leHBvc3VyZSBwcm9waHlsYXhpcyBQRVAgZm9sbG93aW5nIHN1c3BlY3RlZCBleHBvc3VyZSAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuQi5ERTE1MyAtIFZvbHVudGFyeSBtZWRpY2FsIG1hbGUgY2lyY3VtY2lzaW9uIFZNTUMKQGFjdGl2aXR5OiBISVYuQjkgRGV0ZXJtaW5lIHJlY29tbWVuZGVkIHNlcnZpY2VzCkBkZXNjcmlwdGlvbjogT2ZmZXIgcmVmZXJyYWwgZm9yIFZNTUMgc2VydmljZXMKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIlZvbHVudGFyeSBtZWRpY2FsIG1hbGUgY2lyY3VtY2lzaW9uIFZNTUMiOgogIGV4aXN0cyAiVm9sdW50YXJ5IG1lZGljYWwgbWFsZSBjaXJjdW1jaXNpb24gVk1NQyBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIlZvbHVudGFyeSBtZWRpY2FsIG1hbGUgY2lyY3VtY2lzaW9uIFZNTUMgT2JzZXJ2YXRpb24iCmRlZmluZSAiVm9sdW50YXJ5IG1lZGljYWwgbWFsZSBjaXJjdW1jaXNpb24gVk1NQyBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJWb2x1bnRhcnkgbWVkaWNhbCBtYWxlIGNpcmN1bWNpc2lvbiBWTU1DIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiVm9sdW50YXJ5IG1lZGljYWwgbWFsZSBjaXJjdW1jaXNpb24gVk1NQyBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIlZvbHVudGFyeSBtZWRpY2FsIG1hbGUgY2lyY3VtY2lzaW9uIFZNTUMgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBWb2x1bnRhcnkgbWVkaWNhbCBtYWxlIGNpcmN1bWNpc2lvbiBWTU1DICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5CLkRFMTU0IC0gSGFybSByZWR1Y3Rpb24gZm9yIHBlb3BsZSB3aG8gaW5qZWN0IGRydWdzCkBhY3Rpdml0eTogSElWLkI5IERldGVybWluZSByZWNvbW1lbmRlZCBzZXJ2aWNlcwpAZGVzY3JpcHRpb246IE9mZmVyIG9yIHJlZmVyIHRvIGhhcm0gcmVkdWN0aW9uIHNlcnZpY2VzIGZvciBwZW9wbGUgd2hvIGluamVjdCBkcnVncyAobmVlZGxlIGFuZCBzeXJpbmdlIHByb2dyYW1tZXMsIG9waW9pZCBzdWJzdGl0dXRpb24gdGhlcmFweSwgb3RoZXIgZHJ1Zy1kZXBlbmRlbmNlIHRyZWF0bWVudCBhbmQgb3Bpb2lkIG92ZXJkb3NlIHByZXZlbnRpb24gYW5kIG1hbmFnZW1lbnQpCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJIYXJtIHJlZHVjdGlvbiBmb3IgcGVvcGxlIHdobyBpbmplY3QgZHJ1Z3MgQi5ERTE1NCI6CiAgZXhpc3RzICJIYXJtIHJlZHVjdGlvbiBmb3IgcGVvcGxlIHdobyBpbmplY3QgZHJ1Z3MgQi5ERTE1NCBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIkhhcm0gcmVkdWN0aW9uIGZvciBwZW9wbGUgd2hvIGluamVjdCBkcnVncyBCLkRFMTU0IE9ic2VydmF0aW9uIgpkZWZpbmUgIkhhcm0gcmVkdWN0aW9uIGZvciBwZW9wbGUgd2hvIGluamVjdCBkcnVncyBCLkRFMTU0IENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIkhhcm0gcmVkdWN0aW9uIGZvciBwZW9wbGUgd2hvIGluamVjdCBkcnVncyBCLkRFMTU0IENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiSGFybSByZWR1Y3Rpb24gZm9yIHBlb3BsZSB3aG8gaW5qZWN0IGRydWdzIEIuREUxNTQgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJIYXJtIHJlZHVjdGlvbiBmb3IgcGVvcGxlIHdobyBpbmplY3QgZHJ1Z3MgQi5ERTE1NCBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIEhhcm0gcmVkdWN0aW9uIGZvciBwZW9wbGUgd2hvIGluamVjdCBkcnVncyBCLkRFMTU0ICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5CLkRFMTU1IC0gQmVoYXZpb3VyYWwgaW50ZXJ2ZW50aW9ucyB0byBzdXBwb3J0IHJpc2sgcmVkdWN0aW9uLCBwYXJ0aWN1bGFybHkgZm9yIHBlb3BsZSB3aXRoIEhJViBhbmQgbWVtYmVycyBvZiBrZXkgcG9wdWxhdGlvbnMKQGFjdGl2aXR5OiBISVYuQjkgRGV0ZXJtaW5lIHJlY29tbWVuZGVkIHNlcnZpY2VzCkBkZXNjcmlwdGlvbjogT2ZmZXIgb3IgcmVmZXIgdG8gYmVoYXZpb3VyYWwgaW50ZXJ2ZW50aW9ucyB0byBzdXBwb3J0IHJpc2sgcmVkdWN0aW9uLCBwYXJ0aWN1bGFybHkgZm9yIHBlb3BsZSB3aXRoIEhJViBhbmQgbWVtYmVycyBvZiBrZXkgcG9wdWxhdGlvbnMKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkJlaGF2aW91cmFsIGludGVydmVudGlvbnMgdG8gc3VwcG9ydCByaXNrIHJlZHVjdGlvbiwgcGFydGljdWxhcmx5IGZvciBwZW9wbGUgd2l0aCBISVYgYW5kIG1lbWJlcnMgb2Yga2V5IHBvcHVsYXRpb25zIjoKICBleGlzdHMgIkJlaGF2aW91cmFsIGludGVydmVudGlvbnMgdG8gc3VwcG9ydCByaXNrIHJlZHVjdGlvbiwgcGFydGljdWxhcmx5IGZvciBwZW9wbGUgd2l0aCBISVYgYW5kIG1lbWJlcnMgb2Yga2V5IHBvcHVsYXRpb25zIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiQmVoYXZpb3VyYWwgaW50ZXJ2ZW50aW9ucyB0byBzdXBwb3J0IHJpc2sgcmVkdWN0aW9uLCBwYXJ0aWN1bGFybHkgZm9yIHBlb3BsZSB3aXRoIEhJViBhbmQgbWVtYmVycyBvZiBrZXkgcG9wdWxhdGlvbnMgT2JzZXJ2YXRpb24iCmRlZmluZSAiQmVoYXZpb3VyYWwgaW50ZXJ2ZW50aW9ucyB0byBzdXBwb3J0IHJpc2sgcmVkdWN0aW9uLCBwYXJ0aWN1bGFybHkgZm9yIHBlb3BsZSB3aXRoIEhJViBhbmQgbWVtYmVycyBvZiBrZXkgcG9wdWxhdGlvbnMgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iQmVoYXZpb3VyYWwgaW50ZXJ2ZW50aW9ucyB0byBzdXBwb3J0IHJpc2sgcmVkdWN0aW9uLCBwYXJ0aWN1bGFybHkgZm9yIHBlb3BsZSB3aXRoIEhJViBhbmQgbWVtYmVycyBvZiBrZXkgcG9wdWxhdGlvbnMgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJCZWhhdmlvdXJhbCBpbnRlcnZlbnRpb25zIHRvIHN1cHBvcnQgcmlzayByZWR1Y3Rpb24sIHBhcnRpY3VsYXJseSBmb3IgcGVvcGxlIHdpdGggSElWIGFuZCBtZW1iZXJzIG9mIGtleSBwb3B1bGF0aW9ucyBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkJlaGF2aW91cmFsIGludGVydmVudGlvbnMgdG8gc3VwcG9ydCByaXNrIHJlZHVjdGlvbiwgcGFydGljdWxhcmx5IGZvciBwZW9wbGUgd2l0aCBISVYgYW5kIG1lbWJlcnMgb2Yga2V5IHBvcHVsYXRpb25zIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgQmVoYXZpb3VyYWwgaW50ZXJ2ZW50aW9ucyB0byBzdXBwb3J0IHJpc2sgcmVkdWN0aW9uLCBwYXJ0aWN1bGFybHkgZm9yIHBlb3BsZSB3aXRoIEhJViBhbmQgbWVtYmVycyBvZiBrZXkgcG9wdWxhdGlvbnMgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkIuREUxNTYgLSBISVYgdGVzdGluZyBmb3IgcGFydG5lcnMgYW5kIGJpb2xvZ2ljYWwgY2hpbGRyZW4KQGFjdGl2aXR5OiBISVYuQjkgRGV0ZXJtaW5lIHJlY29tbWVuZGVkIHNlcnZpY2VzCkBkZXNjcmlwdGlvbjogT2ZmZXIgdm9sdW50YXJ5IHRlc3RpbmcgZm9yIGFsbCBwYXJ0bmVycyBhbmQgYmlvbG9naWNhbCBjaGlsZHJlbiBvZiBwb3NpdGl2ZSBjYXNlcyAoaW5jbHVkZXMgcGFydG5lciBzZXJ2aWNlcyBhbmQgaW5kZXggY2FzZSB0ZXN0aW5nKSwgYXMgd2VsbGwgYXMgcGFydG5lcnMgYW5kIHNvY2lhbCBjb250YWN0cyBvZiBwZW9wbGUgZnJvbSBrZXkgcG9wdWxhdGlvbnMsIHdoZXJlIGFwcHJvcHJpYXRlCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJISVYgdGVzdGluZyBmb3IgcGFydG5lcnMgYW5kIGJpb2xvZ2ljYWwgY2hpbGRyZW4gQi5ERTE1NiI6CiAgZXhpc3RzICJISVYgdGVzdGluZyBmb3IgcGFydG5lcnMgYW5kIGJpb2xvZ2ljYWwgY2hpbGRyZW4gQi5ERTE1NiBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIkhJViB0ZXN0aW5nIGZvciBwYXJ0bmVycyBhbmQgYmlvbG9naWNhbCBjaGlsZHJlbiBCLkRFMTU2IE9ic2VydmF0aW9uIgpkZWZpbmUgIkhJViB0ZXN0aW5nIGZvciBwYXJ0bmVycyBhbmQgYmlvbG9naWNhbCBjaGlsZHJlbiBCLkRFMTU2IENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIkhJViB0ZXN0aW5nIGZvciBwYXJ0bmVycyBhbmQgYmlvbG9naWNhbCBjaGlsZHJlbiBCLkRFMTU2IENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiSElWIHRlc3RpbmcgZm9yIHBhcnRuZXJzIGFuZCBiaW9sb2dpY2FsIGNoaWxkcmVuIEIuREUxNTYgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJISVYgdGVzdGluZyBmb3IgcGFydG5lcnMgYW5kIGJpb2xvZ2ljYWwgY2hpbGRyZW4gQi5ERTE1NiBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIEhJViB0ZXN0aW5nIGZvciBwYXJ0bmVycyBhbmQgYmlvbG9naWNhbCBjaGlsZHJlbiBCLkRFMTU2ICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5CLkRFMTU3IC0gSElWIHRlc3RpbmcgZm9yIHBhcnRuZXJzIGFuZCBzb2NpYWwgY29udGFjdHMgb2YgcGVvcGxlIGZyb20ga2V5IHBvcHVsYXRpb25zLCB3aGVyZSBhcHByb3ByaWF0ZQpAYWN0aXZpdHk6IEhJVi5COSBEZXRlcm1pbmUgcmVjb21tZW5kZWQgc2VydmljZXMKQGRlc2NyaXB0aW9uOiBPZmZlciB2b2x1bnRhcnkgdGVzdGluZyBmb3IgcGFydG5lcnMgYW5kIHNvY2lhbCBjb250YWN0cyBvZiBwZW9wbGUgZnJvbSBrZXkgcG9wdWxhdGlvbnMsIHdoZXJlIGFwcHJvcHJpYXRlCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJISVYgdGVzdGluZyBmb3IgcGFydG5lcnMgYW5kIHNvY2lhbCBjb250YWN0cyBvZiBwZW9wbGUgZnJvbSBrZXkgcG9wdWxhdGlvbnMsIHdoZXJlIGFwcHJvcHJpYXRlIjoKICBleGlzdHMgIkhJViB0ZXN0aW5nIGZvciBwYXJ0bmVycyBhbmQgc29jaWFsIGNvbnRhY3RzIG9mIHBlb3BsZSBmcm9tIGtleSBwb3B1bGF0aW9ucywgd2hlcmUgYXBwcm9wcmlhdGUgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJISVYgdGVzdGluZyBmb3IgcGFydG5lcnMgYW5kIHNvY2lhbCBjb250YWN0cyBvZiBwZW9wbGUgZnJvbSBrZXkgcG9wdWxhdGlvbnMsIHdoZXJlIGFwcHJvcHJpYXRlIE9ic2VydmF0aW9uIgpkZWZpbmUgIkhJViB0ZXN0aW5nIGZvciBwYXJ0bmVycyBhbmQgc29jaWFsIGNvbnRhY3RzIG9mIHBlb3BsZSBmcm9tIGtleSBwb3B1bGF0aW9ucywgd2hlcmUgYXBwcm9wcmlhdGUgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iSElWIHRlc3RpbmcgZm9yIHBhcnRuZXJzIGFuZCBzb2NpYWwgY29udGFjdHMgb2YgcGVvcGxlIGZyb20ga2V5IHBvcHVsYXRpb25zLCB3aGVyZSBhcHByb3ByaWF0ZSBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIkhJViB0ZXN0aW5nIGZvciBwYXJ0bmVycyBhbmQgc29jaWFsIGNvbnRhY3RzIG9mIHBlb3BsZSBmcm9tIGtleSBwb3B1bGF0aW9ucywgd2hlcmUgYXBwcm9wcmlhdGUgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJISVYgdGVzdGluZyBmb3IgcGFydG5lcnMgYW5kIHNvY2lhbCBjb250YWN0cyBvZiBwZW9wbGUgZnJvbSBrZXkgcG9wdWxhdGlvbnMsIHdoZXJlIGFwcHJvcHJpYXRlIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgSElWIHRlc3RpbmcgZm9yIHBhcnRuZXJzIGFuZCBzb2NpYWwgY29udGFjdHMgb2YgcGVvcGxlIGZyb20ga2V5IHBvcHVsYXRpb25zLCB3aGVyZSBhcHByb3ByaWF0ZSAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuQi5ERTE1OCAtIFNleHVhbCBhbmQgcmVwcm9kdWN0aXZlIGhlYWx0aCBpbnRlZ3JhdGVkIHNlcnZpY2VzCkBhY3Rpdml0eTogSElWLkI5IERldGVybWluZSByZWNvbW1lbmRlZCBzZXJ2aWNlcwpAZGVzY3JpcHRpb246IE9mZmVyIG9yIHJlZmVyIHRvIHNleHVhbCBhbmQgcmVwcm9kdWN0aXZlIGhlYWx0aCBzZXJ2aWNlcwoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiU2V4dWFsIGFuZCByZXByb2R1Y3RpdmUgaGVhbHRoIGludGVncmF0ZWQgc2VydmljZXMgQi5ERTE1OCI6CiAgZXhpc3RzICJTZXh1YWwgYW5kIHJlcHJvZHVjdGl2ZSBoZWFsdGggaW50ZWdyYXRlZCBzZXJ2aWNlcyBCLkRFMTU4IE9ic2VydmF0aW9uIgpkZWZpbmUgIlNleHVhbCBhbmQgcmVwcm9kdWN0aXZlIGhlYWx0aCBpbnRlZ3JhdGVkIHNlcnZpY2VzIEIuREUxNTggT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJTZXh1YWwgYW5kIHJlcHJvZHVjdGl2ZSBoZWFsdGggaW50ZWdyYXRlZCBzZXJ2aWNlcyBCLkRFMTU4IE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgU2V4dWFsIGFuZCByZXByb2R1Y3RpdmUgaGVhbHRoIGludGVncmF0ZWQgc2VydmljZXMgQi5ERTE1OCAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuQi5ERTE1OSAtIENvbnRyYWNlcHRpb24gYW5kIGZhbWlseSBwbGFubmluZwpAYWN0aXZpdHk6IEhJVi5COSBEZXRlcm1pbmUgcmVjb21tZW5kZWQgc2VydmljZXMKQGRlc2NyaXB0aW9uOiBPZmZlciBjb250cmFjZXB0aW9uIGFuZCBmYW1pbHkgcGxhbm5pbmcgc2VydmljZXMKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkNvbnRyYWNlcHRpb24gYW5kIGZhbWlseSBwbGFubmluZyBCLkRFMTU5IjoKICBleGlzdHMgIkNvbnRyYWNlcHRpb24gYW5kIGZhbWlseSBwbGFubmluZyBCLkRFMTU5IENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiQ29udHJhY2VwdGlvbiBhbmQgZmFtaWx5IHBsYW5uaW5nIEIuREUxNTkgT2JzZXJ2YXRpb24iCmRlZmluZSAiQ29udHJhY2VwdGlvbiBhbmQgZmFtaWx5IHBsYW5uaW5nIEIuREUxNTkgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iQ29udHJhY2VwdGlvbiBhbmQgZmFtaWx5IHBsYW5uaW5nIEIuREUxNTkgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJDb250cmFjZXB0aW9uIGFuZCBmYW1pbHkgcGxhbm5pbmcgQi5ERTE1OSBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkNvbnRyYWNlcHRpb24gYW5kIGZhbWlseSBwbGFubmluZyBCLkRFMTU5IE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgQ29udHJhY2VwdGlvbiBhbmQgZmFtaWx5IHBsYW5uaW5nIEIuREUxNTkgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkIuREUxNjAgLSBDaGVjayBwcmVnbmFuY3kgc3RhdHVzCkBhY3Rpdml0eTogSElWLkI5IERldGVybWluZSByZWNvbW1lbmRlZCBzZXJ2aWNlcwpAZGVzY3JpcHRpb246IENoZWNrIHdvbWVuJ3MgcHJlZ25hbmN5IHN0YXR1cwoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiQ2hlY2sgcHJlZ25hbmN5IHN0YXR1cyBCLkRFMTYwIjoKICBleGlzdHMgIkNoZWNrIHByZWduYW5jeSBzdGF0dXMgQi5ERTE2MCBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIkNoZWNrIHByZWduYW5jeSBzdGF0dXMgQi5ERTE2MCBPYnNlcnZhdGlvbiIKZGVmaW5lICJDaGVjayBwcmVnbmFuY3kgc3RhdHVzIEIuREUxNjAgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iQ2hlY2sgcHJlZ25hbmN5IHN0YXR1cyBCLkRFMTYwIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiQ2hlY2sgcHJlZ25hbmN5IHN0YXR1cyBCLkRFMTYwIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iQ2hlY2sgcHJlZ25hbmN5IHN0YXR1cyBCLkRFMTYwIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgQ2hlY2sgcHJlZ25hbmN5IHN0YXR1cyBCLkRFMTYwICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5CLkRFMTYxIC0gUHJldmVudGlvbiBvZiBtb3RoZXItdG8tY2hpbGQgdHJhbnNtaXNzaW9uIGNvdW5zZWxsaW5nCkBhY3Rpdml0eTogSElWLkI5IERldGVybWluZSByZWNvbW1lbmRlZCBzZXJ2aWNlcwpAZGVzY3JpcHRpb246IE9mZmVyIHNlcnZpY2VzIGZvciBwcmV2ZW50aW9uIG9mIG1vdGhlci10by1jaGlsZCB0cmFuc21pc3Npb24gKGNvdW5zZWxsaW5nKQoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiUHJldmVudGlvbiBvZiBtb3RoZXItdG8tY2hpbGQgdHJhbnNtaXNzaW9uIGNvdW5zZWxsaW5nIjoKICBleGlzdHMgIlByZXZlbnRpb24gb2YgbW90aGVyLXRvLWNoaWxkIHRyYW5zbWlzc2lvbiBjb3Vuc2VsbGluZyBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIlByZXZlbnRpb24gb2YgbW90aGVyLXRvLWNoaWxkIHRyYW5zbWlzc2lvbiBjb3Vuc2VsbGluZyBPYnNlcnZhdGlvbiIKZGVmaW5lICJQcmV2ZW50aW9uIG9mIG1vdGhlci10by1jaGlsZCB0cmFuc21pc3Npb24gY291bnNlbGxpbmcgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iUHJldmVudGlvbiBvZiBtb3RoZXItdG8tY2hpbGQgdHJhbnNtaXNzaW9uIGNvdW5zZWxsaW5nIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiUHJldmVudGlvbiBvZiBtb3RoZXItdG8tY2hpbGQgdHJhbnNtaXNzaW9uIGNvdW5zZWxsaW5nIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iUHJldmVudGlvbiBvZiBtb3RoZXItdG8tY2hpbGQgdHJhbnNtaXNzaW9uIGNvdW5zZWxsaW5nIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgUHJldmVudGlvbiBvZiBtb3RoZXItdG8tY2hpbGQgdHJhbnNtaXNzaW9uIGNvdW5zZWxsaW5nICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5CLkRFMTYyIC0gQ2VydmljYWwgY2FuY2VyIHNjcmVlbmluZyBhbmQgdHJlYXRtZW50IGNvdW5zZWxsaW5nCkBhY3Rpdml0eTogSElWLkI5IERldGVybWluZSByZWNvbW1lbmRlZCBzZXJ2aWNlcwpAZGVzY3JpcHRpb246IE9mZmVyIGNlcnZpY2FsIGNhbmNlciBzY3JlZW5pbmcgYW5kIHRyZWF0bWVudCBjb3Vuc2VsbGluZyBhbmQgc2VydmljZXMKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkNlcnZpY2FsIGNhbmNlciBzY3JlZW5pbmcgYW5kIHRyZWF0bWVudCBjb3Vuc2VsbGluZyI6CiAgZXhpc3RzICJDZXJ2aWNhbCBjYW5jZXIgc2NyZWVuaW5nIGFuZCB0cmVhdG1lbnQgY291bnNlbGxpbmcgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJDZXJ2aWNhbCBjYW5jZXIgc2NyZWVuaW5nIGFuZCB0cmVhdG1lbnQgY291bnNlbGxpbmcgT2JzZXJ2YXRpb24iCmRlZmluZSAiQ2VydmljYWwgY2FuY2VyIHNjcmVlbmluZyBhbmQgdHJlYXRtZW50IGNvdW5zZWxsaW5nIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIkNlcnZpY2FsIGNhbmNlciBzY3JlZW5pbmcgYW5kIHRyZWF0bWVudCBjb3Vuc2VsbGluZyBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIkNlcnZpY2FsIGNhbmNlciBzY3JlZW5pbmcgYW5kIHRyZWF0bWVudCBjb3Vuc2VsbGluZyBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkNlcnZpY2FsIGNhbmNlciBzY3JlZW5pbmcgYW5kIHRyZWF0bWVudCBjb3Vuc2VsbGluZyBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIENlcnZpY2FsIGNhbmNlciBzY3JlZW5pbmcgYW5kIHRyZWF0bWVudCBjb3Vuc2VsbGluZyAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuQi5ERTE2MyAtIEFuYWwgY2FuY2VyIHNjcmVlbmluZyBmb3IgbWVuIHdobyBoYXZlIHNleCB3aXRoIG1lbgpAYWN0aXZpdHk6IEhJVi5COSBEZXRlcm1pbmUgcmVjb21tZW5kZWQgc2VydmljZXMKQGRlc2NyaXB0aW9uOiBPZmZlciBzZXJ2aWNlcyBmb3IgYW5hbCBjYW5jZXIgc2NyZWVuaW5nIChmb3IgbWVuIHdobyBoYXZlIHNleCB3aXRoIG1lbikKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkFuYWwgY2FuY2VyIHNjcmVlbmluZyBmb3IgbWVuIHdobyBoYXZlIHNleCB3aXRoIG1lbiBCLkRFMTYzIjoKICBleGlzdHMgIkFuYWwgY2FuY2VyIHNjcmVlbmluZyBmb3IgbWVuIHdobyBoYXZlIHNleCB3aXRoIG1lbiBCLkRFMTYzIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiQW5hbCBjYW5jZXIgc2NyZWVuaW5nIGZvciBtZW4gd2hvIGhhdmUgc2V4IHdpdGggbWVuIEIuREUxNjMgT2JzZXJ2YXRpb24iCmRlZmluZSAiQW5hbCBjYW5jZXIgc2NyZWVuaW5nIGZvciBtZW4gd2hvIGhhdmUgc2V4IHdpdGggbWVuIEIuREUxNjMgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iQW5hbCBjYW5jZXIgc2NyZWVuaW5nIGZvciBtZW4gd2hvIGhhdmUgc2V4IHdpdGggbWVuIEIuREUxNjMgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJBbmFsIGNhbmNlciBzY3JlZW5pbmcgZm9yIG1lbiB3aG8gaGF2ZSBzZXggd2l0aCBtZW4gQi5ERTE2MyBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkFuYWwgY2FuY2VyIHNjcmVlbmluZyBmb3IgbWVuIHdobyBoYXZlIHNleCB3aXRoIG1lbiBCLkRFMTYzIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgQW5hbCBjYW5jZXIgc2NyZWVuaW5nIGZvciBtZW4gd2hvIGhhdmUgc2V4IHdpdGggbWVuIEIuREUxNjMgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkIuREUxNjQgLSBTVEkgdGVzdGluZyBhbmQgdHJlYXRtZW50IHNlcnZpY2VzCkBhY3Rpdml0eTogSElWLkI5IERldGVybWluZSByZWNvbW1lbmRlZCBzZXJ2aWNlcwpAZGVzY3JpcHRpb246IE9mZmVyIHNleHVhbGx5IHRyYW5zbWl0dGVkIGluZmVjdGlvbiAoU1RJKSB0ZXN0aW5nIGFuZCB0cmVhdG1lbnQgc2VydmljZXMKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIlNUSSB0ZXN0aW5nIGFuZCB0cmVhdG1lbnQgc2VydmljZXMiOgogIGV4aXN0cyAiU1RJIHRlc3RpbmcgYW5kIHRyZWF0bWVudCBzZXJ2aWNlcyBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIlNUSSB0ZXN0aW5nIGFuZCB0cmVhdG1lbnQgc2VydmljZXMgT2JzZXJ2YXRpb24iCmRlZmluZSAiU1RJIHRlc3RpbmcgYW5kIHRyZWF0bWVudCBzZXJ2aWNlcyBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJTVEkgdGVzdGluZyBhbmQgdHJlYXRtZW50IHNlcnZpY2VzIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiU1RJIHRlc3RpbmcgYW5kIHRyZWF0bWVudCBzZXJ2aWNlcyBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIlNUSSB0ZXN0aW5nIGFuZCB0cmVhdG1lbnQgc2VydmljZXMgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBTVEkgdGVzdGluZyBhbmQgdHJlYXRtZW50IHNlcnZpY2VzICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5CLkRFMTY1IC0gT2ZmZXIgb3RoZXIgY2xpbmljYWwgc2VydmljZXMKQGFjdGl2aXR5OiBISVYuQjkgRGV0ZXJtaW5lIHJlY29tbWVuZGVkIHNlcnZpY2VzCkBkZXNjcmlwdGlvbjogT3RoZXIgY2xpbmljYWwgc2VydmljZXMgb2ZmZXJlZCBvciByZWZlcnJhbHMgZ2l2ZW4gdG8gdGhlIGNsaWVudAoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiT2ZmZXIgb3RoZXIgY2xpbmljYWwgc2VydmljZXMgQi5ERTE2NSI6CiAgZXhpc3RzICJPZmZlciBvdGhlciBjbGluaWNhbCBzZXJ2aWNlcyBCLkRFMTY1IE9ic2VydmF0aW9uIgpkZWZpbmUgIk9mZmVyIG90aGVyIGNsaW5pY2FsIHNlcnZpY2VzIEIuREUxNjUgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJPZmZlciBvdGhlciBjbGluaWNhbCBzZXJ2aWNlcyBCLkRFMTY1IE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgT2ZmZXIgb3RoZXIgY2xpbmljYWwgc2VydmljZXMgQi5ERTE2NSAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuQi5ERTE2NiAtIEFzc2Vzc21lbnQgYW5kIHByb3Zpc2lvbiBvZiB2YWNjaW5hdGlvbnMKQGFjdGl2aXR5OiBISVYuQjkgRGV0ZXJtaW5lIHJlY29tbWVuZGVkIHNlcnZpY2VzCkBkZXNjcmlwdGlvbjogQXNzZXNzbWVudCBhbmQgcHJvdmlzaW9uIG9mIHZhY2NpbmF0aW9ucywgc3VjaCBhcyBmb3IgcGVvcGxlIGZyb20ga2V5IHBvcHVsYXRpb25zLCBwcmVnbmFudCB3b21lbiBhbmQgaW5mYW50czsgYW5kLCB3aGVyZSBhcHByb3ByaWF0ZSwgdGV0YW51cyB2YWNjaW5hdGlvbiBmb3IgYWRvbGVzY2VudCBib3lzIGFuZCBtZW4gcmVjZWl2aW5nIFZNTUMKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkFzc2Vzc21lbnQgYW5kIHByb3Zpc2lvbiBvZiB2YWNjaW5hdGlvbnMgQi5ERTE2NiI6CiAgZXhpc3RzICJBc3Nlc3NtZW50IGFuZCBwcm92aXNpb24gb2YgdmFjY2luYXRpb25zIEIuREUxNjYgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJBc3Nlc3NtZW50IGFuZCBwcm92aXNpb24gb2YgdmFjY2luYXRpb25zIEIuREUxNjYgT2JzZXJ2YXRpb24iCmRlZmluZSAiQXNzZXNzbWVudCBhbmQgcHJvdmlzaW9uIG9mIHZhY2NpbmF0aW9ucyBCLkRFMTY2IENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIkFzc2Vzc21lbnQgYW5kIHByb3Zpc2lvbiBvZiB2YWNjaW5hdGlvbnMgQi5ERTE2NiBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIkFzc2Vzc21lbnQgYW5kIHByb3Zpc2lvbiBvZiB2YWNjaW5hdGlvbnMgQi5ERTE2NiBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkFzc2Vzc21lbnQgYW5kIHByb3Zpc2lvbiBvZiB2YWNjaW5hdGlvbnMgQi5ERTE2NiBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIEFzc2Vzc21lbnQgYW5kIHByb3Zpc2lvbiBvZiB2YWNjaW5hdGlvbnMgQi5ERTE2NiAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuQi5ERTE2NyAtIEhlcGF0aXRpcyBCIEhCViBhbmQgaGVwYXRpdGlzIEMgdmlydXMgSENWIHRlc3RpbmcgYW5kIHRyZWF0bWVudCBwcm92aWRlZApAYWN0aXZpdHk6IEhJVi5COSBEZXRlcm1pbmUgcmVjb21tZW5kZWQgc2VydmljZXMKQGRlc2NyaXB0aW9uOiBPZmZlciBvciByZWZlciBmb3IgSEJWIGFuZC9vciBIQ1YgdGVzdGluZyBhbmQgdHJlYXRtZW50CiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJIZXBhdGl0aXMgQiBIQlYgYW5kIGhlcGF0aXRpcyBDIHZpcnVzIEhDViB0ZXN0aW5nIGFuZCB0cmVhdG1lbnQgcHJvdmlkZWQiOgogIGV4aXN0cyAiSGVwYXRpdGlzIEIgSEJWIGFuZCBoZXBhdGl0aXMgQyB2aXJ1cyBIQ1YgdGVzdGluZyBhbmQgdHJlYXRtZW50IHByb3ZpZGVkIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiSGVwYXRpdGlzIEIgSEJWIGFuZCBoZXBhdGl0aXMgQyB2aXJ1cyBIQ1YgdGVzdGluZyBhbmQgdHJlYXRtZW50IHByb3ZpZGVkIE9ic2VydmF0aW9uIgpkZWZpbmUgIkhlcGF0aXRpcyBCIEhCViBhbmQgaGVwYXRpdGlzIEMgdmlydXMgSENWIHRlc3RpbmcgYW5kIHRyZWF0bWVudCBwcm92aWRlZCBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJIZXBhdGl0aXMgQiBIQlYgYW5kIGhlcGF0aXRpcyBDIHZpcnVzIEhDViB0ZXN0aW5nIGFuZCB0cmVhdG1lbnQgcHJvdmlkZWQgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJIZXBhdGl0aXMgQiBIQlYgYW5kIGhlcGF0aXRpcyBDIHZpcnVzIEhDViB0ZXN0aW5nIGFuZCB0cmVhdG1lbnQgcHJvdmlkZWQgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJIZXBhdGl0aXMgQiBIQlYgYW5kIGhlcGF0aXRpcyBDIHZpcnVzIEhDViB0ZXN0aW5nIGFuZCB0cmVhdG1lbnQgcHJvdmlkZWQgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBIZXBhdGl0aXMgQiBIQlYgYW5kIGhlcGF0aXRpcyBDIHZpcnVzIEhDViB0ZXN0aW5nIGFuZCB0cmVhdG1lbnQgcHJvdmlkZWQgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkIuREUxNjggLSBDby10cmltb3hhem9sZSBjaGVtb3Byb3BoeWxheGlzIHRvIHByZXZlbnQgUG5ldW1vY3lzdGlzIGNhcmluaWkgcG5ldW1vbmlhIHByb3ZpZGVkCkBhY3Rpdml0eTogSElWLkI5IERldGVybWluZSByZWNvbW1lbmRlZCBzZXJ2aWNlcwpAZGVzY3JpcHRpb246IE9mZmVyIG9yIHJlZmVyIGZvciBjby10cmltb3hhem9sZSBjaGVtb3Byb3BoeWxheGlzIHRvIHByZXZlbnQgcG5ldW1vY3lzdGlzIGNhcmluaWkgcG5ldW1vbmlhCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJDby10cmltb3hhem9sZSBjaGVtb3Byb3BoeWxheGlzIHRvIHByZXZlbnQgUG5ldW1vY3lzdGlzIGNhcmluaWkgcG5ldW1vbmlhIHByb3ZpZGVkIjoKICBleGlzdHMgIkNvLXRyaW1veGF6b2xlIGNoZW1vcHJvcGh5bGF4aXMgdG8gcHJldmVudCBQbmV1bW9jeXN0aXMgY2FyaW5paSBwbmV1bW9uaWEgcHJvdmlkZWQgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJDby10cmltb3hhem9sZSBjaGVtb3Byb3BoeWxheGlzIHRvIHByZXZlbnQgUG5ldW1vY3lzdGlzIGNhcmluaWkgcG5ldW1vbmlhIHByb3ZpZGVkIE9ic2VydmF0aW9uIgpkZWZpbmUgIkNvLXRyaW1veGF6b2xlIGNoZW1vcHJvcGh5bGF4aXMgdG8gcHJldmVudCBQbmV1bW9jeXN0aXMgY2FyaW5paSBwbmV1bW9uaWEgcHJvdmlkZWQgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iQ28tdHJpbW94YXpvbGUgY2hlbW9wcm9waHlsYXhpcyB0byBwcmV2ZW50IFBuZXVtb2N5c3RpcyBjYXJpbmlpIHBuZXVtb25pYSBwcm92aWRlZCBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIkNvLXRyaW1veGF6b2xlIGNoZW1vcHJvcGh5bGF4aXMgdG8gcHJldmVudCBQbmV1bW9jeXN0aXMgY2FyaW5paSBwbmV1bW9uaWEgcHJvdmlkZWQgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJDby10cmltb3hhem9sZSBjaGVtb3Byb3BoeWxheGlzIHRvIHByZXZlbnQgUG5ldW1vY3lzdGlzIGNhcmluaWkgcG5ldW1vbmlhIHByb3ZpZGVkIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgQ28tdHJpbW94YXpvbGUgY2hlbW9wcm9waHlsYXhpcyB0byBwcmV2ZW50IFBuZXVtb2N5c3RpcyBjYXJpbmlpIHBuZXVtb25pYSBwcm92aWRlZCAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuQi5ERTE2OSAtIEludGVuc2lmaWVkIFRCIGNhc2UgZmluZGluZyBhbmQgbGlua2FnZSB0byBUQiB0cmVhdG1lbnQgcHJvdmlkZWQKQGFjdGl2aXR5OiBISVYuQjkgRGV0ZXJtaW5lIHJlY29tbWVuZGVkIHNlcnZpY2VzCkBkZXNjcmlwdGlvbjogT2ZmZXIgb3IgcmVmZXIgZm9yIGludGVuc2lmaWVkIFRCIGNhc2UgZmluZGluZyBhbmQgbGlua2FnZSB0byBUQiB0cmVhdG1lbnQKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkludGVuc2lmaWVkIFRCIGNhc2UgZmluZGluZyBhbmQgbGlua2FnZSB0byBUQiB0cmVhdG1lbnQgcHJvdmlkZWQiOgogIGV4aXN0cyAiSW50ZW5zaWZpZWQgVEIgY2FzZSBmaW5kaW5nIGFuZCBsaW5rYWdlIHRvIFRCIHRyZWF0bWVudCBwcm92aWRlZCBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIkludGVuc2lmaWVkIFRCIGNhc2UgZmluZGluZyBhbmQgbGlua2FnZSB0byBUQiB0cmVhdG1lbnQgcHJvdmlkZWQgT2JzZXJ2YXRpb24iCmRlZmluZSAiSW50ZW5zaWZpZWQgVEIgY2FzZSBmaW5kaW5nIGFuZCBsaW5rYWdlIHRvIFRCIHRyZWF0bWVudCBwcm92aWRlZCBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJJbnRlbnNpZmllZCBUQiBjYXNlIGZpbmRpbmcgYW5kIGxpbmthZ2UgdG8gVEIgdHJlYXRtZW50IHByb3ZpZGVkIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiSW50ZW5zaWZpZWQgVEIgY2FzZSBmaW5kaW5nIGFuZCBsaW5rYWdlIHRvIFRCIHRyZWF0bWVudCBwcm92aWRlZCBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkludGVuc2lmaWVkIFRCIGNhc2UgZmluZGluZyBhbmQgbGlua2FnZSB0byBUQiB0cmVhdG1lbnQgcHJvdmlkZWQgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBJbnRlbnNpZmllZCBUQiBjYXNlIGZpbmRpbmcgYW5kIGxpbmthZ2UgdG8gVEIgdHJlYXRtZW50IHByb3ZpZGVkICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5CLkRFMTcwIC0gUHJvdmlzaW9uIG9mIGlzb25pYXppZCBwcmV2ZW50aXZlIHRoZXJhcHkgaWYgcGVyc29uIGRvZXMgbm90IGhhdmUgVEIKQGFjdGl2aXR5OiBISVYuQjkgRGV0ZXJtaW5lIHJlY29tbWVuZGVkIHNlcnZpY2VzCkBkZXNjcmlwdGlvbjogT2ZmZXIgb3IgcmVmZXIgZm9yIHByb3Zpc2lvbiBvZiBpc29uaWF6aWQgcHJldmVudGl2ZSB0aGVyYXB5IGlmIHBlcnNvbiBkb2VzIG5vdCBoYXZlIFRCCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJQcm92aXNpb24gb2YgaXNvbmlhemlkIHByZXZlbnRpdmUgdGhlcmFweSBpZiBwZXJzb24gZG9lcyBub3QgaGF2ZSBUQiBCLkRFMTcwIjoKICBleGlzdHMgIlByb3Zpc2lvbiBvZiBpc29uaWF6aWQgcHJldmVudGl2ZSB0aGVyYXB5IGlmIHBlcnNvbiBkb2VzIG5vdCBoYXZlIFRCIEIuREUxNzAgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJQcm92aXNpb24gb2YgaXNvbmlhemlkIHByZXZlbnRpdmUgdGhlcmFweSBpZiBwZXJzb24gZG9lcyBub3QgaGF2ZSBUQiBCLkRFMTcwIE9ic2VydmF0aW9uIgpkZWZpbmUgIlByb3Zpc2lvbiBvZiBpc29uaWF6aWQgcHJldmVudGl2ZSB0aGVyYXB5IGlmIHBlcnNvbiBkb2VzIG5vdCBoYXZlIFRCIEIuREUxNzAgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iUHJvdmlzaW9uIG9mIGlzb25pYXppZCBwcmV2ZW50aXZlIHRoZXJhcHkgaWYgcGVyc29uIGRvZXMgbm90IGhhdmUgVEIgQi5ERTE3MCBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIlByb3Zpc2lvbiBvZiBpc29uaWF6aWQgcHJldmVudGl2ZSB0aGVyYXB5IGlmIHBlcnNvbiBkb2VzIG5vdCBoYXZlIFRCIEIuREUxNzAgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJQcm92aXNpb24gb2YgaXNvbmlhemlkIHByZXZlbnRpdmUgdGhlcmFweSBpZiBwZXJzb24gZG9lcyBub3QgaGF2ZSBUQiBCLkRFMTcwIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgUHJvdmlzaW9uIG9mIGlzb25pYXppZCBwcmV2ZW50aXZlIHRoZXJhcHkgaWYgcGVyc29uIGRvZXMgbm90IGhhdmUgVEIgQi5ERTE3MCAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuQi5ERTE3MSAtIE1hbGFyaWEgcHJldmVudGlvbiBzdWNoIGFzIGJlZCBuZXRzIGFuZCBwcm9waHlsYXhpcywgZGVwZW5kaW5nIG9uIGVwaWRlbWlvbG9neQpAYWN0aXZpdHk6IEhJVi5COSBEZXRlcm1pbmUgcmVjb21tZW5kZWQgc2VydmljZXMKQGRlc2NyaXB0aW9uOiBPZmZlciBvciByZWZlciBmb3IgbWFsYXJpYSBwcmV2ZW50aW9uIChzdWNoIGFzIGJlZCBuZXRzIGFuZCBwcm9waHlsYXhpcyksIGRlcGVuZGluZyBvbiBlcGlkZW1pb2xvZ3kKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIk1hbGFyaWEgcHJldmVudGlvbiBzdWNoIGFzIGJlZCBuZXRzIGFuZCBwcm9waHlsYXhpcywgZGVwZW5kaW5nIG9uIGVwaWRlbWlvbG9neSBCLkRFMTcxIjoKICBleGlzdHMgIk1hbGFyaWEgcHJldmVudGlvbiBzdWNoIGFzIGJlZCBuZXRzIGFuZCBwcm9waHlsYXhpcywgZGVwZW5kaW5nIG9uIGVwaWRlbWlvbG9neSBCLkRFMTcxIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiTWFsYXJpYSBwcmV2ZW50aW9uIHN1Y2ggYXMgYmVkIG5ldHMgYW5kIHByb3BoeWxheGlzLCBkZXBlbmRpbmcgb24gZXBpZGVtaW9sb2d5IEIuREUxNzEgT2JzZXJ2YXRpb24iCmRlZmluZSAiTWFsYXJpYSBwcmV2ZW50aW9uIHN1Y2ggYXMgYmVkIG5ldHMgYW5kIHByb3BoeWxheGlzLCBkZXBlbmRpbmcgb24gZXBpZGVtaW9sb2d5IEIuREUxNzEgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iTWFsYXJpYSBwcmV2ZW50aW9uIHN1Y2ggYXMgYmVkIG5ldHMgYW5kIHByb3BoeWxheGlzLCBkZXBlbmRpbmcgb24gZXBpZGVtaW9sb2d5IEIuREUxNzEgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJNYWxhcmlhIHByZXZlbnRpb24gc3VjaCBhcyBiZWQgbmV0cyBhbmQgcHJvcGh5bGF4aXMsIGRlcGVuZGluZyBvbiBlcGlkZW1pb2xvZ3kgQi5ERTE3MSBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIk1hbGFyaWEgcHJldmVudGlvbiBzdWNoIGFzIGJlZCBuZXRzIGFuZCBwcm9waHlsYXhpcywgZGVwZW5kaW5nIG9uIGVwaWRlbWlvbG9neSBCLkRFMTcxIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgTWFsYXJpYSBwcmV2ZW50aW9uIHN1Y2ggYXMgYmVkIG5ldHMgYW5kIHByb3BoeWxheGlzLCBkZXBlbmRpbmcgb24gZXBpZGVtaW9sb2d5IEIuREUxNzEgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkIuREUxNzIgLSBPdGhlciBzdXBwb3J0IHNlcnZpY2VzCkBhY3Rpdml0eTogSElWLkI5IERldGVybWluZSByZWNvbW1lbmRlZCBzZXJ2aWNlcwpAZGVzY3JpcHRpb246IE9mZmVyIG9yIHJlZmVyIGZvciBvdGhlciBzdXBwb3J0IHNlcnZpY2VzCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJPdGhlciBzdXBwb3J0IHNlcnZpY2VzIEIuREUxNzIiOgogIGV4aXN0cyAiT3RoZXIgc3VwcG9ydCBzZXJ2aWNlcyBCLkRFMTcyIE9ic2VydmF0aW9uIgpkZWZpbmUgIk90aGVyIHN1cHBvcnQgc2VydmljZXMgQi5ERTE3MiBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIk90aGVyIHN1cHBvcnQgc2VydmljZXMgQi5ERTE3MiBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIE90aGVyIHN1cHBvcnQgc2VydmljZXMgQi5ERTE3MiAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuQi5ERTE3MyAtIE1lbnRhbCBoZWFsdGggc2VydmljZXMKQGFjdGl2aXR5OiBISVYuQjkgRGV0ZXJtaW5lIHJlY29tbWVuZGVkIHNlcnZpY2VzCkBkZXNjcmlwdGlvbjogT2ZmZXIgb3IgcmVmZXIgZm9yIG1lbnRhbCBoZWFsdGggc2VydmljZXMKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIk1lbnRhbCBoZWFsdGggc2VydmljZXMgQi5ERTE3MyI6CiAgZXhpc3RzICJNZW50YWwgaGVhbHRoIHNlcnZpY2VzIEIuREUxNzMgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJNZW50YWwgaGVhbHRoIHNlcnZpY2VzIEIuREUxNzMgT2JzZXJ2YXRpb24iCmRlZmluZSAiTWVudGFsIGhlYWx0aCBzZXJ2aWNlcyBCLkRFMTczIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIk1lbnRhbCBoZWFsdGggc2VydmljZXMgQi5ERTE3MyBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIk1lbnRhbCBoZWFsdGggc2VydmljZXMgQi5ERTE3MyBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIk1lbnRhbCBoZWFsdGggc2VydmljZXMgQi5ERTE3MyBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIE1lbnRhbCBoZWFsdGggc2VydmljZXMgQi5ERTE3MyAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuQi5ERTE3NCAtIFBzeWNob3NvY2lhbCBjb3Vuc2VsbGluZywgc3VwcG9ydCBhbmQgdHJlYXRtZW50IGFkaGVyZW5jZSBjb3Vuc2VsbGluZwpAYWN0aXZpdHk6IEhJVi5COSBEZXRlcm1pbmUgcmVjb21tZW5kZWQgc2VydmljZXMKQGRlc2NyaXB0aW9uOiBPZmZlciBvciByZWZlciBmb3IgcHN5Y2hvc29jaWFsIGNvdW5zZWxsaW5nLCBzdXBwb3J0IGFuZCB0cmVhdG1lbnQgYWRoZXJlbmNlIGNvdW5zZWxsaW5nCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJQc3ljaG9zb2NpYWwgY291bnNlbGxpbmcsIHN1cHBvcnQgYW5kIHRyZWF0bWVudCBhZGhlcmVuY2UgY291bnNlbGxpbmcgQi5ERTE3NCI6CiAgZXhpc3RzICJQc3ljaG9zb2NpYWwgY291bnNlbGxpbmcsIHN1cHBvcnQgYW5kIHRyZWF0bWVudCBhZGhlcmVuY2UgY291bnNlbGxpbmcgQi5ERTE3NCBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIlBzeWNob3NvY2lhbCBjb3Vuc2VsbGluZywgc3VwcG9ydCBhbmQgdHJlYXRtZW50IGFkaGVyZW5jZSBjb3Vuc2VsbGluZyBCLkRFMTc0IE9ic2VydmF0aW9uIgpkZWZpbmUgIlBzeWNob3NvY2lhbCBjb3Vuc2VsbGluZywgc3VwcG9ydCBhbmQgdHJlYXRtZW50IGFkaGVyZW5jZSBjb3Vuc2VsbGluZyBCLkRFMTc0IENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIlBzeWNob3NvY2lhbCBjb3Vuc2VsbGluZywgc3VwcG9ydCBhbmQgdHJlYXRtZW50IGFkaGVyZW5jZSBjb3Vuc2VsbGluZyBCLkRFMTc0IENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiUHN5Y2hvc29jaWFsIGNvdW5zZWxsaW5nLCBzdXBwb3J0IGFuZCB0cmVhdG1lbnQgYWRoZXJlbmNlIGNvdW5zZWxsaW5nIEIuREUxNzQgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJQc3ljaG9zb2NpYWwgY291bnNlbGxpbmcsIHN1cHBvcnQgYW5kIHRyZWF0bWVudCBhZGhlcmVuY2UgY291bnNlbGxpbmcgQi5ERTE3NCBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIFBzeWNob3NvY2lhbCBjb3Vuc2VsbGluZywgc3VwcG9ydCBhbmQgdHJlYXRtZW50IGFkaGVyZW5jZSBjb3Vuc2VsbGluZyBCLkRFMTc0ICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5CLkRFMTc1IC0gU3VwcG9ydCBmb3IgZGlzY2xvc3VyZSBhbmQgcGFydG5lciBzZXJ2aWNlcwpAYWN0aXZpdHk6IEhJVi5COSBEZXRlcm1pbmUgcmVjb21tZW5kZWQgc2VydmljZXMKQGRlc2NyaXB0aW9uOiBPZmZlciBvciByZWZlciBmb3Igc3VwcG9ydCBmb3IgZGlzY2xvc3VyZSBhbmQgcGFydG5lciBzZXJ2aWNlcwoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiU3VwcG9ydCBmb3IgZGlzY2xvc3VyZSBhbmQgcGFydG5lciBzZXJ2aWNlcyBCLkRFMTc1IjoKICBleGlzdHMgIlN1cHBvcnQgZm9yIGRpc2Nsb3N1cmUgYW5kIHBhcnRuZXIgc2VydmljZXMgQi5ERTE3NSBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIlN1cHBvcnQgZm9yIGRpc2Nsb3N1cmUgYW5kIHBhcnRuZXIgc2VydmljZXMgQi5ERTE3NSBPYnNlcnZhdGlvbiIKZGVmaW5lICJTdXBwb3J0IGZvciBkaXNjbG9zdXJlIGFuZCBwYXJ0bmVyIHNlcnZpY2VzIEIuREUxNzUgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iU3VwcG9ydCBmb3IgZGlzY2xvc3VyZSBhbmQgcGFydG5lciBzZXJ2aWNlcyBCLkRFMTc1IENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiU3VwcG9ydCBmb3IgZGlzY2xvc3VyZSBhbmQgcGFydG5lciBzZXJ2aWNlcyBCLkRFMTc1IE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iU3VwcG9ydCBmb3IgZGlzY2xvc3VyZSBhbmQgcGFydG5lciBzZXJ2aWNlcyBCLkRFMTc1IE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgU3VwcG9ydCBmb3IgZGlzY2xvc3VyZSBhbmQgcGFydG5lciBzZXJ2aWNlcyBCLkRFMTc1ICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5CLkRFMTc2IC0gTGVnYWwgYW5kIHNvY2lhbCBzZXJ2aWNlcwpAYWN0aXZpdHk6IEhJVi5COSBEZXRlcm1pbmUgcmVjb21tZW5kZWQgc2VydmljZXMKQGRlc2NyaXB0aW9uOiBPZmZlciBvciByZWZlciBmb3IgbGVnYWwgYW5kIHNvY2lhbCBzZXJ2aWNlcwoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiTGVnYWwgYW5kIHNvY2lhbCBzZXJ2aWNlcyBCLkRFMTc2IjoKICBleGlzdHMgIkxlZ2FsIGFuZCBzb2NpYWwgc2VydmljZXMgQi5ERTE3NiBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIkxlZ2FsIGFuZCBzb2NpYWwgc2VydmljZXMgQi5ERTE3NiBPYnNlcnZhdGlvbiIKZGVmaW5lICJMZWdhbCBhbmQgc29jaWFsIHNlcnZpY2VzIEIuREUxNzYgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iTGVnYWwgYW5kIHNvY2lhbCBzZXJ2aWNlcyBCLkRFMTc2IENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiTGVnYWwgYW5kIHNvY2lhbCBzZXJ2aWNlcyBCLkRFMTc2IE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iTGVnYWwgYW5kIHNvY2lhbCBzZXJ2aWNlcyBCLkRFMTc2IE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgTGVnYWwgYW5kIHNvY2lhbCBzZXJ2aWNlcyBCLkRFMTc2ICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5CLkRFMTc3IC0gU2VydmljZXMgZm9yIHJlc3BvbmRpbmcgdG8gdmlvbGVuY2UgYWdhaW5zdCB3b21lbgpAYWN0aXZpdHk6IEhJVi5COSBEZXRlcm1pbmUgcmVjb21tZW5kZWQgc2VydmljZXMKQGRlc2NyaXB0aW9uOiBPZmZlciBvciByZWZlciBmb3Igc2VydmljZXMgZm9yIHJlc3BvbmRpbmcgdG8gdmlvbGVuY2UgYWdhaW5zdCB3b21lbiwgaW5jbHVkaW5nIGZpcnN0LWxpbmUgc3VwcG9ydCBhbmQgcHN5Y2hvc29jaWFsIHN1cHBvcnQsIHBvc3QtcmFwZSBjYXJlIGFuZCBvdGhlciBzdXBwb3J0IHNlcnZpY2VzIGluY2x1ZGluZyBzaGVsdGVycywgbGVnYWwgc2VydmljZXMgYW5kIHdvbWVuIGFuZCBjaGlsZCBwcm90ZWN0aW9uIHNlcnZpY2VzCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJTZXJ2aWNlcyBmb3IgcmVzcG9uZGluZyB0byB2aW9sZW5jZSBhZ2FpbnN0IHdvbWVuIEIuREUxNzciOgogIGV4aXN0cyAiU2VydmljZXMgZm9yIHJlc3BvbmRpbmcgdG8gdmlvbGVuY2UgYWdhaW5zdCB3b21lbiBCLkRFMTc3IENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiU2VydmljZXMgZm9yIHJlc3BvbmRpbmcgdG8gdmlvbGVuY2UgYWdhaW5zdCB3b21lbiBCLkRFMTc3IE9ic2VydmF0aW9uIgpkZWZpbmUgIlNlcnZpY2VzIGZvciByZXNwb25kaW5nIHRvIHZpb2xlbmNlIGFnYWluc3Qgd29tZW4gQi5ERTE3NyBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJTZXJ2aWNlcyBmb3IgcmVzcG9uZGluZyB0byB2aW9sZW5jZSBhZ2FpbnN0IHdvbWVuIEIuREUxNzcgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJTZXJ2aWNlcyBmb3IgcmVzcG9uZGluZyB0byB2aW9sZW5jZSBhZ2FpbnN0IHdvbWVuIEIuREUxNzcgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJTZXJ2aWNlcyBmb3IgcmVzcG9uZGluZyB0byB2aW9sZW5jZSBhZ2FpbnN0IHdvbWVuIEIuREUxNzcgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBTZXJ2aWNlcyBmb3IgcmVzcG9uZGluZyB0byB2aW9sZW5jZSBhZ2FpbnN0IHdvbWVuIEIuREUxNzcgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkIuREUxOTEgLSBUeXBlIG9mIGZvbGxvdy11cCBhcHBvaW50bWVudApAYWN0aXZpdHk6IEhJVi5CMjAgU2NoZWR1bGUgcmV0ZXN0CkBkZXNjcmlwdGlvbjogVHlwZSBvZiBmb2xsb3ctdXAgYXBwb2ludG1lbnQgZm9yIHRlc3Rpbmcgc2VydmljZXMKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIlR5cGUgb2YgZm9sbG93LXVwIGFwcG9pbnRtZW50IEIuREUxOTEiOgogIGV4aXN0cyAiVHlwZSBvZiBmb2xsb3ctdXAgYXBwb2ludG1lbnQgQi5ERTE5MSBPYnNlcnZhdGlvbiIKZGVmaW5lICJUeXBlIG9mIGZvbGxvdy11cCBhcHBvaW50bWVudCBCLkRFMTkxIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iVHlwZSBvZiBmb2xsb3ctdXAgYXBwb2ludG1lbnQgQi5ERTE5MSBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIFR5cGUgb2YgZm9sbG93LXVwIGFwcG9pbnRtZW50IEIuREUxOTEgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkIuREUxOTIgLSBSZXRlc3RpbmcgZm9yIEhJVgpAYWN0aXZpdHk6IEhJVi5CMjAgU2NoZWR1bGUgcmV0ZXN0CkBkZXNjcmlwdGlvbjogUmV0ZXN0aW5nIGZvbGxvdy11cCBhcHBvaW50bWVudAoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiUmV0ZXN0aW5nIGZvciBISVYgQi5ERTE5MiI6CiAgZXhpc3RzICJSZXRlc3RpbmcgZm9yIEhJViBCLkRFMTkyIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiUmV0ZXN0aW5nIGZvciBISVYgQi5ERTE5MiBPYnNlcnZhdGlvbiIKZGVmaW5lICJSZXRlc3RpbmcgZm9yIEhJViBCLkRFMTkyIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIlJldGVzdGluZyBmb3IgSElWIEIuREUxOTIgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJSZXRlc3RpbmcgZm9yIEhJViBCLkRFMTkyIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iUmV0ZXN0aW5nIGZvciBISVYgQi5ERTE5MiBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIFJldGVzdGluZyBmb3IgSElWIEIuREUxOTIgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkIuREUxOTMgLSBPdGhlcgpAYWN0aXZpdHk6IEhJVi5CMjAgU2NoZWR1bGUgcmV0ZXN0CkBkZXNjcmlwdGlvbjogT3RoZXIgcmVhc29uIGZvciB0aGUgZm9sbG93LXVwIGFwcG9pbnRtZW50CiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJPdGhlciBCLkRFMTkzIjoKICBleGlzdHMgIk90aGVyIEIuREUxOTMgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJPdGhlciBCLkRFMTkzIE9ic2VydmF0aW9uIgpkZWZpbmUgIk90aGVyIEIuREUxOTMgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iT3RoZXIgQi5ERTE5MyBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIk90aGVyIEIuREUxOTMgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJPdGhlciBCLkRFMTkzIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgT3RoZXIgQi5ERTE5MyAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuQi5ERTE5NSAtIERhdGUvdGltZSBvZiBmb2xsb3ctdXAgYXBwb2ludG1lbnQKQGFjdGl2aXR5OiBISVYuQjIwIFNjaGVkdWxlIHJldGVzdApAZGVzY3JpcHRpb246IERhdGUgdGhlIHBhdGllbnQgaXMgdG8gcmV0dXJuIGZvciBtb25pdG9yaW5nLCByZS1zdXBwbHkgb3IgYW55IG90aGVyIHJlYXNvbgoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiRGF0ZS90aW1lIG9mIGZvbGxvdy11cCBhcHBvaW50bWVudCBCLkRFMTk1IjoKICBFbGVtZW50cy4iRGF0ZS90aW1lIG9mIGZvbGxvdy11cCBhcHBvaW50bWVudCBCLkRFMTk1IiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIkRhdGUvdGltZSBvZiBmb2xsb3ctdXAgYXBwb2ludG1lbnQgQi5ERTE5NSBWYWx1ZSI6CiAgIkRhdGUvdGltZSBvZiBmb2xsb3ctdXAgYXBwb2ludG1lbnQgQi5ERTE5NSIgTwogIHJldHVybiBPLnZhbHVlCi8qIEVuZCBvZiBEYXRlL3RpbWUgb2YgZm9sbG93LXVwIGFwcG9pbnRtZW50IEIuREUxOTUgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkIuREUyMjQgLSBISVYgcmV0ZXN0IHByaW9yIHRvIHN0YXJ0aW5nIEFSVCBjb25kdWN0ZWQKQGFjdGl2aXR5OiBISVYuQjIwIFNjaGVkdWxlIHJldGVzdApAZGVzY3JpcHRpb246IEhJViByZXRlc3QgcHJpb3IgdG8gc3RhcnRpbmcgQVJUIGNvbmR1Y3RlZAoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiSElWIHJldGVzdCBwcmlvciB0byBzdGFydGluZyBBUlQgY29uZHVjdGVkIjoKICBleGlzdHMgIkhJViByZXRlc3QgcHJpb3IgdG8gc3RhcnRpbmcgQVJUIGNvbmR1Y3RlZCBPYnNlcnZhdGlvbiIKZGVmaW5lICJISVYgcmV0ZXN0IHByaW9yIHRvIHN0YXJ0aW5nIEFSVCBjb25kdWN0ZWQgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJISVYgcmV0ZXN0IHByaW9yIHRvIHN0YXJ0aW5nIEFSVCBjb25kdWN0ZWQgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBISVYgcmV0ZXN0IHByaW9yIHRvIHN0YXJ0aW5nIEFSVCBjb25kdWN0ZWQgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkIuREUyMjUgLSBBdCBlbGV2YXRlZCByaXNrIGZvciBISVYgYWNxdWlzaXRpb24KQGFjdGl2aXR5OiBISVYuQjYgQ2FwdHVyZSBvciB1cGRhdGUgY2xpZW50IGhpc3RvcnkKQGRlc2NyaXB0aW9uOiBDbGllbnQgaXMgYXQgZWxldmF0ZWQgcmlzayBmb3IgSElWIGFjcXVpc2l0aW9uCiovCmRlZmluZSAiQXQgZWxldmF0ZWQgcmlzayBmb3IgSElWIGFjcXVpc2l0aW9uIEIuREUyMjUiOgogIEVsZW1lbnRzLiJBdCBlbGV2YXRlZCByaXNrIGZvciBISVYgYWNxdWlzaXRpb24gQi5ERTIyNSIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CiAgICAgIG9yIEMuZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCi8qIEVuZCBvZiBBdCBlbGV2YXRlZCByaXNrIGZvciBISVYgYWNxdWlzaXRpb24gQi5ERTIyNSAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuQi5ERTI1MCAtIFN5cGhpbGlzIHRlc3QgcmVzdWx0CkBhY3Rpdml0eTogSElWLkIyMyBPZmZlciBzZXh1YWwgYW5kIHJlcHJvZHVjdGl2ZSBoZWFsdGggc2VydmljZXMKQGRlc2NyaXB0aW9uOiBSZXN1bHQgZnJvbSBzeXBoaWxpcyB0ZXN0CiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJTeXBoaWxpcyB0ZXN0IHJlc3VsdCBCLkRFMjUwIjoKICBleGlzdHMgIlN5cGhpbGlzIHRlc3QgcmVzdWx0IEIuREUyNTAgT2JzZXJ2YXRpb24iCmRlZmluZSAiU3lwaGlsaXMgdGVzdCByZXN1bHQgQi5ERTI1MCBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIlN5cGhpbGlzIHRlc3QgcmVzdWx0IEIuREUyNTAgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBTeXBoaWxpcyB0ZXN0IHJlc3VsdCBCLkRFMjUwICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5CLkRFMjUxIC0gUG9zaXRpdmUKQGFjdGl2aXR5OiBISVYuQjIzIE9mZmVyIHNleHVhbCBhbmQgcmVwcm9kdWN0aXZlIGhlYWx0aCBzZXJ2aWNlcwpAZGVzY3JpcHRpb246IFRlc3QgcmVzdWx0IGlzIHBvc2l0aXZlIGZvciBzeXBoaWxpcwoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiUG9zaXRpdmUgQi5ERTI1MSI6CiAgZXhpc3RzICJQb3NpdGl2ZSBCLkRFMjUxIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiUG9zaXRpdmUgQi5ERTI1MSBPYnNlcnZhdGlvbiIKZGVmaW5lICJQb3NpdGl2ZSBCLkRFMjUxIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIlBvc2l0aXZlIEIuREUyNTEgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKICAgIG9yIEMuZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCmRlZmluZSAiUG9zaXRpdmUgQi5ERTI1MSBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIlBvc2l0aXZlIEIuREUyNTEgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBQb3NpdGl2ZSBCLkRFMjUxICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5CLkRFMjUyIC0gTmVnYXRpdmUKQGFjdGl2aXR5OiBISVYuQjIzIE9mZmVyIHNleHVhbCBhbmQgcmVwcm9kdWN0aXZlIGhlYWx0aCBzZXJ2aWNlcwpAZGVzY3JpcHRpb246IFRlc3QgcmVzdWx0IGlzIG5lZ2F0aXZlIGZvciBzeXBoaWxpcwoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiTmVnYXRpdmUgQi5ERTI1MiI6CiAgZXhpc3RzICJOZWdhdGl2ZSBCLkRFMjUyIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiTmVnYXRpdmUgQi5ERTI1MiBPYnNlcnZhdGlvbiIKZGVmaW5lICJOZWdhdGl2ZSBCLkRFMjUyIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIk5lZ2F0aXZlIEIuREUyNTIgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJOZWdhdGl2ZSBCLkRFMjUyIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iTmVnYXRpdmUgQi5ERTI1MiBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIE5lZ2F0aXZlIEIuREUyNTIgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkIuREUyNTMgLSBJbmNvbmNsdXNpdmUKQGFjdGl2aXR5OiBISVYuQjIzIE9mZmVyIHNleHVhbCBhbmQgcmVwcm9kdWN0aXZlIGhlYWx0aCBzZXJ2aWNlcwpAZGVzY3JpcHRpb246IFRlc3QgcmVzdWx0IGlzIGluY29uY2x1c2l2ZQoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiSW5jb25jbHVzaXZlIEIuREUyNTMiOgogIGV4aXN0cyAiSW5jb25jbHVzaXZlIEIuREUyNTMgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJJbmNvbmNsdXNpdmUgQi5ERTI1MyBPYnNlcnZhdGlvbiIKZGVmaW5lICJJbmNvbmNsdXNpdmUgQi5ERTI1MyBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJJbmNvbmNsdXNpdmUgQi5ERTI1MyBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIkluY29uY2x1c2l2ZSBCLkRFMjUzIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iSW5jb25jbHVzaXZlIEIuREUyNTMgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBJbmNvbmNsdXNpdmUgQi5ERTI1MyAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuQy5ERTkgLSBEYXRlL3RpbWUgb2Ygc3VzcGVjdGVkIGV4cG9zdXJlIHRvIEhJVgpAYWN0aXZpdHk6IEhJVi5DMyBDYXB0dXJlIG9yIHVwZGF0ZSBjbGllbnQgaGlzdG9yeQpAZGVzY3JpcHRpb246IFdoZW4gdGhlIHN1c3BlY3QgZXhwb3N1cmUgdG8gSElWIHRvb2sgcGxhY2UKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkRhdGUvdGltZSBvZiBzdXNwZWN0ZWQgZXhwb3N1cmUgdG8gSElWIEMuREU5IjoKICBFbGVtZW50cy4iRGF0ZS90aW1lIG9mIHN1c3BlY3RlZCBleHBvc3VyZSB0byBISVYgQy5ERTkiIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiRGF0ZS90aW1lIG9mIHN1c3BlY3RlZCBleHBvc3VyZSB0byBISVYgQy5ERTkgVmFsdWUiOgogICJEYXRlL3RpbWUgb2Ygc3VzcGVjdGVkIGV4cG9zdXJlIHRvIEhJViBDLkRFOSIgTwogIHJldHVybiBPLnZhbHVlCi8qIEVuZCBvZiBEYXRlL3RpbWUgb2Ygc3VzcGVjdGVkIGV4cG9zdXJlIHRvIEhJViBDLkRFOSAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuQy5ERTEwIC0gQ3VycmVudGx5IG9uIFByRVAKQGFjdGl2aXR5OiBISVYuQzMgQ2FwdHVyZSBvciB1cGRhdGUgY2xpZW50IGhpc3RvcnkKQGRlc2NyaXB0aW9uOiBUaGUgY2xpZW50IGlzIGN1cnJlbnRseSB0YWtpbmcgUHJFUC4gT3JhbCBwcmUtZXhwb3N1cmUgcHJvcGh5bGF4aXMgKFByRVApIG9mIEhJViBpcyB0aGUgdXNlIG9mIEFSViBkcnVncyBieSBwZW9wbGUgd2hvIGFyZSBub3QgaW5mZWN0ZWQgd2l0aCBISVYgdG8gYmxvY2sgdGhlIGFjcXVpc2l0aW9uIG9mIEhJVi4KKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkN1cnJlbnRseSBvbiBQckVQIjoKICBleGlzdHMgIkN1cnJlbnRseSBvbiBQckVQIE9ic2VydmF0aW9uIgpkZWZpbmUgIkN1cnJlbnRseSBvbiBQckVQIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iQ3VycmVudGx5IG9uIFByRVAgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBDdXJyZW50bHkgb24gUHJFUCAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuQy5ERTE3IC0gQ3VycmVudCBQckVQIHJlZ2ltZW4KQGFjdGl2aXR5OiBISVYuQzMgQ2FwdHVyZSBvciB1cGRhdGUgY2xpZW50IGhpc3RvcnkKQGRlc2NyaXB0aW9uOiBISVYgcHJlLWV4cG9zdXJlIHByb3BoeWxheGlzIChQckVQKSByZWdpbWVuCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJDdXJyZW50IFByRVAgcmVnaW1lbiI6CiAgZXhpc3RzICJDdXJyZW50IFByRVAgcmVnaW1lbiBPYnNlcnZhdGlvbiIKZGVmaW5lICJDdXJyZW50IFByRVAgcmVnaW1lbiBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkN1cnJlbnQgUHJFUCByZWdpbWVuIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgQ3VycmVudCBQckVQIHJlZ2ltZW4gKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkMuREUxOCAtIFRERiArIEZUQwpAYWN0aXZpdHk6IEhJVi5DMyBDYXB0dXJlIG9yIHVwZGF0ZSBjbGllbnQgaGlzdG9yeQpAZGVzY3JpcHRpb246IFRyZWF0ZWQgd2l0aCB0ZW5vZm92aXIgZGlzb3Byb3hpbCBmdW1hcmF0ZSAoVERGKSBhbmQgZW10cmljaXRhYmluZSAoRlRDKSBwcmUtZXhwb3N1cmUgcHJvcGh5bGF4aXMgKFByRVApIHJlZ2ltZW4gKG9yYWwgUHJFUCkKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIlRERiArIEZUQyBDLkRFMTgiOgogIGV4aXN0cyAiVERGICsgRlRDIEMuREUxOCBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIlRERiArIEZUQyBDLkRFMTggT2JzZXJ2YXRpb24iCmRlZmluZSAiVERGICsgRlRDIEMuREUxOCBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJUREYgKyBGVEMgQy5ERTE4IENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiVERGICsgRlRDIEMuREUxOCBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIlRERiArIEZUQyBDLkRFMTggT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBUREYgKyBGVEMgQy5ERTE4ICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5DLkRFMTkgLSBUREYKQGFjdGl2aXR5OiBISVYuQzMgQ2FwdHVyZSBvciB1cGRhdGUgY2xpZW50IGhpc3RvcnkKQGRlc2NyaXB0aW9uOiBUcmVhdGVkIHdpdGggc2luZ2xlLWFnZW50IHRlbm9mb3ZpciBkaXNvcHJveGlsIGZ1bWFyYXRlIChUREYpIHByZS1leHBvc3VyZSBwcm9waHlsYXhpcyAoUHJFUCkgcmVnaW1lbiAob3JhbCBQckVQKQoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiVERGIEMuREUxOSI6CiAgZXhpc3RzICJUREYgQy5ERTE5IENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiVERGIEMuREUxOSBPYnNlcnZhdGlvbiIKZGVmaW5lICJUREYgQy5ERTE5IENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIlRERiBDLkRFMTkgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJUREYgQy5ERTE5IE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iVERGIEMuREUxOSBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIFRERiBDLkRFMTkgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkMuREUyMCAtIFRERiArIDNUQwpAYWN0aXZpdHk6IEhJVi5DMyBDYXB0dXJlIG9yIHVwZGF0ZSBjbGllbnQgaGlzdG9yeQpAZGVzY3JpcHRpb246IFRyZWF0ZWQgd2l0aCB0ZW5vZm92aXIgZGlzb3Byb3hpbCBmdW1hcmF0ZSAoVERGKSBhbmQgbGFtaXZ1ZGluZSAoM1RDKSBwcmUtZXhwb3N1cmUgcHJvcGh5bGF4aXMgKFByRVApIHJlZ2ltZW4gKG9yYWwgUHJFUCkKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIlRERiArIDNUQyBDLkRFMjAiOgogIGV4aXN0cyAiVERGICsgM1RDIEMuREUyMCBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIlRERiArIDNUQyBDLkRFMjAgT2JzZXJ2YXRpb24iCmRlZmluZSAiVERGICsgM1RDIEMuREUyMCBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJUREYgKyAzVEMgQy5ERTIwIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiVERGICsgM1RDIEMuREUyMCBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIlRERiArIDNUQyBDLkRFMjAgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBUREYgKyAzVEMgQy5ERTIwICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5DLkRFMjEgLSBPdGhlciBUREYtYmFzZWQgcmVnaW1lbgpAYWN0aXZpdHk6IEhJVi5DMyBDYXB0dXJlIG9yIHVwZGF0ZSBjbGllbnQgaGlzdG9yeQpAZGVzY3JpcHRpb246IFRyZWF0ZWQgd2l0aCBvdGhlciB0ZW5vZm92aXIgZGlzb3Byb3hpbCBmdW1hcmF0ZSAoVERGKS1iYXNlZCByZWdpbWVuIChvcmFsIFByRVApCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJPdGhlciBUREYtYmFzZWQgcmVnaW1lbiI6CiAgZXhpc3RzICJPdGhlciBUREYtYmFzZWQgcmVnaW1lbiBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIk90aGVyIFRERi1iYXNlZCByZWdpbWVuIE9ic2VydmF0aW9uIgpkZWZpbmUgIk90aGVyIFRERi1iYXNlZCByZWdpbWVuIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIk90aGVyIFRERi1iYXNlZCByZWdpbWVuIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiT3RoZXIgVERGLWJhc2VkIHJlZ2ltZW4gT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJPdGhlciBUREYtYmFzZWQgcmVnaW1lbiBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIE90aGVyIFRERi1iYXNlZCByZWdpbWVuICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5DLkRFMjIgLSBEYXBpdmlyaW5lIHZhZ2luYWwgcmluZyBEVlIKQGFjdGl2aXR5OiBISVYuQzMgQ2FwdHVyZSBvciB1cGRhdGUgY2xpZW50IGhpc3RvcnkKQGRlc2NyaXB0aW9uOiBEYXBpdmlyaW5lIHZhZ2luYWwgcmluZyAoRFZSKSBmb3IgSElWIHByZXZlbnRpb24KKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkRhcGl2aXJpbmUgdmFnaW5hbCByaW5nIERWUiBDLkRFMjIiOgogIGV4aXN0cyAiRGFwaXZpcmluZSB2YWdpbmFsIHJpbmcgRFZSIEMuREUyMiBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIkRhcGl2aXJpbmUgdmFnaW5hbCByaW5nIERWUiBDLkRFMjIgT2JzZXJ2YXRpb24iCmRlZmluZSAiRGFwaXZpcmluZSB2YWdpbmFsIHJpbmcgRFZSIEMuREUyMiBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJEYXBpdmlyaW5lIHZhZ2luYWwgcmluZyBEVlIgQy5ERTIyIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiRGFwaXZpcmluZSB2YWdpbmFsIHJpbmcgRFZSIEMuREUyMiBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkRhcGl2aXJpbmUgdmFnaW5hbCByaW5nIERWUiBDLkRFMjIgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBEYXBpdmlyaW5lIHZhZ2luYWwgcmluZyBEVlIgQy5ERTIyICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5DLkRFMjMgLSBDQUItTEEKQGFjdGl2aXR5OiBISVYuQzMgQ2FwdHVyZSBvciB1cGRhdGUgY2xpZW50IGhpc3RvcnkKQGRlc2NyaXB0aW9uOiBMb25nLWFjdGluZyBpbmplY3RhYmxlIGNhYm90ZWdyYXZpcgoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiQ0FCLUxBIEMuREUyMyI6CiAgZXhpc3RzICJDQUItTEEgQy5ERTIzIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiQ0FCLUxBIEMuREUyMyBPYnNlcnZhdGlvbiIKZGVmaW5lICJDQUItTEEgQy5ERTIzIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIkNBQi1MQSBDLkRFMjMgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJDQUItTEEgQy5ERTIzIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iQ0FCLUxBIEMuREUyMyBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIENBQi1MQSBDLkRFMjMgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkMuREUzMSAtIFBFUCBoaXN0b3J5CkBhY3Rpdml0eTogSElWLkMzIENhcHR1cmUgb3IgdXBkYXRlIGNsaWVudCBoaXN0b3J5CkBkZXNjcmlwdGlvbjogVGhlIGNsaWVudCdzIGhpc3RvcnkgaW4gdGFraW5nIHBvc3QtZXhwb3N1cmUgcHJvcGh5bGF4aXMgKFBFUCkgZm9yIEhJViBwcmV2ZW50aW9uCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJQRVAgaGlzdG9yeSI6CiAgZXhpc3RzICJQRVAgaGlzdG9yeSBPYnNlcnZhdGlvbiIKZGVmaW5lICJQRVAgaGlzdG9yeSBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIlBFUCBoaXN0b3J5IE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgUEVQIGhpc3RvcnkgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkMuREUzMiAtIEZpcnN0LXRpbWUgdXNlcgpAYWN0aXZpdHk6IEhJVi5DMyBDYXB0dXJlIG9yIHVwZGF0ZSBjbGllbnQgaGlzdG9yeQpAZGVzY3JpcHRpb246IFRoZSBjbGllbnQgaGFzIG5ldmVyIHVzZWQgcG9zdC1leHBvc3VyZSBwcm9waHlsYXhpcyAoUEVQKSBiZWZvcmUKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkZpcnN0LXRpbWUgdXNlciBDLkRFMzIiOgogIGV4aXN0cyAiRmlyc3QtdGltZSB1c2VyIEMuREUzMiBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIkZpcnN0LXRpbWUgdXNlciBDLkRFMzIgT2JzZXJ2YXRpb24iCmRlZmluZSAiRmlyc3QtdGltZSB1c2VyIEMuREUzMiBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJGaXJzdC10aW1lIHVzZXIgQy5ERTMyIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiRmlyc3QtdGltZSB1c2VyIEMuREUzMiBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkZpcnN0LXRpbWUgdXNlciBDLkRFMzIgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBGaXJzdC10aW1lIHVzZXIgQy5ERTMyICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5DLkRFMzMgLSBSZXBlYXQgdXNlcgpAYWN0aXZpdHk6IEhJVi5DMyBDYXB0dXJlIG9yIHVwZGF0ZSBjbGllbnQgaGlzdG9yeQpAZGVzY3JpcHRpb246IFRoZSBjbGllbnQgaGFzIHVzZWQgcG9zdC1leHBvc3VyZSBwcm9waHlsYXhpcyAoUEVQKSBiZWZvcmUKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIlJlcGVhdCB1c2VyIjoKICBleGlzdHMgIlJlcGVhdCB1c2VyIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiUmVwZWF0IHVzZXIgT2JzZXJ2YXRpb24iCmRlZmluZSAiUmVwZWF0IHVzZXIgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iUmVwZWF0IHVzZXIgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJSZXBlYXQgdXNlciBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIlJlcGVhdCB1c2VyIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgUmVwZWF0IHVzZXIgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkMuREUzNiAtIFNpZ25zIG9mIHN1YnN0YW50aWFsIHJpc2sgb2YgSElWIGluZmVjdGlvbgpAYWN0aXZpdHk6IEhJVi5DMyBDYXB0dXJlIG9yIHVwZGF0ZSBjbGllbnQgaGlzdG9yeQpAZGVzY3JpcHRpb246IFNpZ25zIHRoZSBjbGllbnQgaXMgYXQgYSBzdWJzdGFudGlhbCByaXNrIG9mIEhJViBpbmZlY3Rpb24KKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIlNpZ25zIG9mIHN1YnN0YW50aWFsIHJpc2sgb2YgSElWIGluZmVjdGlvbiBDLkRFMzYiOgogIGV4aXN0cyAiU2lnbnMgb2Ygc3Vic3RhbnRpYWwgcmlzayBvZiBISVYgaW5mZWN0aW9uIEMuREUzNiBPYnNlcnZhdGlvbiIKZGVmaW5lICJTaWducyBvZiBzdWJzdGFudGlhbCByaXNrIG9mIEhJViBpbmZlY3Rpb24gQy5ERTM2IE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iU2lnbnMgb2Ygc3Vic3RhbnRpYWwgcmlzayBvZiBISVYgaW5mZWN0aW9uIEMuREUzNiBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIFNpZ25zIG9mIHN1YnN0YW50aWFsIHJpc2sgb2YgSElWIGluZmVjdGlvbiBDLkRFMzYgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkMuREUzNyAtIE5vIGNvbmRvbSB1c2UgZHVyaW5nIHNleCB3aXRoIG1vcmUgdGhhbiBvbmUgcGFydG5lciBpbiB0aGUgcGFzdCA2IG1vbnRocwpAYWN0aXZpdHk6IEhJVi5DMyBDYXB0dXJlIG9yIHVwZGF0ZSBjbGllbnQgaGlzdG9yeQpAZGVzY3JpcHRpb246IFJlY2VudCB2YWdpbmFsIG9yIGFuYWwgc2V4dWFsIGludGVyY291cnNlIHdpdGhvdXQgYSBjb25kb20gd2l0aCBtb3JlIHRoYW4gb25lIHBhcnRuZXIKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIk5vIGNvbmRvbSB1c2UgZHVyaW5nIHNleCB3aXRoIG1vcmUgdGhhbiBvbmUgcGFydG5lciBpbiB0aGUgcGFzdCA2IG1vbnRocyBDLkRFMzciOgogIGV4aXN0cyAiTm8gY29uZG9tIHVzZSBkdXJpbmcgc2V4IHdpdGggbW9yZSB0aGFuIG9uZSBwYXJ0bmVyIGluIHRoZSBwYXN0IDYgbW9udGhzIEMuREUzNyBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIk5vIGNvbmRvbSB1c2UgZHVyaW5nIHNleCB3aXRoIG1vcmUgdGhhbiBvbmUgcGFydG5lciBpbiB0aGUgcGFzdCA2IG1vbnRocyBDLkRFMzcgT2JzZXJ2YXRpb24iCmRlZmluZSAiTm8gY29uZG9tIHVzZSBkdXJpbmcgc2V4IHdpdGggbW9yZSB0aGFuIG9uZSBwYXJ0bmVyIGluIHRoZSBwYXN0IDYgbW9udGhzIEMuREUzNyBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJObyBjb25kb20gdXNlIGR1cmluZyBzZXggd2l0aCBtb3JlIHRoYW4gb25lIHBhcnRuZXIgaW4gdGhlIHBhc3QgNiBtb250aHMgQy5ERTM3IENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiTm8gY29uZG9tIHVzZSBkdXJpbmcgc2V4IHdpdGggbW9yZSB0aGFuIG9uZSBwYXJ0bmVyIGluIHRoZSBwYXN0IDYgbW9udGhzIEMuREUzNyBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIk5vIGNvbmRvbSB1c2UgZHVyaW5nIHNleCB3aXRoIG1vcmUgdGhhbiBvbmUgcGFydG5lciBpbiB0aGUgcGFzdCA2IG1vbnRocyBDLkRFMzcgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBObyBjb25kb20gdXNlIGR1cmluZyBzZXggd2l0aCBtb3JlIHRoYW4gb25lIHBhcnRuZXIgaW4gdGhlIHBhc3QgNiBtb250aHMgQy5ERTM3ICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5DLkRFMzggLSBTVEkgaW4gdGhlIHBhc3QgNiBtb250aHMKQGFjdGl2aXR5OiBISVYuQzMgQ2FwdHVyZSBvciB1cGRhdGUgY2xpZW50IGhpc3RvcnkKQGRlc2NyaXB0aW9uOiBBIHJlY2VudCBoaXN0b3J5IChpbiB0aGUgbGFzdCA2IG1vbnRocykgb2YgYSBzZXh1YWxseSB0cmFuc21pdHRlZCBpbmZlY3Rpb24gKFNUSSApIGJ5IGxhYm9yYXRvcnkgdGVzdGluZywgc2VsZi1yZXBvcnQgb3Igc3luZHJvbWljIFNUSSB0cmVhdG1lbnQKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIlNUSSBpbiB0aGUgcGFzdCA2IG1vbnRocyBDLkRFMzgiOgogIGV4aXN0cyAiU1RJIGluIHRoZSBwYXN0IDYgbW9udGhzIEMuREUzOCBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIlNUSSBpbiB0aGUgcGFzdCA2IG1vbnRocyBDLkRFMzggT2JzZXJ2YXRpb24iCmRlZmluZSAiU1RJIGluIHRoZSBwYXN0IDYgbW9udGhzIEMuREUzOCBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJTVEkgaW4gdGhlIHBhc3QgNiBtb250aHMgQy5ERTM4IENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiU1RJIGluIHRoZSBwYXN0IDYgbW9udGhzIEMuREUzOCBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIlNUSSBpbiB0aGUgcGFzdCA2IG1vbnRocyBDLkRFMzggT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBTVEkgaW4gdGhlIHBhc3QgNiBtb250aHMgQy5ERTM4ICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5DLkRFMzkgLSBBIHNleHVhbCBwYXJ0bmVyIGluIHRoZSBwYXN0IDYgbW9udGhzIGhhZCBvbmUgb3IgbW9yZSBISVYgcmlzayBmYWN0b3JzCkBhY3Rpdml0eTogSElWLkMzIENhcHR1cmUgb3IgdXBkYXRlIGNsaWVudCBoaXN0b3J5CkBkZXNjcmlwdGlvbjogQSByZWNlbnQgc2V4IHBhcnRuZXIgb2YgdGhlIGNsaWVudCBoYWQgSElWIHJpc2sgZmFjdG9ycwoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiQSBzZXh1YWwgcGFydG5lciBpbiB0aGUgcGFzdCA2IG1vbnRocyBoYWQgb25lIG9yIG1vcmUgSElWIHJpc2sgZmFjdG9ycyBDLkRFMzkiOgogIGV4aXN0cyAiQSBzZXh1YWwgcGFydG5lciBpbiB0aGUgcGFzdCA2IG1vbnRocyBoYWQgb25lIG9yIG1vcmUgSElWIHJpc2sgZmFjdG9ycyBDLkRFMzkgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJBIHNleHVhbCBwYXJ0bmVyIGluIHRoZSBwYXN0IDYgbW9udGhzIGhhZCBvbmUgb3IgbW9yZSBISVYgcmlzayBmYWN0b3JzIEMuREUzOSBPYnNlcnZhdGlvbiIKZGVmaW5lICJBIHNleHVhbCBwYXJ0bmVyIGluIHRoZSBwYXN0IDYgbW9udGhzIGhhZCBvbmUgb3IgbW9yZSBISVYgcmlzayBmYWN0b3JzIEMuREUzOSBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJBIHNleHVhbCBwYXJ0bmVyIGluIHRoZSBwYXN0IDYgbW9udGhzIGhhZCBvbmUgb3IgbW9yZSBISVYgcmlzayBmYWN0b3JzIEMuREUzOSBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIkEgc2V4dWFsIHBhcnRuZXIgaW4gdGhlIHBhc3QgNiBtb250aHMgaGFkIG9uZSBvciBtb3JlIEhJViByaXNrIGZhY3RvcnMgQy5ERTM5IE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iQSBzZXh1YWwgcGFydG5lciBpbiB0aGUgcGFzdCA2IG1vbnRocyBoYWQgb25lIG9yIG1vcmUgSElWIHJpc2sgZmFjdG9ycyBDLkRFMzkgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBBIHNleHVhbCBwYXJ0bmVyIGluIHRoZSBwYXN0IDYgbW9udGhzIGhhZCBvbmUgb3IgbW9yZSBISVYgcmlzayBmYWN0b3JzIEMuREUzOSAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuQy5ERTQwIC0gUHJFUCByZXF1ZXN0ZWQgYnkgY2xpZW50CkBhY3Rpdml0eTogSElWLkMzIENhcHR1cmUgb3IgdXBkYXRlIGNsaWVudCBoaXN0b3J5CkBkZXNjcmlwdGlvbjogQ2xpZW50IGlzIHJlcXVlc3RpbmcgUHJFUCwgcmVmbGVjdGluZyBhIGRlY2lzaW9uLW1ha2luZyBwcm9jZXNzIGhhcyBhbHJlYWR5IHRha2VuIHBsYWNlIGFuZCBzdWdnZXN0aW5nIG9mIHN1YnN0YW50aWFsIHJpc2sgb2YgSElWCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJQckVQIHJlcXVlc3RlZCBieSBjbGllbnQgQy5ERTQwIjoKICBleGlzdHMgIlByRVAgcmVxdWVzdGVkIGJ5IGNsaWVudCBDLkRFNDAgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJQckVQIHJlcXVlc3RlZCBieSBjbGllbnQgQy5ERTQwIE9ic2VydmF0aW9uIgpkZWZpbmUgIlByRVAgcmVxdWVzdGVkIGJ5IGNsaWVudCBDLkRFNDAgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iUHJFUCByZXF1ZXN0ZWQgYnkgY2xpZW50IEMuREU0MCBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIlByRVAgcmVxdWVzdGVkIGJ5IGNsaWVudCBDLkRFNDAgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJQckVQIHJlcXVlc3RlZCBieSBjbGllbnQgQy5ERTQwIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgUHJFUCByZXF1ZXN0ZWQgYnkgY2xpZW50IEMuREU0MCAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuQy5ERTQ2IC0gQWN1dGUgSElWIGluZmVjdGlvbiBzeW1wdG9tcwpAYWN0aXZpdHk6IEhJVi5DMyBDYXB0dXJlIG9yIHVwZGF0ZSBjbGllbnQgaGlzdG9yeQpAZGVzY3JpcHRpb246IFN5bXB0b21zIHRoYXQgY291bGQgc3VnZ2VzdCBhbiBhY3V0ZSBISVYgaW5mZWN0aW9uCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJBY3V0ZSBISVYgaW5mZWN0aW9uIHN5bXB0b21zIEMuREU0NiI6CiAgZXhpc3RzICJBY3V0ZSBISVYgaW5mZWN0aW9uIHN5bXB0b21zIEMuREU0NiBPYnNlcnZhdGlvbiIKZGVmaW5lICJBY3V0ZSBISVYgaW5mZWN0aW9uIHN5bXB0b21zIEMuREU0NiBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkFjdXRlIEhJViBpbmZlY3Rpb24gc3ltcHRvbXMgQy5ERTQ2IE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgQWN1dGUgSElWIGluZmVjdGlvbiBzeW1wdG9tcyBDLkRFNDYgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkMuREU0NyAtIEZldmVyCkBhY3Rpdml0eTogSElWLkMzIENhcHR1cmUgb3IgdXBkYXRlIGNsaWVudCBoaXN0b3J5CkBkZXNjcmlwdGlvbjogQ2xpZW50J3Mgc3ltcHRvbXMgaW5jbHVkZSBhIGZldmVyCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJGZXZlciI6CiAgZXhpc3RzICJGZXZlciBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIkZldmVyIE9ic2VydmF0aW9uIgpkZWZpbmUgIkZldmVyIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIkZldmVyIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiRmV2ZXIgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJGZXZlciBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIEZldmVyICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5DLkRFNDggLSBTb3JlIHRocm9hdApAYWN0aXZpdHk6IEhJVi5DMyBDYXB0dXJlIG9yIHVwZGF0ZSBjbGllbnQgaGlzdG9yeQpAZGVzY3JpcHRpb246IENsaWVudCdzIHN5bXB0b21zIGluY2x1ZGUgYSBzb3JlIHRocm9hdAoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiU29yZSB0aHJvYXQiOgogIGV4aXN0cyAiU29yZSB0aHJvYXQgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJTb3JlIHRocm9hdCBPYnNlcnZhdGlvbiIKZGVmaW5lICJTb3JlIHRocm9hdCBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJTb3JlIHRocm9hdCBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIlNvcmUgdGhyb2F0IE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iU29yZSB0aHJvYXQgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBTb3JlIHRocm9hdCAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuQy5ERTQ5IC0gQWNoZXMKQGFjdGl2aXR5OiBISVYuQzMgQ2FwdHVyZSBvciB1cGRhdGUgY2xpZW50IGhpc3RvcnkKQGRlc2NyaXB0aW9uOiBDbGllbnQncyBzeW1wdG9tcyBpbmNsdWRlIGFjaGVzCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJBY2hlcyI6CiAgZXhpc3RzICJBY2hlcyBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIkFjaGVzIE9ic2VydmF0aW9uIgpkZWZpbmUgIkFjaGVzIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIkFjaGVzIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiQWNoZXMgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJBY2hlcyBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIEFjaGVzICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5DLkRFNTAgLSBQYWlucwpAYWN0aXZpdHk6IEhJVi5DMyBDYXB0dXJlIG9yIHVwZGF0ZSBjbGllbnQgaGlzdG9yeQpAZGVzY3JpcHRpb246IENsaWVudCdzIHN5bXB0b21zIGluY2x1ZGUgcGFpbnMKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIlBhaW5zIjoKICBleGlzdHMgIlBhaW5zIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiUGFpbnMgT2JzZXJ2YXRpb24iCmRlZmluZSAiUGFpbnMgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iUGFpbnMgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJQYWlucyBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIlBhaW5zIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgUGFpbnMgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkMuREU1MSAtIFN3b2xsZW4gZ2xhbmRzCkBhY3Rpdml0eTogSElWLkMzIENhcHR1cmUgb3IgdXBkYXRlIGNsaWVudCBoaXN0b3J5CkBkZXNjcmlwdGlvbjogQ2xpZW50J3Mgc3ltcHRvbXMgaW5jbHVkZSBzd29sbGVuIGdsYW5kcwoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiU3dvbGxlbiBnbGFuZHMiOgogIGV4aXN0cyAiU3dvbGxlbiBnbGFuZHMgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJTd29sbGVuIGdsYW5kcyBPYnNlcnZhdGlvbiIKZGVmaW5lICJTd29sbGVuIGdsYW5kcyBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJTd29sbGVuIGdsYW5kcyBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIlN3b2xsZW4gZ2xhbmRzIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iU3dvbGxlbiBnbGFuZHMgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBTd29sbGVuIGdsYW5kcyAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuQy5ERTUyIC0gTW91dGggc29yZXMKQGFjdGl2aXR5OiBISVYuQzMgQ2FwdHVyZSBvciB1cGRhdGUgY2xpZW50IGhpc3RvcnkKQGRlc2NyaXB0aW9uOiBDbGllbnQncyBzeW1wdG9tcyBpbmNsdWRlIGEgbW91dGggc29yZXMKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIk1vdXRoIHNvcmVzIjoKICBleGlzdHMgIk1vdXRoIHNvcmVzIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiTW91dGggc29yZXMgT2JzZXJ2YXRpb24iCmRlZmluZSAiTW91dGggc29yZXMgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iTW91dGggc29yZXMgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJNb3V0aCBzb3JlcyBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIk1vdXRoIHNvcmVzIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgTW91dGggc29yZXMgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkMuREU1MyAtIEhlYWRhY2hlcwpAYWN0aXZpdHk6IEhJVi5DMyBDYXB0dXJlIG9yIHVwZGF0ZSBjbGllbnQgaGlzdG9yeQpAZGVzY3JpcHRpb246IENsaWVudCdzIHN5bXB0b21zIGluY2x1ZGUgYSBoZWFkYWNoZXMKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkhlYWRhY2hlcyI6CiAgZXhpc3RzICJIZWFkYWNoZXMgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJIZWFkYWNoZXMgT2JzZXJ2YXRpb24iCmRlZmluZSAiSGVhZGFjaGVzIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIkhlYWRhY2hlcyBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIkhlYWRhY2hlcyBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkhlYWRhY2hlcyBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIEhlYWRhY2hlcyAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuQy5ERTU0IC0gUmFzaApAYWN0aXZpdHk6IEhJVi5DMyBDYXB0dXJlIG9yIHVwZGF0ZSBjbGllbnQgaGlzdG9yeQpAZGVzY3JpcHRpb246IENsaWVudCdzIHN5bXB0b21zIGluY2x1ZGUgYSByYXNoCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJSYXNoIjoKICBleGlzdHMgIlJhc2ggQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJSYXNoIE9ic2VydmF0aW9uIgpkZWZpbmUgIlJhc2ggQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iUmFzaCBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIlJhc2ggT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJSYXNoIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgUmFzaCAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuQy5ERTU1IC0gU2V4IHBhcnRuZXJzIEhJViB0cmVhdG1lbnQgc3RhdHVzCkBhY3Rpdml0eTogSElWLkMzIENhcHR1cmUgb3IgdXBkYXRlIGNsaWVudCBoaXN0b3J5CkBkZXNjcmlwdGlvbjogVHJlYXRtZW50IGFkaGVyZW5jZSBvZiBjbGllbnQncyBzZXggcGFydG5lciBmb3IgcGFydG5lcnMgdGhhdCBhcmUgSElWLXBvc2l0aXZlCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJTZXggcGFydG5lcnMgSElWIHRyZWF0bWVudCBzdGF0dXMiOgogIGV4aXN0cyAiU2V4IHBhcnRuZXJzIEhJViB0cmVhdG1lbnQgc3RhdHVzIE9ic2VydmF0aW9uIgpkZWZpbmUgIlNleCBwYXJ0bmVycyBISVYgdHJlYXRtZW50IHN0YXR1cyBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIlNleCBwYXJ0bmVycyBISVYgdHJlYXRtZW50IHN0YXR1cyBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIFNleCBwYXJ0bmVycyBISVYgdHJlYXRtZW50IHN0YXR1cyAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuQy5ERTU2IC0gTm90IG9uIEFSVApAYWN0aXZpdHk6IEhJVi5DMyBDYXB0dXJlIG9yIHVwZGF0ZSBjbGllbnQgaGlzdG9yeQpAZGVzY3JpcHRpb246IFNleCBwYXJ0bmVyIGlzIEhJVi1wb3NpdGl2ZSBhbmQgbm90IG9uIEFSVAoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiTm90IG9uIEFSVCI6CiAgZXhpc3RzICJOb3Qgb24gQVJUIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiTm90IG9uIEFSVCBPYnNlcnZhdGlvbiIKZGVmaW5lICJOb3Qgb24gQVJUIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIk5vdCBvbiBBUlQgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJOb3Qgb24gQVJUIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iTm90IG9uIEFSVCBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIE5vdCBvbiBBUlQgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkMuREU1NyAtIE9uIEFSVCBsZXNzIHRoYW4gNiBtb250aHMKQGFjdGl2aXR5OiBISVYuQzMgQ2FwdHVyZSBvciB1cGRhdGUgY2xpZW50IGhpc3RvcnkKQGRlc2NyaXB0aW9uOiBTZXggcGFydG5lciBpcyBISVYtcG9zaXRpdmUgYW5kIGlzIG9uIEFSVCBsZXNzIHRoYW4gNiBtb250aHMuIEFSVCBtYXkgdGFrZSB1cCB0byA2IG1vbnRocyB0byBzdXBwcmVzcyB2aXJhbCBsb2FkLiBJbiBzdHVkaWVzIG9mIHNlcm9kaXNjb3JkYW50IGNvdXBsZXMsIHByZS1leHBvc3VyZSBwcm9waHlsYXhpcyAoUHJFUCkgaGFzIHByb3ZpZGVkIGEgdXNlZnVsIGJyaWRnZSB0byBmdWxsIHZpcmFsIHN1cHByZXNzaW9uIGJ5IHRoZSBwYXJ0bmVyIGR1cmluZyB0aGF0IHRpbWUuCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJPbiBBUlQgbGVzcyB0aGFuIDYgbW9udGhzIjoKICBleGlzdHMgIk9uIEFSVCBsZXNzIHRoYW4gNiBtb250aHMgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJPbiBBUlQgbGVzcyB0aGFuIDYgbW9udGhzIE9ic2VydmF0aW9uIgpkZWZpbmUgIk9uIEFSVCBsZXNzIHRoYW4gNiBtb250aHMgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iT24gQVJUIGxlc3MgdGhhbiA2IG1vbnRocyBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIk9uIEFSVCBsZXNzIHRoYW4gNiBtb250aHMgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJPbiBBUlQgbGVzcyB0aGFuIDYgbW9udGhzIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgT24gQVJUIGxlc3MgdGhhbiA2IG1vbnRocyAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuQy5ERTU4IC0gUGFydG5lciBoYXMgc3VzcGVjdGVkIGxvdyBhZGhlcmVuY2UgdG8gQVJUCkBhY3Rpdml0eTogSElWLkMzIENhcHR1cmUgb3IgdXBkYXRlIGNsaWVudCBoaXN0b3J5CkBkZXNjcmlwdGlvbjogU2V4IHBhcnRuZXIgaXMgSElWLXBvc2l0aXZlIGFuZCBpcyBzdXNwZWN0ZWQgdG8gaGF2ZSBsb3cgYWRoZXJlbmNlIHRvIEFSVC4gVGhlcmUgaGF2ZSBiZWVuIGdhcHMgaW4gdGhlIHBhcnRuZXIncyB0cmVhdG1lbnQgYWRoZXJlbmNlIG9yIHRoZSBjb3VwbGUgaXMgbm90IGNvbW11bmljYXRpbmcgb3Blbmx5IGFib3V0IHRyZWF0bWVudCBhZGhlcmVuY2UgYW5kIHZpcmFsIGxvYWQgdGVzdCByZXN1bHRzLgoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiUGFydG5lciBoYXMgc3VzcGVjdGVkIGxvdyBhZGhlcmVuY2UgdG8gQVJUIjoKICBleGlzdHMgIlBhcnRuZXIgaGFzIHN1c3BlY3RlZCBsb3cgYWRoZXJlbmNlIHRvIEFSVCBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIlBhcnRuZXIgaGFzIHN1c3BlY3RlZCBsb3cgYWRoZXJlbmNlIHRvIEFSVCBPYnNlcnZhdGlvbiIKZGVmaW5lICJQYXJ0bmVyIGhhcyBzdXNwZWN0ZWQgbG93IGFkaGVyZW5jZSB0byBBUlQgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iUGFydG5lciBoYXMgc3VzcGVjdGVkIGxvdyBhZGhlcmVuY2UgdG8gQVJUIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiUGFydG5lciBoYXMgc3VzcGVjdGVkIGxvdyBhZGhlcmVuY2UgdG8gQVJUIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iUGFydG5lciBoYXMgc3VzcGVjdGVkIGxvdyBhZGhlcmVuY2UgdG8gQVJUIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgUGFydG5lciBoYXMgc3VzcGVjdGVkIGxvdyBhZGhlcmVuY2UgdG8gQVJUICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5DLkRFNTkgLSBQYXJ0bmVyIGlzIG5vdCB2aXJhbGx5IHN1cHByZXNzZWQKQGFjdGl2aXR5OiBISVYuQzMgQ2FwdHVyZSBvciB1cGRhdGUgY2xpZW50IGhpc3RvcnkKQGRlc2NyaXB0aW9uOiBTZXggcGFydG5lciBpcyBISVYtcG9zaXRpdmUgYW5kIG5vdCB2aXJhbGx5IHN1cHByZXNzZWQKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIlBhcnRuZXIgaXMgbm90IHZpcmFsbHkgc3VwcHJlc3NlZCI6CiAgZXhpc3RzICJQYXJ0bmVyIGlzIG5vdCB2aXJhbGx5IHN1cHByZXNzZWQgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJQYXJ0bmVyIGlzIG5vdCB2aXJhbGx5IHN1cHByZXNzZWQgT2JzZXJ2YXRpb24iCmRlZmluZSAiUGFydG5lciBpcyBub3QgdmlyYWxseSBzdXBwcmVzc2VkIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIlBhcnRuZXIgaXMgbm90IHZpcmFsbHkgc3VwcHJlc3NlZCBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIlBhcnRuZXIgaXMgbm90IHZpcmFsbHkgc3VwcHJlc3NlZCBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIlBhcnRuZXIgaXMgbm90IHZpcmFsbHkgc3VwcHJlc3NlZCBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIFBhcnRuZXIgaXMgbm90IHZpcmFsbHkgc3VwcHJlc3NlZCAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuQy5ERTYwIC0gUGFydG5lciBpcyB2aXJhbGx5IHN1cHByZXNzZWQgYW5kIGhhcyBiZWVuIG9uIEFSVCBmb3IgNiBtb250aHMgb3IgbW9yZQpAYWN0aXZpdHk6IEhJVi5DMyBDYXB0dXJlIG9yIHVwZGF0ZSBjbGllbnQgaGlzdG9yeQpAZGVzY3JpcHRpb246IFNleCBwYXJ0bmVyIGlzIEhJVi1wb3NpdGl2ZSBhbmQgdmlyYWxseSBzdXBwcmVzc2VkIHdpdGggNiBtb250aHMgb3IgbW9yZSBvbiBBUlQKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIlBhcnRuZXIgaXMgdmlyYWxseSBzdXBwcmVzc2VkIGFuZCBoYXMgYmVlbiBvbiBBUlQgZm9yIDYgbW9udGhzIG9yIG1vcmUiOgogIGV4aXN0cyAiUGFydG5lciBpcyB2aXJhbGx5IHN1cHByZXNzZWQgYW5kIGhhcyBiZWVuIG9uIEFSVCBmb3IgNiBtb250aHMgb3IgbW9yZSBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIlBhcnRuZXIgaXMgdmlyYWxseSBzdXBwcmVzc2VkIGFuZCBoYXMgYmVlbiBvbiBBUlQgZm9yIDYgbW9udGhzIG9yIG1vcmUgT2JzZXJ2YXRpb24iCmRlZmluZSAiUGFydG5lciBpcyB2aXJhbGx5IHN1cHByZXNzZWQgYW5kIGhhcyBiZWVuIG9uIEFSVCBmb3IgNiBtb250aHMgb3IgbW9yZSBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJQYXJ0bmVyIGlzIHZpcmFsbHkgc3VwcHJlc3NlZCBhbmQgaGFzIGJlZW4gb24gQVJUIGZvciA2IG1vbnRocyBvciBtb3JlIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiUGFydG5lciBpcyB2aXJhbGx5IHN1cHByZXNzZWQgYW5kIGhhcyBiZWVuIG9uIEFSVCBmb3IgNiBtb250aHMgb3IgbW9yZSBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIlBhcnRuZXIgaXMgdmlyYWxseSBzdXBwcmVzc2VkIGFuZCBoYXMgYmVlbiBvbiBBUlQgZm9yIDYgbW9udGhzIG9yIG1vcmUgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBQYXJ0bmVyIGlzIHZpcmFsbHkgc3VwcHJlc3NlZCBhbmQgaGFzIGJlZW4gb24gQVJUIGZvciA2IG1vbnRocyBvciBtb3JlICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5DLkRFNjEgLSBTdWl0YWJsZSBmb3IgUHJFUApAYWN0aXZpdHk6IEhJVi5DOCBTdWl0YWJsZSBmb3IgUHJFUCBvciBQRVA/CkBkZXNjcmlwdGlvbjogVGhlIGNsaWVudCBpcyBzdWl0YWJsZSBmb3IgUHJFUAoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiU3VpdGFibGUgZm9yIFByRVAiOgogIGV4aXN0cyAiU3VpdGFibGUgZm9yIFByRVAgT2JzZXJ2YXRpb24iCmRlZmluZSAiU3VpdGFibGUgZm9yIFByRVAgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJTdWl0YWJsZSBmb3IgUHJFUCBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIFN1aXRhYmxlIGZvciBQckVQICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5DLkRFOTEgLSBQcmVmZXJyZWQgUEVQIGJhY2tib25lIHJlZ2ltZW4KQGFjdGl2aXR5OiBISVYuQzIzIFByZXNjcmliZSBvciBhZG1pbmlzdGVyIFByRVAgb3IgUEVQCkBkZXNjcmlwdGlvbjogUHJlZmVycmVkIGJhY2tib25lIHJlZ2ltZW4gZm9yIFBFUAoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiUHJlZmVycmVkIFBFUCBiYWNrYm9uZSByZWdpbWVuIjoKICBleGlzdHMgIlByZWZlcnJlZCBQRVAgYmFja2JvbmUgcmVnaW1lbiBPYnNlcnZhdGlvbiIKZGVmaW5lICJQcmVmZXJyZWQgUEVQIGJhY2tib25lIHJlZ2ltZW4gT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJQcmVmZXJyZWQgUEVQIGJhY2tib25lIHJlZ2ltZW4gT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBQcmVmZXJyZWQgUEVQIGJhY2tib25lIHJlZ2ltZW4gKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkMuREU5MiAtIFRERiArIDNUQwpAYWN0aXZpdHk6IEhJVi5DMjMgUHJlc2NyaWJlIG9yIGFkbWluaXN0ZXIgUHJFUCBvciBQRVAKQGRlc2NyaXB0aW9uOiBQcmVmZXJyZWQgYmFja2JvbmUgY29udGFpbmluZyB0ZW5vZm92aXIgZGlzb3Byb3hpbCBmdW1hcmF0ZSBhbmQgbGFtaXZ1ZGluZQoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiVERGICsgM1RDIEMuREU5MiI6CiAgZXhpc3RzICJUREYgKyAzVEMgQy5ERTkyIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiVERGICsgM1RDIEMuREU5MiBPYnNlcnZhdGlvbiIKZGVmaW5lICJUREYgKyAzVEMgQy5ERTkyIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIlRERiArIDNUQyBDLkRFOTIgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJUREYgKyAzVEMgQy5ERTkyIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iVERGICsgM1RDIEMuREU5MiBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIFRERiArIDNUQyBDLkRFOTIgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkMuREU5MyAtIFRERiArIEZUQwpAYWN0aXZpdHk6IEhJVi5DMjMgUHJlc2NyaWJlIG9yIGFkbWluaXN0ZXIgUHJFUCBvciBQRVAKQGRlc2NyaXB0aW9uOiBQcmVmZXJyZWQgYmFja2JvbmUgY29udGFpbmluZyB0ZW5vZm92aXIgZGlzb3Byb3hpbCBmdW1hcmF0ZSBhbmQgZW10cmljaXRhYmluZQoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiVERGICsgRlRDIEMuREU5MyI6CiAgZXhpc3RzICJUREYgKyBGVEMgQy5ERTkzIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiVERGICsgRlRDIEMuREU5MyBPYnNlcnZhdGlvbiIKZGVmaW5lICJUREYgKyBGVEMgQy5ERTkzIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIlRERiArIEZUQyBDLkRFOTMgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJUREYgKyBGVEMgQy5ERTkzIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iVERGICsgRlRDIEMuREU5MyBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIFRERiArIEZUQyBDLkRFOTMgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkMuREU5NCAtIEFaVCArIDNUQwpAYWN0aXZpdHk6IEhJVi5DMjMgUHJlc2NyaWJlIG9yIGFkbWluaXN0ZXIgUHJFUCBvciBQRVAKQGRlc2NyaXB0aW9uOiBQcmVmZXJyZWQgYmFja2JvbmUgY29udGFpbmluZyB6aWRvdnVkaW5lIGFuZCBsYW1pdnVkaW5lCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJBWlQgKyAzVEMiOgogIGV4aXN0cyAiQVpUICsgM1RDIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiQVpUICsgM1RDIE9ic2VydmF0aW9uIgpkZWZpbmUgIkFaVCArIDNUQyBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJBWlQgKyAzVEMgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJBWlQgKyAzVEMgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJBWlQgKyAzVEMgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBBWlQgKyAzVEMgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkMuREU5NSAtIEFsdGVybmF0aXZlIFBFUCBiYWNrYm9uZSByZWdpbWVuCkBhY3Rpdml0eTogSElWLkMzIENhcHR1cmUgb3IgdXBkYXRlIGNsaWVudCBoaXN0b3J5CkBkZXNjcmlwdGlvbjogQWx0ZXJuYXRpdmUgYmFja2JvbmUgcmVnaW1lbiBmb3IgUEVQCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJBbHRlcm5hdGl2ZSBQRVAgYmFja2JvbmUgcmVnaW1lbiI6CiAgZXhpc3RzICJBbHRlcm5hdGl2ZSBQRVAgYmFja2JvbmUgcmVnaW1lbiBPYnNlcnZhdGlvbiIKZGVmaW5lICJBbHRlcm5hdGl2ZSBQRVAgYmFja2JvbmUgcmVnaW1lbiBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkFsdGVybmF0aXZlIFBFUCBiYWNrYm9uZSByZWdpbWVuIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgQWx0ZXJuYXRpdmUgUEVQIGJhY2tib25lIHJlZ2ltZW4gKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkMuREU5NiAtIEFCQyArIDNUQwpAYWN0aXZpdHk6IEhJVi5DMyBDYXB0dXJlIG9yIHVwZGF0ZSBjbGllbnQgaGlzdG9yeQpAZGVzY3JpcHRpb246IEFsdGVybmF0aXZlIGJhY2tib25lIGNvbnRhaW5pbmcgYWJhY2F2aXIgYW5kIGxhbWl2dWRpbmUKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkFCQyArIDNUQyI6CiAgZXhpc3RzICJBQkMgKyAzVEMgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJBQkMgKyAzVEMgT2JzZXJ2YXRpb24iCmRlZmluZSAiQUJDICsgM1RDIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIkFCQyArIDNUQyBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIkFCQyArIDNUQyBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkFCQyArIDNUQyBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIEFCQyArIDNUQyAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuQy5ERTk3IC0gVERGICsgM1RDCkBhY3Rpdml0eTogSElWLkMzIENhcHR1cmUgb3IgdXBkYXRlIGNsaWVudCBoaXN0b3J5CkBkZXNjcmlwdGlvbjogQWx0ZXJuYXRpdmUgYmFja2JvbmUgY29udGFpbmluZyB0ZW5vZm92aXIgZGlzb3Byb3hpbCBmdW1hcmF0ZSBhbmQgbGFtaXZ1ZGluZQoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiVERGICsgM1RDIEMuREU5NyI6CiAgZXhpc3RzICJUREYgKyAzVEMgQy5ERTk3IENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiVERGICsgM1RDIEMuREU5NyBPYnNlcnZhdGlvbiIKZGVmaW5lICJUREYgKyAzVEMgQy5ERTk3IENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIlRERiArIDNUQyBDLkRFOTcgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJUREYgKyAzVEMgQy5ERTk3IE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iVERGICsgM1RDIEMuREU5NyBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIFRERiArIDNUQyBDLkRFOTcgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkMuREU5OCAtIFRERiArIEZUQwpAYWN0aXZpdHk6IEhJVi5DMyBDYXB0dXJlIG9yIHVwZGF0ZSBjbGllbnQgaGlzdG9yeQpAZGVzY3JpcHRpb246IEFsdGVybmF0aXZlIGJhY2tib25lIGNvbnRhaW5pbmcgdGVub2ZvdmlyIGRpc29wcm94aWwgZnVtYXJhdGUgYW5kIGVtdHJpY2l0YWJpbmUKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIlRERiArIEZUQyBDLkRFOTgiOgogIGV4aXN0cyAiVERGICsgRlRDIEMuREU5OCBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIlRERiArIEZUQyBDLkRFOTggT2JzZXJ2YXRpb24iCmRlZmluZSAiVERGICsgRlRDIEMuREU5OCBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJUREYgKyBGVEMgQy5ERTk4IENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiVERGICsgRlRDIEMuREU5OCBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIlRERiArIEZUQyBDLkRFOTggT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBUREYgKyBGVEMgQy5ERTk4ICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5DLkRFOTkgLSBQcmVmZXJyZWQgdGhpcmQgUEVQIGRydWcKQGFjdGl2aXR5OiBISVYuQzIzIFByZXNjcmliZSBvciBhZG1pbmlzdGVyIFByRVAgb3IgUEVQCkBkZXNjcmlwdGlvbjogUHJlZmVycmVkIHRoaXJkIGRydWcgZm9yIFBFUAoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiUHJlZmVycmVkIHRoaXJkIFBFUCBkcnVnIjoKICBleGlzdHMgIlByZWZlcnJlZCB0aGlyZCBQRVAgZHJ1ZyBPYnNlcnZhdGlvbiIKZGVmaW5lICJQcmVmZXJyZWQgdGhpcmQgUEVQIGRydWcgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJQcmVmZXJyZWQgdGhpcmQgUEVQIGRydWcgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBQcmVmZXJyZWQgdGhpcmQgUEVQIGRydWcgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkMuREUxMDAgLSBEVEcKQGFjdGl2aXR5OiBISVYuQzIzIFByZXNjcmliZSBvciBhZG1pbmlzdGVyIFByRVAgb3IgUEVQCkBkZXNjcmlwdGlvbjogUHJlZmVycmVkIHRoaXJkIGRydWcgb2YgZG9sdXRlZ3JhdmlyCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJEVEcgQy5ERTEwMCI6CiAgZXhpc3RzICJEVEcgQy5ERTEwMCBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIkRURyBDLkRFMTAwIE9ic2VydmF0aW9uIgpkZWZpbmUgIkRURyBDLkRFMTAwIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIkRURyBDLkRFMTAwIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiRFRHIEMuREUxMDAgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJEVEcgQy5ERTEwMCBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIERURyBDLkRFMTAwICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5DLkRFMTAxIC0gQWx0ZXJuYXRpdmUgdGhpcmQgUEVQIGRydWcKQGFjdGl2aXR5OiBISVYuQzMgQ2FwdHVyZSBvciB1cGRhdGUgY2xpZW50IGhpc3RvcnkKQGRlc2NyaXB0aW9uOiBBbHRlcm5hdGl2ZSB0aGlyZCBkcnVnIGZvciBQRVAKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkFsdGVybmF0aXZlIHRoaXJkIFBFUCBkcnVnIjoKICBleGlzdHMgIkFsdGVybmF0aXZlIHRoaXJkIFBFUCBkcnVnIE9ic2VydmF0aW9uIgpkZWZpbmUgIkFsdGVybmF0aXZlIHRoaXJkIFBFUCBkcnVnIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iQWx0ZXJuYXRpdmUgdGhpcmQgUEVQIGRydWcgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBBbHRlcm5hdGl2ZSB0aGlyZCBQRVAgZHJ1ZyAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuQy5ERTEwMiAtIEFUVi9yCkBhY3Rpdml0eTogSElWLkMzIENhcHR1cmUgb3IgdXBkYXRlIGNsaWVudCBoaXN0b3J5CkBkZXNjcmlwdGlvbjogQWx0ZXJuYXRpdmUgdGhpcmQgZHJ1ZyBvZiBhdGF6YW5hdmlyL3JpdG9uYXZpciAoQVRWL3IpCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJBVFYvciBDLkRFMTAyIjoKICBleGlzdHMgIkFUVi9yIEMuREUxMDIgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJBVFYvciBDLkRFMTAyIE9ic2VydmF0aW9uIgpkZWZpbmUgIkFUVi9yIEMuREUxMDIgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iQVRWL3IgQy5ERTEwMiBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIkFUVi9yIEMuREUxMDIgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJBVFYvciBDLkRFMTAyIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgQVRWL3IgQy5ERTEwMiAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuQy5ERTEwMyAtIERSVi9yCkBhY3Rpdml0eTogSElWLkMzIENhcHR1cmUgb3IgdXBkYXRlIGNsaWVudCBoaXN0b3J5CkBkZXNjcmlwdGlvbjogQWx0ZXJuYXRpdmUgdGhpcmQgZHJ1ZyBvZiBkYXJ1bmF2aXIvcml0b25hdmlyIChEUlYvcikKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkRSVi9yIEMuREUxMDMiOgogIGV4aXN0cyAiRFJWL3IgQy5ERTEwMyBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIkRSVi9yIEMuREUxMDMgT2JzZXJ2YXRpb24iCmRlZmluZSAiRFJWL3IgQy5ERTEwMyBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJEUlYvciBDLkRFMTAzIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiRFJWL3IgQy5ERTEwMyBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkRSVi9yIEMuREUxMDMgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBEUlYvciBDLkRFMTAzICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5DLkRFMTA0IC0gTFBWL3IKQGFjdGl2aXR5OiBISVYuQzMgQ2FwdHVyZSBvciB1cGRhdGUgY2xpZW50IGhpc3RvcnkKQGRlc2NyaXB0aW9uOiBBbHRlcm5hdGl2ZSB0aGlyZCBkcnVnIG9mIGxvcGluYXZpci9yaXRvbmF2aXIgKExQVi9yKQoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiTFBWL3IgQy5ERTEwNCI6CiAgZXhpc3RzICJMUFYvciBDLkRFMTA0IENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiTFBWL3IgQy5ERTEwNCBPYnNlcnZhdGlvbiIKZGVmaW5lICJMUFYvciBDLkRFMTA0IENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIkxQVi9yIEMuREUxMDQgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJMUFYvciBDLkRFMTA0IE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iTFBWL3IgQy5ERTEwNCBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIExQVi9yIEMuREUxMDQgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkMuREUxMDUgLSBSQUwKQGFjdGl2aXR5OiBISVYuQzMgQ2FwdHVyZSBvciB1cGRhdGUgY2xpZW50IGhpc3RvcnkKQGRlc2NyaXB0aW9uOiBBbHRlcm5hdGl2ZSB0aGlyZCBkcnVnIG9mIHJhbHRlZ3JhdmlyIChSQUwpCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJSQUwgQy5ERTEwNSI6CiAgZXhpc3RzICJSQUwgQy5ERTEwNSBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIlJBTCBDLkRFMTA1IE9ic2VydmF0aW9uIgpkZWZpbmUgIlJBTCBDLkRFMTA1IENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIlJBTCBDLkRFMTA1IENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiUkFMIEMuREUxMDUgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJSQUwgQy5ERTEwNSBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIFJBTCBDLkRFMTA1ICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5DLkRFMTA2IC0gRXN0aW1hdGVkIGNyZWF0aW5pbmUgY2xlYXJhbmNlCkBhY3Rpdml0eTogSElWLkMyMyBQcmVzY3JpYmUgb3IgYWRtaW5pc3RlciBQckVQIG9yIFBFUApAZGVzY3JpcHRpb246IEVzdGltYXRlZCBjcmVhdGluaW5lIGNsZWFyYW5jZSBvZiB0aGUgY2xpZW50IHJldHVybmVkIGZyb20gbGFiIGluIG1ML21pbgoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiRXN0aW1hdGVkIGNyZWF0aW5pbmUgY2xlYXJhbmNlIjoKICBFbGVtZW50cy4iRXN0aW1hdGVkIGNyZWF0aW5pbmUgY2xlYXJhbmNlIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIkVzdGltYXRlZCBjcmVhdGluaW5lIGNsZWFyYW5jZSBWYWx1ZSI6CiAgIkVzdGltYXRlZCBjcmVhdGluaW5lIGNsZWFyYW5jZSIgTwogIHJldHVybiBPLnZhbHVlCi8qIEVuZCBvZiBFc3RpbWF0ZWQgY3JlYXRpbmluZSBjbGVhcmFuY2UgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkMuREUxMTIgLSBDb250cmFpbmRpY2F0aW9ucyB0byBQckVQIHVzYWdlCkBhY3Rpdml0eTogSElWLkMyMyBQcmVzY3JpYmUgb3IgYWRtaW5pc3RlciBQckVQIG9yIFBFUApAZGVzY3JpcHRpb246IExpc3Rpbmcgb2YgY29udHJhaW5kaWNhdGlvbnMgdG8gcHJlLWV4cG9zdXJlIHByb3BoeWxheGlzIChQckVQKQoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiQ29udHJhaW5kaWNhdGlvbnMgdG8gUHJFUCB1c2FnZSI6CiAgZXhpc3RzICJDb250cmFpbmRpY2F0aW9ucyB0byBQckVQIHVzYWdlIE9ic2VydmF0aW9uIgpkZWZpbmUgIkNvbnRyYWluZGljYXRpb25zIHRvIFByRVAgdXNhZ2UgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJDb250cmFpbmRpY2F0aW9ucyB0byBQckVQIHVzYWdlIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgQ29udHJhaW5kaWNhdGlvbnMgdG8gUHJFUCB1c2FnZSAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuQy5ERTExMyAtIFRlbm9mb3ZpciBkaXNvcHJveGlsIGZ1bWFyYXRlIFRERiBhbGxlcmd5IG9yIGNvbnRyYWluZGljYXRpb24KQGFjdGl2aXR5OiBISVYuQzIzIFByZXNjcmliZSBvciBhZG1pbmlzdGVyIFByRVAgb3IgUEVQCkBkZXNjcmlwdGlvbjogQWxsZXJneSB0byBwcmUtZXhwb3N1cmUgcHJvcGh5bGF4aXMgKFByRVApIHRlbm9mb3ZpciBkaXNvcHJveGlsIGZ1bWFyYXRlIChUREYpCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJUZW5vZm92aXIgZGlzb3Byb3hpbCBmdW1hcmF0ZSBUREYgYWxsZXJneSBvciBjb250cmFpbmRpY2F0aW9uIjoKICBleGlzdHMgIlRlbm9mb3ZpciBkaXNvcHJveGlsIGZ1bWFyYXRlIFRERiBhbGxlcmd5IG9yIGNvbnRyYWluZGljYXRpb24gQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJUZW5vZm92aXIgZGlzb3Byb3hpbCBmdW1hcmF0ZSBUREYgYWxsZXJneSBvciBjb250cmFpbmRpY2F0aW9uIE9ic2VydmF0aW9uIgpkZWZpbmUgIlRlbm9mb3ZpciBkaXNvcHJveGlsIGZ1bWFyYXRlIFRERiBhbGxlcmd5IG9yIGNvbnRyYWluZGljYXRpb24gQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iVGVub2ZvdmlyIGRpc29wcm94aWwgZnVtYXJhdGUgVERGIGFsbGVyZ3kgb3IgY29udHJhaW5kaWNhdGlvbiBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIlRlbm9mb3ZpciBkaXNvcHJveGlsIGZ1bWFyYXRlIFRERiBhbGxlcmd5IG9yIGNvbnRyYWluZGljYXRpb24gT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJUZW5vZm92aXIgZGlzb3Byb3hpbCBmdW1hcmF0ZSBUREYgYWxsZXJneSBvciBjb250cmFpbmRpY2F0aW9uIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgVGVub2ZvdmlyIGRpc29wcm94aWwgZnVtYXJhdGUgVERGIGFsbGVyZ3kgb3IgY29udHJhaW5kaWNhdGlvbiAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuQy5ERTExNCAtIEhJVi1wb3NpdGl2ZQpAYWN0aXZpdHk6IEhJVi5DMjMgUHJlc2NyaWJlIG9yIGFkbWluaXN0ZXIgUHJFUCBvciBQRVAKQGRlc2NyaXB0aW9uOiBDbGllbnQgaXMgSElWLXBvc2l0aXZlCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJISVYtcG9zaXRpdmUgQy5ERTExNCI6CiAgZXhpc3RzICJISVYtcG9zaXRpdmUgQy5ERTExNCBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIkhJVi1wb3NpdGl2ZSBDLkRFMTE0IE9ic2VydmF0aW9uIgpkZWZpbmUgIkhJVi1wb3NpdGl2ZSBDLkRFMTE0IENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIkhJVi1wb3NpdGl2ZSBDLkRFMTE0IENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiSElWLXBvc2l0aXZlIEMuREUxMTQgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJISVYtcG9zaXRpdmUgQy5ERTExNCBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIEhJVi1wb3NpdGl2ZSBDLkRFMTE0ICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5DLkRFMTE1IC0gTG93IGVzdGltYXRlZCBjcmVhdGluaW5lIGNsZWFyYW5jZQpAYWN0aXZpdHk6IEhJVi5DMjMgUHJlc2NyaWJlIG9yIGFkbWluaXN0ZXIgUHJFUCBvciBQRVAKQGRlc2NyaXB0aW9uOiBFc3RpbWF0ZWQgY3JlYXRpbmluZSBjbGVhcmFuY2Ugb2YgbGVzcyB0aGFuIDYwIG1sL21pbiAoaWYga25vd24pCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJMb3cgZXN0aW1hdGVkIGNyZWF0aW5pbmUgY2xlYXJhbmNlIjoKICBleGlzdHMgIkxvdyBlc3RpbWF0ZWQgY3JlYXRpbmluZSBjbGVhcmFuY2UgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJMb3cgZXN0aW1hdGVkIGNyZWF0aW5pbmUgY2xlYXJhbmNlIE9ic2VydmF0aW9uIgpkZWZpbmUgIkxvdyBlc3RpbWF0ZWQgY3JlYXRpbmluZSBjbGVhcmFuY2UgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iTG93IGVzdGltYXRlZCBjcmVhdGluaW5lIGNsZWFyYW5jZSBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIkxvdyBlc3RpbWF0ZWQgY3JlYXRpbmluZSBjbGVhcmFuY2UgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJMb3cgZXN0aW1hdGVkIGNyZWF0aW5pbmUgY2xlYXJhbmNlIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgTG93IGVzdGltYXRlZCBjcmVhdGluaW5lIGNsZWFyYW5jZSAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuQy5ERTExNiAtIEFjdXRlIEhJViBpbmZlY3Rpb24gc3ltcHRvbXMKQGFjdGl2aXR5OiBISVYuQzIzIFByZXNjcmliZSBvciBhZG1pbmlzdGVyIFByRVAgb3IgUEVQCkBkZXNjcmlwdGlvbjogU3ltcHRvbXMgdGhhdCBjb3VsZCBzdWdnZXN0IGFuIGFjdXRlIEhJViBpbmZlY3Rpb24KKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkFjdXRlIEhJViBpbmZlY3Rpb24gc3ltcHRvbXMgQy5ERTExNiI6CiAgZXhpc3RzICJBY3V0ZSBISVYgaW5mZWN0aW9uIHN5bXB0b21zIEMuREUxMTYgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJBY3V0ZSBISVYgaW5mZWN0aW9uIHN5bXB0b21zIEMuREUxMTYgT2JzZXJ2YXRpb24iCmRlZmluZSAiQWN1dGUgSElWIGluZmVjdGlvbiBzeW1wdG9tcyBDLkRFMTE2IENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIkFjdXRlIEhJViBpbmZlY3Rpb24gc3ltcHRvbXMgQy5ERTExNiBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIkFjdXRlIEhJViBpbmZlY3Rpb24gc3ltcHRvbXMgQy5ERTExNiBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkFjdXRlIEhJViBpbmZlY3Rpb24gc3ltcHRvbXMgQy5ERTExNiBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIEFjdXRlIEhJViBpbmZlY3Rpb24gc3ltcHRvbXMgQy5ERTExNiAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuQy5ERTExNyAtIFByb2JhYmxlIHJlY2VudCBleHBvc3VyZSB0byBISVYKQGFjdGl2aXR5OiBISVYuQzIzIFByZXNjcmliZSBvciBhZG1pbmlzdGVyIFByRVAgb3IgUEVQCkBkZXNjcmlwdGlvbjogV2hlbiB0aGUgY2xpZW50IGlzIHJlcG9ydGVkIHRvIGhhdmUgaGFkIHByb2JhYmxlIHJlY2VudCBleHBvc3VyZSB0byBISVYKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIlByb2JhYmxlIHJlY2VudCBleHBvc3VyZSB0byBISVYiOgogIGV4aXN0cyAiUHJvYmFibGUgcmVjZW50IGV4cG9zdXJlIHRvIEhJViBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIlByb2JhYmxlIHJlY2VudCBleHBvc3VyZSB0byBISVYgT2JzZXJ2YXRpb24iCmRlZmluZSAiUHJvYmFibGUgcmVjZW50IGV4cG9zdXJlIHRvIEhJViBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJQcm9iYWJsZSByZWNlbnQgZXhwb3N1cmUgdG8gSElWIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiUHJvYmFibGUgcmVjZW50IGV4cG9zdXJlIHRvIEhJViBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIlByb2JhYmxlIHJlY2VudCBleHBvc3VyZSB0byBISVYgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBQcm9iYWJsZSByZWNlbnQgZXhwb3N1cmUgdG8gSElWICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5DLkRFMTE4IC0gT3RoZXIgYWxsZXJneSBvciBjb250cmFpbmRpY2F0aW9uIHRvIGEgbWVkaWNpbmUgaW4gdGhlIFByRVAgcmVnaW1lbgpAYWN0aXZpdHk6IEhJVi5DMjMgUHJlc2NyaWJlIG9yIGFkbWluaXN0ZXIgUHJFUCBvciBQRVAKQGRlc2NyaXB0aW9uOiBDbGllbnQgaGFzIGFub3RoZXIgYWxsZXJneSBvciBjb250cmFpbmRpY2F0aW9uIHRvIGEgbWVkaWNpbmUgaW4gdGhlIHByZS1leHBvc3VyZSBwcm9waHlsYXhpcyAoUHJFUCkgcmVnaW1lbgoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiT3RoZXIgYWxsZXJneSBvciBjb250cmFpbmRpY2F0aW9uIHRvIGEgbWVkaWNpbmUgaW4gdGhlIFByRVAgcmVnaW1lbiI6CiAgZXhpc3RzICJPdGhlciBhbGxlcmd5IG9yIGNvbnRyYWluZGljYXRpb24gdG8gYSBtZWRpY2luZSBpbiB0aGUgUHJFUCByZWdpbWVuIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiT3RoZXIgYWxsZXJneSBvciBjb250cmFpbmRpY2F0aW9uIHRvIGEgbWVkaWNpbmUgaW4gdGhlIFByRVAgcmVnaW1lbiBPYnNlcnZhdGlvbiIKZGVmaW5lICJPdGhlciBhbGxlcmd5IG9yIGNvbnRyYWluZGljYXRpb24gdG8gYSBtZWRpY2luZSBpbiB0aGUgUHJFUCByZWdpbWVuIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIk90aGVyIGFsbGVyZ3kgb3IgY29udHJhaW5kaWNhdGlvbiB0byBhIG1lZGljaW5lIGluIHRoZSBQckVQIHJlZ2ltZW4gQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJPdGhlciBhbGxlcmd5IG9yIGNvbnRyYWluZGljYXRpb24gdG8gYSBtZWRpY2luZSBpbiB0aGUgUHJFUCByZWdpbWVuIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iT3RoZXIgYWxsZXJneSBvciBjb250cmFpbmRpY2F0aW9uIHRvIGEgbWVkaWNpbmUgaW4gdGhlIFByRVAgcmVnaW1lbiBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIE90aGVyIGFsbGVyZ3kgb3IgY29udHJhaW5kaWNhdGlvbiB0byBhIG1lZGljaW5lIGluIHRoZSBQckVQIHJlZ2ltZW4gKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkMuREUxMjMgLSBBZGhlcmVuY2UgY291bnNlbGxpbmcgcHJvdmlkZWQKQGFjdGl2aXR5OiBISVYuQzIzIFByZXNjcmliZSBvciBhZG1pbmlzdGVyIFByRVAgb3IgUEVQCkBkZXNjcmlwdGlvbjogV2hldGhlciBhZGhlcmVuY2UgY291bnNlbGxpbmcgd2FzIHByb3ZpZGVkCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJBZGhlcmVuY2UgY291bnNlbGxpbmcgcHJvdmlkZWQgQy5ERTEyMyI6CiAgZXhpc3RzICJBZGhlcmVuY2UgY291bnNlbGxpbmcgcHJvdmlkZWQgQy5ERTEyMyBPYnNlcnZhdGlvbiIKZGVmaW5lICJBZGhlcmVuY2UgY291bnNlbGxpbmcgcHJvdmlkZWQgQy5ERTEyMyBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkFkaGVyZW5jZSBjb3Vuc2VsbGluZyBwcm92aWRlZCBDLkRFMTIzIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgQWRoZXJlbmNlIGNvdW5zZWxsaW5nIHByb3ZpZGVkIEMuREUxMjMgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkMuREUxMjQgLSBEYXRlL3RpbWUgb2YgZm9sbG93LXVwIGFwcG9pbnRtZW50CkBhY3Rpdml0eTogSElWLkMyNCBTY2hlZHVsZSBmb2xsb3ctdXAKQGRlc2NyaXB0aW9uOiBEYXRlIHRoZSBjbGllbnQgaXMgdG8gcmV0dXJuIGZvciBtb25pdG9yaW5nLCByZS1zdXBwbHksIG9yIGFueSBvdGhlciByZWFzb24KKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkRhdGUvdGltZSBvZiBmb2xsb3ctdXAgYXBwb2ludG1lbnQgQy5ERTEyNCI6CiAgRWxlbWVudHMuIkRhdGUvdGltZSBvZiBmb2xsb3ctdXAgYXBwb2ludG1lbnQgQy5ERTEyNCIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJEYXRlL3RpbWUgb2YgZm9sbG93LXVwIGFwcG9pbnRtZW50IEMuREUxMjQgVmFsdWUiOgogICJEYXRlL3RpbWUgb2YgZm9sbG93LXVwIGFwcG9pbnRtZW50IEMuREUxMjQiIE8KICByZXR1cm4gTy52YWx1ZQovKiBFbmQgb2YgRGF0ZS90aW1lIG9mIGZvbGxvdy11cCBhcHBvaW50bWVudCBDLkRFMTI0ICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5DLkRFMTI1IC0gVHlwZSBvZiBmb2xsb3ctdXAgYXBwb2ludG1lbnQKQGFjdGl2aXR5OiBISVYuQzI0IFNjaGVkdWxlIGZvbGxvdy11cApAZGVzY3JpcHRpb246IFR5cGUgb2YgZm9sbG93LXVwIGFwcG9pbnRtZW50IGZvciB0ZXN0aW5nIHNlcnZpY2VzCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJUeXBlIG9mIGZvbGxvdy11cCBhcHBvaW50bWVudCBDLkRFMTI1IjoKICBleGlzdHMgIlR5cGUgb2YgZm9sbG93LXVwIGFwcG9pbnRtZW50IEMuREUxMjUgT2JzZXJ2YXRpb24iCmRlZmluZSAiVHlwZSBvZiBmb2xsb3ctdXAgYXBwb2ludG1lbnQgQy5ERTEyNSBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIlR5cGUgb2YgZm9sbG93LXVwIGFwcG9pbnRtZW50IEMuREUxMjUgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBUeXBlIG9mIGZvbGxvdy11cCBhcHBvaW50bWVudCBDLkRFMTI1ICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5DLkRFMTI2IC0gUmV0ZXN0aW5nIGZvciBISVYKQGFjdGl2aXR5OiBISVYuQzI0IFNjaGVkdWxlIGZvbGxvdy11cApAZGVzY3JpcHRpb246IFJldGVzdGluZyBmb2xsb3ctdXAgYXBwb2ludG1lbnQKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIlJldGVzdGluZyBmb3IgSElWIEMuREUxMjYiOgogIGV4aXN0cyAiUmV0ZXN0aW5nIGZvciBISVYgQy5ERTEyNiBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIlJldGVzdGluZyBmb3IgSElWIEMuREUxMjYgT2JzZXJ2YXRpb24iCmRlZmluZSAiUmV0ZXN0aW5nIGZvciBISVYgQy5ERTEyNiBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJSZXRlc3RpbmcgZm9yIEhJViBDLkRFMTI2IENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiUmV0ZXN0aW5nIGZvciBISVYgQy5ERTEyNiBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIlJldGVzdGluZyBmb3IgSElWIEMuREUxMjYgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBSZXRlc3RpbmcgZm9yIEhJViBDLkRFMTI2ICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5DLkRFMTI3IC0gRm9sbG93LXVwIGFwcG9pbnRtZW50IGZvciBQckVQCkBhY3Rpdml0eTogSElWLkMyNCBTY2hlZHVsZSBmb2xsb3ctdXAKQGRlc2NyaXB0aW9uOiBSZXRlc3RpbmcgZm9sbG93LXVwIGFwcG9pbnRtZW50CiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJGb2xsb3ctdXAgYXBwb2ludG1lbnQgZm9yIFByRVAiOgogIGV4aXN0cyAiRm9sbG93LXVwIGFwcG9pbnRtZW50IGZvciBQckVQIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiRm9sbG93LXVwIGFwcG9pbnRtZW50IGZvciBQckVQIE9ic2VydmF0aW9uIgpkZWZpbmUgIkZvbGxvdy11cCBhcHBvaW50bWVudCBmb3IgUHJFUCBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJGb2xsb3ctdXAgYXBwb2ludG1lbnQgZm9yIFByRVAgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJGb2xsb3ctdXAgYXBwb2ludG1lbnQgZm9yIFByRVAgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJGb2xsb3ctdXAgYXBwb2ludG1lbnQgZm9yIFByRVAgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBGb2xsb3ctdXAgYXBwb2ludG1lbnQgZm9yIFByRVAgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkMuREUxMjggLSBPdGhlcgpAYWN0aXZpdHk6IEhJVi5DMjQgU2NoZWR1bGUgZm9sbG93LXVwCkBkZXNjcmlwdGlvbjogT3RoZXIgcmVhc29uIGZvciB0aGUgZm9sbG93LXVwIGFwcG9pbnRtZW50CiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJPdGhlciBDLkRFMTI4IjoKICBleGlzdHMgIk90aGVyIEMuREUxMjggQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJPdGhlciBDLkRFMTI4IE9ic2VydmF0aW9uIgpkZWZpbmUgIk90aGVyIEMuREUxMjggQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iT3RoZXIgQy5ERTEyOCBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIk90aGVyIEMuREUxMjggT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJPdGhlciBDLkRFMTI4IE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgT3RoZXIgQy5ERTEyOCAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuQy5ERTEzMSAtIFByZXZlbnRpb24gc2VydmljZXMgb2ZmZXJlZCBhbmQgcmVmZXJyYWxzCkBhY3Rpdml0eTogSElWLkMxMCBDb3Vuc2VsIG9uIHJpc2sgYW5kIHByZXZlbnRpb24KQGRlc2NyaXB0aW9uOiBPZmZlciBvciByZWZlciB0byBwcmV2ZW50aW9uIHNlcnZpY2VzCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJQcmV2ZW50aW9uIHNlcnZpY2VzIG9mZmVyZWQgYW5kIHJlZmVycmFscyBDLkRFMTMxIjoKICBleGlzdHMgIlByZXZlbnRpb24gc2VydmljZXMgb2ZmZXJlZCBhbmQgcmVmZXJyYWxzIEMuREUxMzEgT2JzZXJ2YXRpb24iCmRlZmluZSAiUHJldmVudGlvbiBzZXJ2aWNlcyBvZmZlcmVkIGFuZCByZWZlcnJhbHMgQy5ERTEzMSBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIlByZXZlbnRpb24gc2VydmljZXMgb2ZmZXJlZCBhbmQgcmVmZXJyYWxzIEMuREUxMzEgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBQcmV2ZW50aW9uIHNlcnZpY2VzIG9mZmVyZWQgYW5kIHJlZmVycmFscyBDLkRFMTMxICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5DLkRFMTMyIC0gTWFsZSBhbmQgZmVtYWxlIGNvbmRvbXMgYW5kIGNvbmRvbS1jb21wYXRpYmxlIGx1YnJpY2FudHMgb2ZmZXJlZApAYWN0aXZpdHk6IEhJVi5DMTAgQ291bnNlbCBvbiByaXNrIGFuZCBwcmV2ZW50aW9uCkBkZXNjcmlwdGlvbjogT2ZmZXIgbWFsZSBhbmQgZmVtYWxlIGNvbmRvbXMgYW5kIGNvbmRvbS1jb21wYXRpYmxlIGx1YnJpY2FudHMKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIk1hbGUgYW5kIGZlbWFsZSBjb25kb21zIGFuZCBjb25kb20tY29tcGF0aWJsZSBsdWJyaWNhbnRzIG9mZmVyZWQiOgogIGV4aXN0cyAiTWFsZSBhbmQgZmVtYWxlIGNvbmRvbXMgYW5kIGNvbmRvbS1jb21wYXRpYmxlIGx1YnJpY2FudHMgb2ZmZXJlZCBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIk1hbGUgYW5kIGZlbWFsZSBjb25kb21zIGFuZCBjb25kb20tY29tcGF0aWJsZSBsdWJyaWNhbnRzIG9mZmVyZWQgT2JzZXJ2YXRpb24iCmRlZmluZSAiTWFsZSBhbmQgZmVtYWxlIGNvbmRvbXMgYW5kIGNvbmRvbS1jb21wYXRpYmxlIGx1YnJpY2FudHMgb2ZmZXJlZCBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJNYWxlIGFuZCBmZW1hbGUgY29uZG9tcyBhbmQgY29uZG9tLWNvbXBhdGlibGUgbHVicmljYW50cyBvZmZlcmVkIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiTWFsZSBhbmQgZmVtYWxlIGNvbmRvbXMgYW5kIGNvbmRvbS1jb21wYXRpYmxlIGx1YnJpY2FudHMgb2ZmZXJlZCBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIk1hbGUgYW5kIGZlbWFsZSBjb25kb21zIGFuZCBjb25kb20tY29tcGF0aWJsZSBsdWJyaWNhbnRzIG9mZmVyZWQgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBNYWxlIGFuZCBmZW1hbGUgY29uZG9tcyBhbmQgY29uZG9tLWNvbXBhdGlibGUgbHVicmljYW50cyBvZmZlcmVkICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5DLkRFMTMzIC0gVm9sdW50YXJ5IG1lZGljYWwgbWFsZSBjaXJjdW1jaXNpb24gVk1NQyByZWZlcnJhbApAYWN0aXZpdHk6IEhJVi5DMTAgQ291bnNlbCBvbiByaXNrIGFuZCBwcmV2ZW50aW9uCkBkZXNjcmlwdGlvbjogT2ZmZXIgcmVmZXJyYWwgZm9yIFZNTUMgc2VydmljZXMKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIlZvbHVudGFyeSBtZWRpY2FsIG1hbGUgY2lyY3VtY2lzaW9uIFZNTUMgcmVmZXJyYWwiOgogIGV4aXN0cyAiVm9sdW50YXJ5IG1lZGljYWwgbWFsZSBjaXJjdW1jaXNpb24gVk1NQyByZWZlcnJhbCBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIlZvbHVudGFyeSBtZWRpY2FsIG1hbGUgY2lyY3VtY2lzaW9uIFZNTUMgcmVmZXJyYWwgT2JzZXJ2YXRpb24iCmRlZmluZSAiVm9sdW50YXJ5IG1lZGljYWwgbWFsZSBjaXJjdW1jaXNpb24gVk1NQyByZWZlcnJhbCBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJWb2x1bnRhcnkgbWVkaWNhbCBtYWxlIGNpcmN1bWNpc2lvbiBWTU1DIHJlZmVycmFsIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiVm9sdW50YXJ5IG1lZGljYWwgbWFsZSBjaXJjdW1jaXNpb24gVk1NQyByZWZlcnJhbCBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIlZvbHVudGFyeSBtZWRpY2FsIG1hbGUgY2lyY3VtY2lzaW9uIFZNTUMgcmVmZXJyYWwgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBWb2x1bnRhcnkgbWVkaWNhbCBtYWxlIGNpcmN1bWNpc2lvbiBWTU1DIHJlZmVycmFsICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5DLkRFMTM0IC0gSGFybSByZWR1Y3Rpb24gZm9yIHBlb3BsZSB3aG8gaW5qZWN0IGRydWdzCkBhY3Rpdml0eTogSElWLkMxMCBDb3Vuc2VsIG9uIHJpc2sgYW5kIHByZXZlbnRpb24KQGRlc2NyaXB0aW9uOiBPZmZlciBvciByZWZlciB0byBoYXJtIHJlZHVjdGlvbiBmb3IgcGVvcGxlIHdobyBpbmplY3QgZHJ1Z3MgKG5lZWRsZSBhbmQgc3lyaW5nZSBwcm9ncmFtbWVzLCBvcGlvaWQgc3Vic3RpdHV0aW9uIHRoZXJhcHksIG90aGVyIGRydWctZGVwZW5kZW5jZSB0cmVhdG1lbnQgYW5kIG9waW9pZCBvdmVyZG9zZSBwcmV2ZW50aW9uIGFuZCBtYW5hZ2VtZW50KSBzZXJ2aWNlcwoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiSGFybSByZWR1Y3Rpb24gZm9yIHBlb3BsZSB3aG8gaW5qZWN0IGRydWdzIEMuREUxMzQiOgogIGV4aXN0cyAiSGFybSByZWR1Y3Rpb24gZm9yIHBlb3BsZSB3aG8gaW5qZWN0IGRydWdzIEMuREUxMzQgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJIYXJtIHJlZHVjdGlvbiBmb3IgcGVvcGxlIHdobyBpbmplY3QgZHJ1Z3MgQy5ERTEzNCBPYnNlcnZhdGlvbiIKZGVmaW5lICJIYXJtIHJlZHVjdGlvbiBmb3IgcGVvcGxlIHdobyBpbmplY3QgZHJ1Z3MgQy5ERTEzNCBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJIYXJtIHJlZHVjdGlvbiBmb3IgcGVvcGxlIHdobyBpbmplY3QgZHJ1Z3MgQy5ERTEzNCBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIkhhcm0gcmVkdWN0aW9uIGZvciBwZW9wbGUgd2hvIGluamVjdCBkcnVncyBDLkRFMTM0IE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iSGFybSByZWR1Y3Rpb24gZm9yIHBlb3BsZSB3aG8gaW5qZWN0IGRydWdzIEMuREUxMzQgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBIYXJtIHJlZHVjdGlvbiBmb3IgcGVvcGxlIHdobyBpbmplY3QgZHJ1Z3MgQy5ERTEzNCAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuQy5ERTEzNSAtIEJlaGF2aW91cmFsIGludGVydmVudGlvbnMgdG8gc3VwcG9ydCByaXNrIHJlZHVjdGlvbgpAYWN0aXZpdHk6IEhJVi5DMTAgQ291bnNlbCBvbiByaXNrIGFuZCBwcmV2ZW50aW9uCkBkZXNjcmlwdGlvbjogT2ZmZXIgb3IgcmVmZXIgdG8gc2VydmljZXMgZm9yIGJlaGF2aW91cmFsIGludGVydmVudGlvbnMgdG8gc3VwcG9ydCByaXNrIHJlZHVjdGlvbiwgcGFydGljdWxhcmx5IGZvciBwZW9wbGUgd2l0aCBISVYgYW5kIG1lbWJlcnMgb2Yga2V5IHBvcHVsYXRpb25zCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJCZWhhdmlvdXJhbCBpbnRlcnZlbnRpb25zIHRvIHN1cHBvcnQgcmlzayByZWR1Y3Rpb24gQy5ERTEzNSI6CiAgZXhpc3RzICJCZWhhdmlvdXJhbCBpbnRlcnZlbnRpb25zIHRvIHN1cHBvcnQgcmlzayByZWR1Y3Rpb24gQy5ERTEzNSBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIkJlaGF2aW91cmFsIGludGVydmVudGlvbnMgdG8gc3VwcG9ydCByaXNrIHJlZHVjdGlvbiBDLkRFMTM1IE9ic2VydmF0aW9uIgpkZWZpbmUgIkJlaGF2aW91cmFsIGludGVydmVudGlvbnMgdG8gc3VwcG9ydCByaXNrIHJlZHVjdGlvbiBDLkRFMTM1IENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIkJlaGF2aW91cmFsIGludGVydmVudGlvbnMgdG8gc3VwcG9ydCByaXNrIHJlZHVjdGlvbiBDLkRFMTM1IENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiQmVoYXZpb3VyYWwgaW50ZXJ2ZW50aW9ucyB0byBzdXBwb3J0IHJpc2sgcmVkdWN0aW9uIEMuREUxMzUgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJCZWhhdmlvdXJhbCBpbnRlcnZlbnRpb25zIHRvIHN1cHBvcnQgcmlzayByZWR1Y3Rpb24gQy5ERTEzNSBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIEJlaGF2aW91cmFsIGludGVydmVudGlvbnMgdG8gc3VwcG9ydCByaXNrIHJlZHVjdGlvbiBDLkRFMTM1ICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5DLkRFMTQ5IC0gU2V4dWFsIGFuZCByZXByb2R1Y3RpdmUgaGVhbHRoIGludGVncmF0ZWQgc2VydmljZXMKQGFjdGl2aXR5OiBISVYuQzEwIENvdW5zZWwgb24gcmlzayBhbmQgcHJldmVudGlvbgpAZGVzY3JpcHRpb246IE9mZmVyIG9yIHJlZmVyIHRvIHNleHVhbCBhbmQgcmVwcm9kdWN0aXZlIGhlYWx0aCBzZXJ2aWNlcwoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiU2V4dWFsIGFuZCByZXByb2R1Y3RpdmUgaGVhbHRoIGludGVncmF0ZWQgc2VydmljZXMgQy5ERTE0OSI6CiAgZXhpc3RzICJTZXh1YWwgYW5kIHJlcHJvZHVjdGl2ZSBoZWFsdGggaW50ZWdyYXRlZCBzZXJ2aWNlcyBDLkRFMTQ5IE9ic2VydmF0aW9uIgpkZWZpbmUgIlNleHVhbCBhbmQgcmVwcm9kdWN0aXZlIGhlYWx0aCBpbnRlZ3JhdGVkIHNlcnZpY2VzIEMuREUxNDkgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJTZXh1YWwgYW5kIHJlcHJvZHVjdGl2ZSBoZWFsdGggaW50ZWdyYXRlZCBzZXJ2aWNlcyBDLkRFMTQ5IE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgU2V4dWFsIGFuZCByZXByb2R1Y3RpdmUgaGVhbHRoIGludGVncmF0ZWQgc2VydmljZXMgQy5ERTE0OSAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuQy5ERTE1MCAtIENvbnRyYWNlcHRpb24gYW5kIGZhbWlseSBwbGFubmluZwpAYWN0aXZpdHk6IEhJVi5DMTAgQ291bnNlbCBvbiByaXNrIGFuZCBwcmV2ZW50aW9uCkBkZXNjcmlwdGlvbjogT2ZmZXIgY29udHJhY2VwdGlvbiBhbmQgZmFtaWx5IHBsYW5uaW5nIHNlcnZpY2VzCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJDb250cmFjZXB0aW9uIGFuZCBmYW1pbHkgcGxhbm5pbmcgQy5ERTE1MCI6CiAgZXhpc3RzICJDb250cmFjZXB0aW9uIGFuZCBmYW1pbHkgcGxhbm5pbmcgQy5ERTE1MCBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIkNvbnRyYWNlcHRpb24gYW5kIGZhbWlseSBwbGFubmluZyBDLkRFMTUwIE9ic2VydmF0aW9uIgpkZWZpbmUgIkNvbnRyYWNlcHRpb24gYW5kIGZhbWlseSBwbGFubmluZyBDLkRFMTUwIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIkNvbnRyYWNlcHRpb24gYW5kIGZhbWlseSBwbGFubmluZyBDLkRFMTUwIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiQ29udHJhY2VwdGlvbiBhbmQgZmFtaWx5IHBsYW5uaW5nIEMuREUxNTAgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJDb250cmFjZXB0aW9uIGFuZCBmYW1pbHkgcGxhbm5pbmcgQy5ERTE1MCBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIENvbnRyYWNlcHRpb24gYW5kIGZhbWlseSBwbGFubmluZyBDLkRFMTUwICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5DLkRFMTUxIC0gQ2hlY2sgcHJlZ25hbmN5IHN0YXR1cwpAYWN0aXZpdHk6IEhJVi5DMTAgQ291bnNlbCBvbiByaXNrIGFuZCBwcmV2ZW50aW9uCkBkZXNjcmlwdGlvbjogQ2hlY2sgd29tYW4ncyBwcmVnbmFuY3kgc3RhdHVzCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJDaGVjayBwcmVnbmFuY3kgc3RhdHVzIEMuREUxNTEiOgogIGV4aXN0cyAiQ2hlY2sgcHJlZ25hbmN5IHN0YXR1cyBDLkRFMTUxIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiQ2hlY2sgcHJlZ25hbmN5IHN0YXR1cyBDLkRFMTUxIE9ic2VydmF0aW9uIgpkZWZpbmUgIkNoZWNrIHByZWduYW5jeSBzdGF0dXMgQy5ERTE1MSBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJDaGVjayBwcmVnbmFuY3kgc3RhdHVzIEMuREUxNTEgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJDaGVjayBwcmVnbmFuY3kgc3RhdHVzIEMuREUxNTEgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJDaGVjayBwcmVnbmFuY3kgc3RhdHVzIEMuREUxNTEgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBDaGVjayBwcmVnbmFuY3kgc3RhdHVzIEMuREUxNTEgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkMuREUxNTIgLSBQcmV2ZW50IG1vdGhlci10by1jaGlsZCB0cmFuc21pc3Npb24KQGFjdGl2aXR5OiBISVYuQzEwIENvdW5zZWwgb24gcmlzayBhbmQgcHJldmVudGlvbgpAZGVzY3JpcHRpb246IE9mZmVyIHNlcnZpY2VzIChjb3Vuc2VsbGluZykgdG8gaGVscCBwcmV2ZW50IG9mIG1vdGhlci10by1jaGlsZCB0cmFuc21pc3Npb24KKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIlByZXZlbnQgbW90aGVyLXRvLWNoaWxkIHRyYW5zbWlzc2lvbiI6CiAgZXhpc3RzICJQcmV2ZW50IG1vdGhlci10by1jaGlsZCB0cmFuc21pc3Npb24gQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJQcmV2ZW50IG1vdGhlci10by1jaGlsZCB0cmFuc21pc3Npb24gT2JzZXJ2YXRpb24iCmRlZmluZSAiUHJldmVudCBtb3RoZXItdG8tY2hpbGQgdHJhbnNtaXNzaW9uIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIlByZXZlbnQgbW90aGVyLXRvLWNoaWxkIHRyYW5zbWlzc2lvbiBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIlByZXZlbnQgbW90aGVyLXRvLWNoaWxkIHRyYW5zbWlzc2lvbiBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIlByZXZlbnQgbW90aGVyLXRvLWNoaWxkIHRyYW5zbWlzc2lvbiBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIFByZXZlbnQgbW90aGVyLXRvLWNoaWxkIHRyYW5zbWlzc2lvbiAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuQy5ERTE1MyAtIENlcnZpY2FsIGNhbmNlciBzY3JlZW5pbmcgYW5kIHRyZWF0bWVudApAYWN0aXZpdHk6IEhJVi5DMTAgQ291bnNlbCBvbiByaXNrIGFuZCBwcmV2ZW50aW9uCkBkZXNjcmlwdGlvbjogT2ZmZXIgY2VydmljYWwgY2FuY2VyIHNjcmVlbmluZyBhbmQgdHJlYXRtZW50IHNlcnZpY2VzCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJDZXJ2aWNhbCBjYW5jZXIgc2NyZWVuaW5nIGFuZCB0cmVhdG1lbnQiOgogIGV4aXN0cyAiQ2VydmljYWwgY2FuY2VyIHNjcmVlbmluZyBhbmQgdHJlYXRtZW50IENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiQ2VydmljYWwgY2FuY2VyIHNjcmVlbmluZyBhbmQgdHJlYXRtZW50IE9ic2VydmF0aW9uIgpkZWZpbmUgIkNlcnZpY2FsIGNhbmNlciBzY3JlZW5pbmcgYW5kIHRyZWF0bWVudCBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJDZXJ2aWNhbCBjYW5jZXIgc2NyZWVuaW5nIGFuZCB0cmVhdG1lbnQgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJDZXJ2aWNhbCBjYW5jZXIgc2NyZWVuaW5nIGFuZCB0cmVhdG1lbnQgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJDZXJ2aWNhbCBjYW5jZXIgc2NyZWVuaW5nIGFuZCB0cmVhdG1lbnQgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBDZXJ2aWNhbCBjYW5jZXIgc2NyZWVuaW5nIGFuZCB0cmVhdG1lbnQgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkMuREUxNTQgLSBBbmFsIGNhbmNlciBzY3JlZW5pbmcgZm9yIG1lbiB3aG8gaGF2ZSBzZXggd2l0aCBtZW4KQGFjdGl2aXR5OiBISVYuQzEwIENvdW5zZWwgb24gcmlzayBhbmQgcHJldmVudGlvbgpAZGVzY3JpcHRpb246IE9mZmVyIGFuYWwgY2FuY2VyIHNjcmVlbmluZyAoZm9yIG1lbiB3aG8gaGF2ZSBzZXggd2l0aCBtZW4pIHNlcnZpY2VzCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJBbmFsIGNhbmNlciBzY3JlZW5pbmcgZm9yIG1lbiB3aG8gaGF2ZSBzZXggd2l0aCBtZW4gQy5ERTE1NCI6CiAgZXhpc3RzICJBbmFsIGNhbmNlciBzY3JlZW5pbmcgZm9yIG1lbiB3aG8gaGF2ZSBzZXggd2l0aCBtZW4gQy5ERTE1NCBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIkFuYWwgY2FuY2VyIHNjcmVlbmluZyBmb3IgbWVuIHdobyBoYXZlIHNleCB3aXRoIG1lbiBDLkRFMTU0IE9ic2VydmF0aW9uIgpkZWZpbmUgIkFuYWwgY2FuY2VyIHNjcmVlbmluZyBmb3IgbWVuIHdobyBoYXZlIHNleCB3aXRoIG1lbiBDLkRFMTU0IENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIkFuYWwgY2FuY2VyIHNjcmVlbmluZyBmb3IgbWVuIHdobyBoYXZlIHNleCB3aXRoIG1lbiBDLkRFMTU0IENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiQW5hbCBjYW5jZXIgc2NyZWVuaW5nIGZvciBtZW4gd2hvIGhhdmUgc2V4IHdpdGggbWVuIEMuREUxNTQgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJBbmFsIGNhbmNlciBzY3JlZW5pbmcgZm9yIG1lbiB3aG8gaGF2ZSBzZXggd2l0aCBtZW4gQy5ERTE1NCBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIEFuYWwgY2FuY2VyIHNjcmVlbmluZyBmb3IgbWVuIHdobyBoYXZlIHNleCB3aXRoIG1lbiBDLkRFMTU0ICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5DLkRFMTU1IC0gU1RJIHRlc3RpbmcgYW5kIHRyZWF0bWVudApAYWN0aXZpdHk6IEhJVi5DMTAgQ291bnNlbCBvbiByaXNrIGFuZCBwcmV2ZW50aW9uCkBkZXNjcmlwdGlvbjogT2ZmZXIgU1RJIHRlc3RpbmcgYW5kIHRyZWF0bWVudCBzZXJ2aWNlcwoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiU1RJIHRlc3RpbmcgYW5kIHRyZWF0bWVudCBDLkRFMTU1IjoKICBleGlzdHMgIlNUSSB0ZXN0aW5nIGFuZCB0cmVhdG1lbnQgQy5ERTE1NSBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIlNUSSB0ZXN0aW5nIGFuZCB0cmVhdG1lbnQgQy5ERTE1NSBPYnNlcnZhdGlvbiIKZGVmaW5lICJTVEkgdGVzdGluZyBhbmQgdHJlYXRtZW50IEMuREUxNTUgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iU1RJIHRlc3RpbmcgYW5kIHRyZWF0bWVudCBDLkRFMTU1IENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiU1RJIHRlc3RpbmcgYW5kIHRyZWF0bWVudCBDLkRFMTU1IE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iU1RJIHRlc3RpbmcgYW5kIHRyZWF0bWVudCBDLkRFMTU1IE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgU1RJIHRlc3RpbmcgYW5kIHRyZWF0bWVudCBDLkRFMTU1ICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5DLkRFMTU2IC0gSElWIHRlc3RpbmcgZm9yIHBhcnRuZXJzIGFuZCBiaW9sb2dpY2FsIGNoaWxkcmVuCkBhY3Rpdml0eTogSElWLkMxMCBDb3Vuc2VsIG9uIHJpc2sgYW5kIHByZXZlbnRpb24KQGRlc2NyaXB0aW9uOiBPZmZlciB0ZXN0aW5nIGZvciBhbGwgcGFydG5lcnMgYW5kIGJpb2xvZ2ljYWwgY2hpbGRyZW4gb2YgcG9zaXRpdmUgY2FzZXMgKGluY2x1ZGVzIHBhcnRuZXIgc2VydmljZXMgYW5kIGluZGV4IGNhc2UgdGVzdGluZyksIGFzIHdlbGwgYXMgcGFydG5lcnMgYW5kIHNvY2lhbCBjb250YWN0cyBvZiBwZW9wbGUgZnJvbSBrZXkgcG9wdWxhdGlvbnMsIHdoZXJlIGFwcHJvcHJpYXRlCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJISVYgdGVzdGluZyBmb3IgcGFydG5lcnMgYW5kIGJpb2xvZ2ljYWwgY2hpbGRyZW4gQy5ERTE1NiI6CiAgZXhpc3RzICJISVYgdGVzdGluZyBmb3IgcGFydG5lcnMgYW5kIGJpb2xvZ2ljYWwgY2hpbGRyZW4gQy5ERTE1NiBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIkhJViB0ZXN0aW5nIGZvciBwYXJ0bmVycyBhbmQgYmlvbG9naWNhbCBjaGlsZHJlbiBDLkRFMTU2IE9ic2VydmF0aW9uIgpkZWZpbmUgIkhJViB0ZXN0aW5nIGZvciBwYXJ0bmVycyBhbmQgYmlvbG9naWNhbCBjaGlsZHJlbiBDLkRFMTU2IENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIkhJViB0ZXN0aW5nIGZvciBwYXJ0bmVycyBhbmQgYmlvbG9naWNhbCBjaGlsZHJlbiBDLkRFMTU2IENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiSElWIHRlc3RpbmcgZm9yIHBhcnRuZXJzIGFuZCBiaW9sb2dpY2FsIGNoaWxkcmVuIEMuREUxNTYgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJISVYgdGVzdGluZyBmb3IgcGFydG5lcnMgYW5kIGJpb2xvZ2ljYWwgY2hpbGRyZW4gQy5ERTE1NiBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIEhJViB0ZXN0aW5nIGZvciBwYXJ0bmVycyBhbmQgYmlvbG9naWNhbCBjaGlsZHJlbiBDLkRFMTU2ICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5DLkRFMTU3IC0gT2ZmZXIgb3RoZXIgY2xpbmljYWwgc2VydmljZXMKQGFjdGl2aXR5OiBISVYuQzEwIENvdW5zZWwgb24gcmlzayBhbmQgcHJldmVudGlvbgpAZGVzY3JpcHRpb246IE90aGVyIGNsaW5pY2FsIHNlcnZpY2VzIG9mZmVyZWQgb3IgcmVmZXJyYWxzIGdpdmVuIHRvIHRoZSBjbGllbnQKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIk9mZmVyIG90aGVyIGNsaW5pY2FsIHNlcnZpY2VzIEMuREUxNTciOgogIGV4aXN0cyAiT2ZmZXIgb3RoZXIgY2xpbmljYWwgc2VydmljZXMgQy5ERTE1NyBPYnNlcnZhdGlvbiIKZGVmaW5lICJPZmZlciBvdGhlciBjbGluaWNhbCBzZXJ2aWNlcyBDLkRFMTU3IE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iT2ZmZXIgb3RoZXIgY2xpbmljYWwgc2VydmljZXMgQy5ERTE1NyBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIE9mZmVyIG90aGVyIGNsaW5pY2FsIHNlcnZpY2VzIEMuREUxNTcgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkMuREUxNTggLSBBc3Nlc3NtZW50IGFuZCBwcm92aXNpb24gb2YgdmFjY2luYXRpb25zCkBhY3Rpdml0eTogSElWLkMxMCBDb3Vuc2VsIG9uIHJpc2sgYW5kIHByZXZlbnRpb24KQGRlc2NyaXB0aW9uOiBBc3Nlc3NtZW50IGFuZCBwcm92aXNpb24gb2YgdmFjY2luYXRpb25zLCBzdWNoIGFzIGZvciBwZW9wbGUgZnJvbSBrZXkgcG9wdWxhdGlvbnMsIHByZWduYW50IHdvbWVuIGFuZCBpbmZhbnRzOyBhbmQsIHdoZXJlIGFwcHJvcHJpYXRlLCB0ZXRhbnVzIHZhY2NpbmF0aW9uIGZvciBhZG9sZXNjZW50IGJveXMgYW5kIG1lbiByZWNlaXZpbmcgVk1NQwoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiQXNzZXNzbWVudCBhbmQgcHJvdmlzaW9uIG9mIHZhY2NpbmF0aW9ucyBDLkRFMTU4IjoKICBleGlzdHMgIkFzc2Vzc21lbnQgYW5kIHByb3Zpc2lvbiBvZiB2YWNjaW5hdGlvbnMgQy5ERTE1OCBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIkFzc2Vzc21lbnQgYW5kIHByb3Zpc2lvbiBvZiB2YWNjaW5hdGlvbnMgQy5ERTE1OCBPYnNlcnZhdGlvbiIKZGVmaW5lICJBc3Nlc3NtZW50IGFuZCBwcm92aXNpb24gb2YgdmFjY2luYXRpb25zIEMuREUxNTggQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iQXNzZXNzbWVudCBhbmQgcHJvdmlzaW9uIG9mIHZhY2NpbmF0aW9ucyBDLkRFMTU4IENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiQXNzZXNzbWVudCBhbmQgcHJvdmlzaW9uIG9mIHZhY2NpbmF0aW9ucyBDLkRFMTU4IE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iQXNzZXNzbWVudCBhbmQgcHJvdmlzaW9uIG9mIHZhY2NpbmF0aW9ucyBDLkRFMTU4IE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgQXNzZXNzbWVudCBhbmQgcHJvdmlzaW9uIG9mIHZhY2NpbmF0aW9ucyBDLkRFMTU4ICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5DLkRFMTU5IC0gSGVwYXRpdGlzIEIgdmlydXMgSEJWIGFuZCBoZXBhdGl0aXMgQyB2aXJ1cyBIQ1YgdGVzdGluZyBhbmQgdHJlYXRtZW50CkBhY3Rpdml0eTogSElWLkMxMCBDb3Vuc2VsIG9uIHJpc2sgYW5kIHByZXZlbnRpb24KQGRlc2NyaXB0aW9uOiBPZmZlciBvciByZWZlciBmb3IgSEJWIHRlc3RpbmcgYW5kIHZhY2NpbmF0aW9uIGFuZCBIQ1YgdGVzdGluZyBhbmQgdHJlYXRtZW50CiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJIZXBhdGl0aXMgQiB2aXJ1cyBIQlYgYW5kIGhlcGF0aXRpcyBDIHZpcnVzIEhDViB0ZXN0aW5nIGFuZCB0cmVhdG1lbnQiOgogIGV4aXN0cyAiSGVwYXRpdGlzIEIgdmlydXMgSEJWIGFuZCBoZXBhdGl0aXMgQyB2aXJ1cyBIQ1YgdGVzdGluZyBhbmQgdHJlYXRtZW50IENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiSGVwYXRpdGlzIEIgdmlydXMgSEJWIGFuZCBoZXBhdGl0aXMgQyB2aXJ1cyBIQ1YgdGVzdGluZyBhbmQgdHJlYXRtZW50IE9ic2VydmF0aW9uIgpkZWZpbmUgIkhlcGF0aXRpcyBCIHZpcnVzIEhCViBhbmQgaGVwYXRpdGlzIEMgdmlydXMgSENWIHRlc3RpbmcgYW5kIHRyZWF0bWVudCBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJIZXBhdGl0aXMgQiB2aXJ1cyBIQlYgYW5kIGhlcGF0aXRpcyBDIHZpcnVzIEhDViB0ZXN0aW5nIGFuZCB0cmVhdG1lbnQgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJIZXBhdGl0aXMgQiB2aXJ1cyBIQlYgYW5kIGhlcGF0aXRpcyBDIHZpcnVzIEhDViB0ZXN0aW5nIGFuZCB0cmVhdG1lbnQgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJIZXBhdGl0aXMgQiB2aXJ1cyBIQlYgYW5kIGhlcGF0aXRpcyBDIHZpcnVzIEhDViB0ZXN0aW5nIGFuZCB0cmVhdG1lbnQgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBIZXBhdGl0aXMgQiB2aXJ1cyBIQlYgYW5kIGhlcGF0aXRpcyBDIHZpcnVzIEhDViB0ZXN0aW5nIGFuZCB0cmVhdG1lbnQgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkMuREUxNjAgLSBDby10cmltb3hhem9sZSBjaGVtb3Byb3BoeWxheGlzIHRvIHByZXZlbnQgcG5ldW1vY3lzdGlzIGNhcmluaWkgcG5ldW1vbmlhCkBhY3Rpdml0eTogSElWLkMxMCBDb3Vuc2VsIG9uIHJpc2sgYW5kIHByZXZlbnRpb24KQGRlc2NyaXB0aW9uOiBPZmZlciBvciByZWZlciBmb3IgY28tdHJpbW94YXpvbGUgY2hlbW9wcm9waHlsYXhpcyB0byBwcmV2ZW50IHBuZXVtb2N5c3RpcyBjYXJpbmlpIHBuZXVtb25pYQoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiQ28tdHJpbW94YXpvbGUgY2hlbW9wcm9waHlsYXhpcyB0byBwcmV2ZW50IHBuZXVtb2N5c3RpcyBjYXJpbmlpIHBuZXVtb25pYSBDLkRFMTYwIjoKICBleGlzdHMgIkNvLXRyaW1veGF6b2xlIGNoZW1vcHJvcGh5bGF4aXMgdG8gcHJldmVudCBwbmV1bW9jeXN0aXMgY2FyaW5paSBwbmV1bW9uaWEgQy5ERTE2MCBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIkNvLXRyaW1veGF6b2xlIGNoZW1vcHJvcGh5bGF4aXMgdG8gcHJldmVudCBwbmV1bW9jeXN0aXMgY2FyaW5paSBwbmV1bW9uaWEgQy5ERTE2MCBPYnNlcnZhdGlvbiIKZGVmaW5lICJDby10cmltb3hhem9sZSBjaGVtb3Byb3BoeWxheGlzIHRvIHByZXZlbnQgcG5ldW1vY3lzdGlzIGNhcmluaWkgcG5ldW1vbmlhIEMuREUxNjAgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iQ28tdHJpbW94YXpvbGUgY2hlbW9wcm9waHlsYXhpcyB0byBwcmV2ZW50IHBuZXVtb2N5c3RpcyBjYXJpbmlpIHBuZXVtb25pYSBDLkRFMTYwIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiQ28tdHJpbW94YXpvbGUgY2hlbW9wcm9waHlsYXhpcyB0byBwcmV2ZW50IHBuZXVtb2N5c3RpcyBjYXJpbmlpIHBuZXVtb25pYSBDLkRFMTYwIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iQ28tdHJpbW94YXpvbGUgY2hlbW9wcm9waHlsYXhpcyB0byBwcmV2ZW50IHBuZXVtb2N5c3RpcyBjYXJpbmlpIHBuZXVtb25pYSBDLkRFMTYwIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgQ28tdHJpbW94YXpvbGUgY2hlbW9wcm9waHlsYXhpcyB0byBwcmV2ZW50IHBuZXVtb2N5c3RpcyBjYXJpbmlpIHBuZXVtb25pYSBDLkRFMTYwICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5DLkRFMTYxIC0gSW50ZW5zaWZpZWQgVEIgY2FzZSBmaW5kaW5nIGFuZCBsaW5rYWdlIHRvIFRCIHRyZWF0bWVudApAYWN0aXZpdHk6IEhJVi5DMTAgQ291bnNlbCBvbiByaXNrIGFuZCBwcmV2ZW50aW9uCkBkZXNjcmlwdGlvbjogT2ZmZXIgb3IgcmVmZXIgZm9yIFRCIGNhc2UgZmluZGluZyBhbmQgbGlua2FnZSB0byBUQiB0cmVhdG1lbnQKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkludGVuc2lmaWVkIFRCIGNhc2UgZmluZGluZyBhbmQgbGlua2FnZSB0byBUQiB0cmVhdG1lbnQgQy5ERTE2MSI6CiAgZXhpc3RzICJJbnRlbnNpZmllZCBUQiBjYXNlIGZpbmRpbmcgYW5kIGxpbmthZ2UgdG8gVEIgdHJlYXRtZW50IEMuREUxNjEgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJJbnRlbnNpZmllZCBUQiBjYXNlIGZpbmRpbmcgYW5kIGxpbmthZ2UgdG8gVEIgdHJlYXRtZW50IEMuREUxNjEgT2JzZXJ2YXRpb24iCmRlZmluZSAiSW50ZW5zaWZpZWQgVEIgY2FzZSBmaW5kaW5nIGFuZCBsaW5rYWdlIHRvIFRCIHRyZWF0bWVudCBDLkRFMTYxIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIkludGVuc2lmaWVkIFRCIGNhc2UgZmluZGluZyBhbmQgbGlua2FnZSB0byBUQiB0cmVhdG1lbnQgQy5ERTE2MSBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIkludGVuc2lmaWVkIFRCIGNhc2UgZmluZGluZyBhbmQgbGlua2FnZSB0byBUQiB0cmVhdG1lbnQgQy5ERTE2MSBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkludGVuc2lmaWVkIFRCIGNhc2UgZmluZGluZyBhbmQgbGlua2FnZSB0byBUQiB0cmVhdG1lbnQgQy5ERTE2MSBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIEludGVuc2lmaWVkIFRCIGNhc2UgZmluZGluZyBhbmQgbGlua2FnZSB0byBUQiB0cmVhdG1lbnQgQy5ERTE2MSAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuQy5ERTE2MiAtIFByb3Zpc2lvbiBvZiBpc29uaWF6aWQgcHJldmVudGl2ZSB0aGVyYXB5IGlmIHBlcnNvbiBkb2VzIG5vdCBoYXZlIFRCCkBhY3Rpdml0eTogSElWLkMxMCBDb3Vuc2VsIG9uIHJpc2sgYW5kIHByZXZlbnRpb24KQGRlc2NyaXB0aW9uOiBPZmZlciBvciByZWZlciBmb3IgcHJvdmlzaW9uIG9mIGlzb25pYXppZCBwcmV2ZW50aXZlIHRoZXJhcHkgaWYgcGVyc29uIGRvZXMgbm90IGhhdmUgVEIKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIlByb3Zpc2lvbiBvZiBpc29uaWF6aWQgcHJldmVudGl2ZSB0aGVyYXB5IGlmIHBlcnNvbiBkb2VzIG5vdCBoYXZlIFRCIEMuREUxNjIiOgogIGV4aXN0cyAiUHJvdmlzaW9uIG9mIGlzb25pYXppZCBwcmV2ZW50aXZlIHRoZXJhcHkgaWYgcGVyc29uIGRvZXMgbm90IGhhdmUgVEIgQy5ERTE2MiBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIlByb3Zpc2lvbiBvZiBpc29uaWF6aWQgcHJldmVudGl2ZSB0aGVyYXB5IGlmIHBlcnNvbiBkb2VzIG5vdCBoYXZlIFRCIEMuREUxNjIgT2JzZXJ2YXRpb24iCmRlZmluZSAiUHJvdmlzaW9uIG9mIGlzb25pYXppZCBwcmV2ZW50aXZlIHRoZXJhcHkgaWYgcGVyc29uIGRvZXMgbm90IGhhdmUgVEIgQy5ERTE2MiBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJQcm92aXNpb24gb2YgaXNvbmlhemlkIHByZXZlbnRpdmUgdGhlcmFweSBpZiBwZXJzb24gZG9lcyBub3QgaGF2ZSBUQiBDLkRFMTYyIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiUHJvdmlzaW9uIG9mIGlzb25pYXppZCBwcmV2ZW50aXZlIHRoZXJhcHkgaWYgcGVyc29uIGRvZXMgbm90IGhhdmUgVEIgQy5ERTE2MiBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIlByb3Zpc2lvbiBvZiBpc29uaWF6aWQgcHJldmVudGl2ZSB0aGVyYXB5IGlmIHBlcnNvbiBkb2VzIG5vdCBoYXZlIFRCIEMuREUxNjIgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBQcm92aXNpb24gb2YgaXNvbmlhemlkIHByZXZlbnRpdmUgdGhlcmFweSBpZiBwZXJzb24gZG9lcyBub3QgaGF2ZSBUQiBDLkRFMTYyICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5DLkRFMTYzIC0gTWFsYXJpYSBwcmV2ZW50aW9uIHN1Y2ggYXMgYmVkIG5ldHMgYW5kIHByb3BoeWxheGlzLCBkZXBlbmRpbmcgb24gZXBpZGVtaW9sb2d5CkBhY3Rpdml0eTogSElWLkMxMCBDb3Vuc2VsIG9uIHJpc2sgYW5kIHByZXZlbnRpb24KQGRlc2NyaXB0aW9uOiBPZmZlciBvciByZWZlciBmb3IgbWFsYXJpYSBwcmV2ZW50aW9uIChzdWNoIGFzIGJlZCBuZXRzIGFuZCBwcm9waHlsYXhpcyksIGRlcGVuZGluZyBvbiBlcGlkZW1pb2xvZ3kKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIk1hbGFyaWEgcHJldmVudGlvbiBzdWNoIGFzIGJlZCBuZXRzIGFuZCBwcm9waHlsYXhpcywgZGVwZW5kaW5nIG9uIGVwaWRlbWlvbG9neSBDLkRFMTYzIjoKICBleGlzdHMgIk1hbGFyaWEgcHJldmVudGlvbiBzdWNoIGFzIGJlZCBuZXRzIGFuZCBwcm9waHlsYXhpcywgZGVwZW5kaW5nIG9uIGVwaWRlbWlvbG9neSBDLkRFMTYzIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiTWFsYXJpYSBwcmV2ZW50aW9uIHN1Y2ggYXMgYmVkIG5ldHMgYW5kIHByb3BoeWxheGlzLCBkZXBlbmRpbmcgb24gZXBpZGVtaW9sb2d5IEMuREUxNjMgT2JzZXJ2YXRpb24iCmRlZmluZSAiTWFsYXJpYSBwcmV2ZW50aW9uIHN1Y2ggYXMgYmVkIG5ldHMgYW5kIHByb3BoeWxheGlzLCBkZXBlbmRpbmcgb24gZXBpZGVtaW9sb2d5IEMuREUxNjMgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iTWFsYXJpYSBwcmV2ZW50aW9uIHN1Y2ggYXMgYmVkIG5ldHMgYW5kIHByb3BoeWxheGlzLCBkZXBlbmRpbmcgb24gZXBpZGVtaW9sb2d5IEMuREUxNjMgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJNYWxhcmlhIHByZXZlbnRpb24gc3VjaCBhcyBiZWQgbmV0cyBhbmQgcHJvcGh5bGF4aXMsIGRlcGVuZGluZyBvbiBlcGlkZW1pb2xvZ3kgQy5ERTE2MyBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIk1hbGFyaWEgcHJldmVudGlvbiBzdWNoIGFzIGJlZCBuZXRzIGFuZCBwcm9waHlsYXhpcywgZGVwZW5kaW5nIG9uIGVwaWRlbWlvbG9neSBDLkRFMTYzIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgTWFsYXJpYSBwcmV2ZW50aW9uIHN1Y2ggYXMgYmVkIG5ldHMgYW5kIHByb3BoeWxheGlzLCBkZXBlbmRpbmcgb24gZXBpZGVtaW9sb2d5IEMuREUxNjMgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkMuREUxNjQgLSBPdGhlciBzdXBwb3J0IHNlcnZpY2VzCkBhY3Rpdml0eTogSElWLkMxMCBDb3Vuc2VsIG9uIHJpc2sgYW5kIHByZXZlbnRpb24KQGRlc2NyaXB0aW9uOiBPZmZlciBvciByZWZlciBmb3Igb3RoZXIgc3VwcG9ydCBzZXJ2aWNlcwoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiT3RoZXIgc3VwcG9ydCBzZXJ2aWNlcyBDLkRFMTY0IjoKICBleGlzdHMgIk90aGVyIHN1cHBvcnQgc2VydmljZXMgQy5ERTE2NCBPYnNlcnZhdGlvbiIKZGVmaW5lICJPdGhlciBzdXBwb3J0IHNlcnZpY2VzIEMuREUxNjQgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJPdGhlciBzdXBwb3J0IHNlcnZpY2VzIEMuREUxNjQgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBPdGhlciBzdXBwb3J0IHNlcnZpY2VzIEMuREUxNjQgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkMuREUxNjUgLSBNZW50YWwgaGVhbHRoIHNlcnZpY2VzCkBhY3Rpdml0eTogSElWLkMxMCBDb3Vuc2VsIG9uIHJpc2sgYW5kIHByZXZlbnRpb24KQGRlc2NyaXB0aW9uOiBPZmZlciBvciByZWZlciBmb3IgbWVudGFsIGhlYWx0aCBzZXJ2aWNlcwoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiTWVudGFsIGhlYWx0aCBzZXJ2aWNlcyBDLkRFMTY1IjoKICBleGlzdHMgIk1lbnRhbCBoZWFsdGggc2VydmljZXMgQy5ERTE2NSBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIk1lbnRhbCBoZWFsdGggc2VydmljZXMgQy5ERTE2NSBPYnNlcnZhdGlvbiIKZGVmaW5lICJNZW50YWwgaGVhbHRoIHNlcnZpY2VzIEMuREUxNjUgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iTWVudGFsIGhlYWx0aCBzZXJ2aWNlcyBDLkRFMTY1IENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiTWVudGFsIGhlYWx0aCBzZXJ2aWNlcyBDLkRFMTY1IE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iTWVudGFsIGhlYWx0aCBzZXJ2aWNlcyBDLkRFMTY1IE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgTWVudGFsIGhlYWx0aCBzZXJ2aWNlcyBDLkRFMTY1ICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5DLkRFMTY2IC0gUHN5Y2hvc29jaWFsIGNvdW5zZWxsaW5nLCBzdXBwb3J0IGFuZCB0cmVhdG1lbnQgYWRoZXJlbmNlIGNvdW5zZWxsaW5nCkBhY3Rpdml0eTogSElWLkMxMCBDb3Vuc2VsIG9uIHJpc2sgYW5kIHByZXZlbnRpb24KQGRlc2NyaXB0aW9uOiBPZmZlciBvciByZWZlciBmb3IgcHN5Y2hvc29jaWFsIGNvdW5zZWxsaW5nLCBzdXBwb3J0IGFuZCB0cmVhdG1lbnQgYWRoZXJlbmNlIGNvdW5zZWxsaW5nCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJQc3ljaG9zb2NpYWwgY291bnNlbGxpbmcsIHN1cHBvcnQgYW5kIHRyZWF0bWVudCBhZGhlcmVuY2UgY291bnNlbGxpbmcgQy5ERTE2NiI6CiAgZXhpc3RzICJQc3ljaG9zb2NpYWwgY291bnNlbGxpbmcsIHN1cHBvcnQgYW5kIHRyZWF0bWVudCBhZGhlcmVuY2UgY291bnNlbGxpbmcgQy5ERTE2NiBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIlBzeWNob3NvY2lhbCBjb3Vuc2VsbGluZywgc3VwcG9ydCBhbmQgdHJlYXRtZW50IGFkaGVyZW5jZSBjb3Vuc2VsbGluZyBDLkRFMTY2IE9ic2VydmF0aW9uIgpkZWZpbmUgIlBzeWNob3NvY2lhbCBjb3Vuc2VsbGluZywgc3VwcG9ydCBhbmQgdHJlYXRtZW50IGFkaGVyZW5jZSBjb3Vuc2VsbGluZyBDLkRFMTY2IENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIlBzeWNob3NvY2lhbCBjb3Vuc2VsbGluZywgc3VwcG9ydCBhbmQgdHJlYXRtZW50IGFkaGVyZW5jZSBjb3Vuc2VsbGluZyBDLkRFMTY2IENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiUHN5Y2hvc29jaWFsIGNvdW5zZWxsaW5nLCBzdXBwb3J0IGFuZCB0cmVhdG1lbnQgYWRoZXJlbmNlIGNvdW5zZWxsaW5nIEMuREUxNjYgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJQc3ljaG9zb2NpYWwgY291bnNlbGxpbmcsIHN1cHBvcnQgYW5kIHRyZWF0bWVudCBhZGhlcmVuY2UgY291bnNlbGxpbmcgQy5ERTE2NiBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIFBzeWNob3NvY2lhbCBjb3Vuc2VsbGluZywgc3VwcG9ydCBhbmQgdHJlYXRtZW50IGFkaGVyZW5jZSBjb3Vuc2VsbGluZyBDLkRFMTY2ICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5DLkRFMTY3IC0gU3VwcG9ydCBmb3IgZGlzY2xvc3VyZSBhbmQgcGFydG5lciBzZXJ2aWNlcwpAYWN0aXZpdHk6IEhJVi5DMTAgQ291bnNlbCBvbiByaXNrIGFuZCBwcmV2ZW50aW9uCkBkZXNjcmlwdGlvbjogT2ZmZXIgb3IgcmVmZXIgZm9yIHN1cHBvcnQgZm9yIGRpc2Nsb3N1cmUgYW5kIHBhcnRuZXIgc2VydmljZXMKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIlN1cHBvcnQgZm9yIGRpc2Nsb3N1cmUgYW5kIHBhcnRuZXIgc2VydmljZXMgQy5ERTE2NyI6CiAgZXhpc3RzICJTdXBwb3J0IGZvciBkaXNjbG9zdXJlIGFuZCBwYXJ0bmVyIHNlcnZpY2VzIEMuREUxNjcgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJTdXBwb3J0IGZvciBkaXNjbG9zdXJlIGFuZCBwYXJ0bmVyIHNlcnZpY2VzIEMuREUxNjcgT2JzZXJ2YXRpb24iCmRlZmluZSAiU3VwcG9ydCBmb3IgZGlzY2xvc3VyZSBhbmQgcGFydG5lciBzZXJ2aWNlcyBDLkRFMTY3IENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIlN1cHBvcnQgZm9yIGRpc2Nsb3N1cmUgYW5kIHBhcnRuZXIgc2VydmljZXMgQy5ERTE2NyBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIlN1cHBvcnQgZm9yIGRpc2Nsb3N1cmUgYW5kIHBhcnRuZXIgc2VydmljZXMgQy5ERTE2NyBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIlN1cHBvcnQgZm9yIGRpc2Nsb3N1cmUgYW5kIHBhcnRuZXIgc2VydmljZXMgQy5ERTE2NyBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIFN1cHBvcnQgZm9yIGRpc2Nsb3N1cmUgYW5kIHBhcnRuZXIgc2VydmljZXMgQy5ERTE2NyAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuQy5ERTE2OCAtIExlZ2FsIGFuZCBzb2NpYWwgc2VydmljZXMKQGFjdGl2aXR5OiBISVYuQzEwIENvdW5zZWwgb24gcmlzayBhbmQgcHJldmVudGlvbgpAZGVzY3JpcHRpb246IE9mZmVyIG9yIHJlZmVyIGZvciBsZWdhbCBhbmQgc29jaWFsIHNlcnZpY2VzCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJMZWdhbCBhbmQgc29jaWFsIHNlcnZpY2VzIEMuREUxNjgiOgogIGV4aXN0cyAiTGVnYWwgYW5kIHNvY2lhbCBzZXJ2aWNlcyBDLkRFMTY4IENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiTGVnYWwgYW5kIHNvY2lhbCBzZXJ2aWNlcyBDLkRFMTY4IE9ic2VydmF0aW9uIgpkZWZpbmUgIkxlZ2FsIGFuZCBzb2NpYWwgc2VydmljZXMgQy5ERTE2OCBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJMZWdhbCBhbmQgc29jaWFsIHNlcnZpY2VzIEMuREUxNjggQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJMZWdhbCBhbmQgc29jaWFsIHNlcnZpY2VzIEMuREUxNjggT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJMZWdhbCBhbmQgc29jaWFsIHNlcnZpY2VzIEMuREUxNjggT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBMZWdhbCBhbmQgc29jaWFsIHNlcnZpY2VzIEMuREUxNjggKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkMuREUxNjkgLSBTZXJ2aWNlcyBmb3IgcmVzcG9uZGluZyB0byB2aW9sZW5jZSBhZ2FpbnN0IHdvbWVuCkBhY3Rpdml0eTogSElWLkMxMCBDb3Vuc2VsIG9uIHJpc2sgYW5kIHByZXZlbnRpb24KQGRlc2NyaXB0aW9uOiBPZmZlciBvciByZWZlciBmb3Igc2VydmljZXMgZm9yIHJlc3BvbmRpbmcgdG8gdmlvbGVuY2UgYWdhaW5zdCB3b21lbiwgaW5jbHVkaW5nIGZpcnN0LWxpbmUgc3VwcG9ydCBhbmQgcHN5Y2hvc29jaWFsIHN1cHBvcnQsIHBvc3QtcmFwZSBjYXJlIGFuZCBvdGhlciBzdXBwb3J0IHNlcnZpY2VzIGluY2x1ZGluZyBzaGVsdGVycywgbGVnYWwgc2VydmljZXMgYW5kIHdvbWVuIGFuZCBjaGlsZCBwcm90ZWN0aW9uIHNlcnZpY2VzCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJTZXJ2aWNlcyBmb3IgcmVzcG9uZGluZyB0byB2aW9sZW5jZSBhZ2FpbnN0IHdvbWVuIEMuREUxNjkiOgogIGV4aXN0cyAiU2VydmljZXMgZm9yIHJlc3BvbmRpbmcgdG8gdmlvbGVuY2UgYWdhaW5zdCB3b21lbiBDLkRFMTY5IENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiU2VydmljZXMgZm9yIHJlc3BvbmRpbmcgdG8gdmlvbGVuY2UgYWdhaW5zdCB3b21lbiBDLkRFMTY5IE9ic2VydmF0aW9uIgpkZWZpbmUgIlNlcnZpY2VzIGZvciByZXNwb25kaW5nIHRvIHZpb2xlbmNlIGFnYWluc3Qgd29tZW4gQy5ERTE2OSBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJTZXJ2aWNlcyBmb3IgcmVzcG9uZGluZyB0byB2aW9sZW5jZSBhZ2FpbnN0IHdvbWVuIEMuREUxNjkgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJTZXJ2aWNlcyBmb3IgcmVzcG9uZGluZyB0byB2aW9sZW5jZSBhZ2FpbnN0IHdvbWVuIEMuREUxNjkgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJTZXJ2aWNlcyBmb3IgcmVzcG9uZGluZyB0byB2aW9sZW5jZSBhZ2FpbnN0IHdvbWVuIEMuREUxNjkgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBTZXJ2aWNlcyBmb3IgcmVzcG9uZGluZyB0byB2aW9sZW5jZSBhZ2FpbnN0IHdvbWVuIEMuREUxNjkgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREUxIC0gUmVhc29uIGZvciB2aXNpdApAYWN0aXZpdHk6IEhJVi5EMSBEZXRlcm1pbmUgcmVhc29uIGZvciB2aXNpdApAZGVzY3JpcHRpb246IFdoZXRoZXIgdmlzaXQgd2FzIHNjaGVkdWxlZCBvciB1bnNjaGVkdWxlZCwgY2xpbmljYWwgb25seSwgb3IgZm9yIEFSViBkcnVnIHBpY2stdXAKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIlJlYXNvbiBmb3IgdmlzaXQgRC5ERTEiOgogIGV4aXN0cyAiUmVhc29uIGZvciB2aXNpdCBELkRFMSBPYnNlcnZhdGlvbiIKZGVmaW5lICJSZWFzb24gZm9yIHZpc2l0IEQuREUxIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iUmVhc29uIGZvciB2aXNpdCBELkRFMSBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIFJlYXNvbiBmb3IgdmlzaXQgRC5ERTEgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREUyIC0gRmlyc3QgY2xpbmljYWwgdmlzaXQKQGFjdGl2aXR5OiBISVYuRDEgRGV0ZXJtaW5lIHJlYXNvbiBmb3IgdmlzaXQKQGRlc2NyaXB0aW9uOiBUaGUgY2xpZW50J3MgZmlyc3QgYXBwb2ludG1lbnQgZm9yIGNsaW5pY2FsIGNhcmUgYnkgYSBwcm92aWRlciBhdCB0aGUgZmFjaWxpdHkKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkZpcnN0IGNsaW5pY2FsIHZpc2l0IjoKICBleGlzdHMgIkZpcnN0IGNsaW5pY2FsIHZpc2l0IENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiRmlyc3QgY2xpbmljYWwgdmlzaXQgT2JzZXJ2YXRpb24iCmRlZmluZSAiRmlyc3QgY2xpbmljYWwgdmlzaXQgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iRmlyc3QgY2xpbmljYWwgdmlzaXQgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJGaXJzdCBjbGluaWNhbCB2aXNpdCBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkZpcnN0IGNsaW5pY2FsIHZpc2l0IE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgRmlyc3QgY2xpbmljYWwgdmlzaXQgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREUzIC0gQ2xpbmljYWwgdmlzaXQKQGFjdGl2aXR5OiBISVYuRDEgRGV0ZXJtaW5lIHJlYXNvbiBmb3IgdmlzaXQKQGRlc2NyaXB0aW9uOiBBcHBvaW50bWVudCBmb3IgY2xpbmljYWwgY2FyZSBieSBhIHByb3ZpZGVyCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJDbGluaWNhbCB2aXNpdCBELkRFMyI6CiAgZXhpc3RzICJDbGluaWNhbCB2aXNpdCBELkRFMyBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIkNsaW5pY2FsIHZpc2l0IEQuREUzIE9ic2VydmF0aW9uIgpkZWZpbmUgIkNsaW5pY2FsIHZpc2l0IEQuREUzIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIkNsaW5pY2FsIHZpc2l0IEQuREUzIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiQ2xpbmljYWwgdmlzaXQgRC5ERTMgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJDbGluaWNhbCB2aXNpdCBELkRFMyBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIENsaW5pY2FsIHZpc2l0IEQuREUzICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFNCAtIEFSVCBpbml0aWF0aW9uCkBhY3Rpdml0eTogSElWLkQxIERldGVybWluZSByZWFzb24gZm9yIHZpc2l0CkBkZXNjcmlwdGlvbjogQXBwb2ludG1lbnQgZm9yIGluaXRpYXRpb24gb2YgQVJUCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJBUlQgaW5pdGlhdGlvbiI6CiAgZXhpc3RzICJBUlQgaW5pdGlhdGlvbiBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIkFSVCBpbml0aWF0aW9uIE9ic2VydmF0aW9uIgpkZWZpbmUgIkFSVCBpbml0aWF0aW9uIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIkFSVCBpbml0aWF0aW9uIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiQVJUIGluaXRpYXRpb24gT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJBUlQgaW5pdGlhdGlvbiBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIEFSVCBpbml0aWF0aW9uICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFNSAtIEFSVCBkcnVnIHBpY2sgdXAKQGFjdGl2aXR5OiBISVYuRDEgRGV0ZXJtaW5lIHJlYXNvbiBmb3IgdmlzaXQKQGRlc2NyaXB0aW9uOiBBcHBvaW50bWVudCBmb3IgYW4gYW50aXJldHJvdmlyYWwgZHJ1ZyBwaWNrIHVwCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJBUlQgZHJ1ZyBwaWNrIHVwIjoKICBleGlzdHMgIkFSVCBkcnVnIHBpY2sgdXAgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJBUlQgZHJ1ZyBwaWNrIHVwIE9ic2VydmF0aW9uIgpkZWZpbmUgIkFSVCBkcnVnIHBpY2sgdXAgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iQVJUIGRydWcgcGljayB1cCBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIkFSVCBkcnVnIHBpY2sgdXAgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJBUlQgZHJ1ZyBwaWNrIHVwIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgQVJUIGRydWcgcGljayB1cCAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTYgLSBJc3N1ZXMgYW5kIGNvbmNlcm5zCkBhY3Rpdml0eTogSElWLkQxIERldGVybWluZSByZWFzb24gZm9yIHZpc2l0CkBkZXNjcmlwdGlvbjogVmlzaXQgdG8gYWRkcmVzcyBpc3N1ZXMgYW5kIGNvbmNlcm5zCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJJc3N1ZXMgYW5kIGNvbmNlcm5zIjoKICBleGlzdHMgIklzc3VlcyBhbmQgY29uY2VybnMgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJJc3N1ZXMgYW5kIGNvbmNlcm5zIE9ic2VydmF0aW9uIgpkZWZpbmUgIklzc3VlcyBhbmQgY29uY2VybnMgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iSXNzdWVzIGFuZCBjb25jZXJucyBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIklzc3VlcyBhbmQgY29uY2VybnMgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJJc3N1ZXMgYW5kIGNvbmNlcm5zIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgSXNzdWVzIGFuZCBjb25jZXJucyAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTcgLSBQb3N0LXRyZWF0bWVudCBmb2xsb3ctdXAgdmlzaXQgZm9yIGNlcnZpY2FsIHByZWNhbmNlciBsZXNpb25zIG9yIGludmFzaXZlIGNlcnZpY2FsIGNhbmNlcgpAYWN0aXZpdHk6IEhJVi5EMSBEZXRlcm1pbmUgcmVhc29uIGZvciB2aXNpdApAZGVzY3JpcHRpb246IEFwcG9pbnRtZW50IGZvciBhIHBvc3QtdHJlYXRtZW50IGZvbGxvdy11cCB2aXNpdCBmb3IgY2VydmljYWwgcHJlY2FuY2VyIGxlc2lvbnMgb3IgaW52YXNpdmUgY2VydmljYWwgY2FuY2VyCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJQb3N0LXRyZWF0bWVudCBmb2xsb3ctdXAgdmlzaXQgZm9yIGNlcnZpY2FsIHByZWNhbmNlciBsZXNpb25zIG9yIGludmFzaXZlIGNlcnZpY2FsIGNhbmNlciBELkRFNyI6CiAgZXhpc3RzICJQb3N0LXRyZWF0bWVudCBmb2xsb3ctdXAgdmlzaXQgZm9yIGNlcnZpY2FsIHByZWNhbmNlciBsZXNpb25zIG9yIGludmFzaXZlIGNlcnZpY2FsIGNhbmNlciBELkRFNyBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIlBvc3QtdHJlYXRtZW50IGZvbGxvdy11cCB2aXNpdCBmb3IgY2VydmljYWwgcHJlY2FuY2VyIGxlc2lvbnMgb3IgaW52YXNpdmUgY2VydmljYWwgY2FuY2VyIEQuREU3IE9ic2VydmF0aW9uIgpkZWZpbmUgIlBvc3QtdHJlYXRtZW50IGZvbGxvdy11cCB2aXNpdCBmb3IgY2VydmljYWwgcHJlY2FuY2VyIGxlc2lvbnMgb3IgaW52YXNpdmUgY2VydmljYWwgY2FuY2VyIEQuREU3IENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIlBvc3QtdHJlYXRtZW50IGZvbGxvdy11cCB2aXNpdCBmb3IgY2VydmljYWwgcHJlY2FuY2VyIGxlc2lvbnMgb3IgaW52YXNpdmUgY2VydmljYWwgY2FuY2VyIEQuREU3IENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiUG9zdC10cmVhdG1lbnQgZm9sbG93LXVwIHZpc2l0IGZvciBjZXJ2aWNhbCBwcmVjYW5jZXIgbGVzaW9ucyBvciBpbnZhc2l2ZSBjZXJ2aWNhbCBjYW5jZXIgRC5ERTcgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJQb3N0LXRyZWF0bWVudCBmb2xsb3ctdXAgdmlzaXQgZm9yIGNlcnZpY2FsIHByZWNhbmNlciBsZXNpb25zIG9yIGludmFzaXZlIGNlcnZpY2FsIGNhbmNlciBELkRFNyBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIFBvc3QtdHJlYXRtZW50IGZvbGxvdy11cCB2aXNpdCBmb3IgY2VydmljYWwgcHJlY2FuY2VyIGxlc2lvbnMgb3IgaW52YXNpdmUgY2VydmljYWwgY2FuY2VyIEQuREU3ICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFOSAtIEJvZHkgdGVtcGVyYXR1cmUKQGFjdGl2aXR5OiBISVYuRDIgVGFrZSB2aXRhbCBzaWducwpAZGVzY3JpcHRpb246IFRlbXBlcmF0dXJlIG9mIHRoZSBjbGllbnQgaW4gQ2Vsc2l1cwoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiQm9keSB0ZW1wZXJhdHVyZSI6CiAgRWxlbWVudHMuIkJvZHkgdGVtcGVyYXR1cmUiIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiQm9keSB0ZW1wZXJhdHVyZSBWYWx1ZSI6CiAgIkJvZHkgdGVtcGVyYXR1cmUiIE8KICByZXR1cm4gTy52YWx1ZQovKiBFbmQgb2YgQm9keSB0ZW1wZXJhdHVyZSAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTEzIC0gQm9keSB3ZWlnaHQKQGFjdGl2aXR5OiBISVYuRDIgVGFrZSB2aXRhbCBzaWducwpAZGVzY3JpcHRpb246IFRoZSBjbGllbnQncyBjdXJyZW50IHdlaWdodCBpbiBraWxvZ3JhbXMKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkJvZHkgd2VpZ2h0IjoKICBFbGVtZW50cy4iQm9keSB3ZWlnaHQiIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiQm9keSB3ZWlnaHQgVmFsdWUiOgogICJCb2R5IHdlaWdodCIgTwogIHJldHVybiBPLnZhbHVlCi8qIEVuZCBvZiBCb2R5IHdlaWdodCAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTE3IC0gU2lnbnMgb2Ygc2VyaW91cyBpbGxuZXNzCkBhY3Rpdml0eTogSElWLkQzIENoZWNrIGZvciBzaWducyBvZiBzZXJpb3VzIGlsbG5lc3MKQGRlc2NyaXB0aW9uOiBTaWducyB0aGF0IG1heSBpbmRpY2F0ZSB0aGUgY2xpZW50IGhhcyBhIHNlcmlvdXMgaWxsbmVzcyBhbmQgbmVlZHMgdHJpYWdlIG9yIGFuIGVtZXJnZW5jeSByZWZlcnJhbAoqLwpkZWZpbmUgIlNpZ25zIG9mIHNlcmlvdXMgaWxsbmVzcyI6CiAgZXhpc3RzICJTaWducyBvZiBzZXJpb3VzIGlsbG5lc3MgT2JzZXJ2YXRpb24iCmRlZmluZSAiU2lnbnMgb2Ygc2VyaW91cyBpbGxuZXNzIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iU2lnbnMgb2Ygc2VyaW91cyBpbGxuZXNzIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgU2lnbnMgb2Ygc2VyaW91cyBpbGxuZXNzICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFMTggLSBGZXZlciBvZiAzOSBDIG9yIGdyZWF0ZXIKQGFjdGl2aXR5OiBISVYuRDMgQ2hlY2sgZm9yIHNpZ25zIG9mIHNlcmlvdXMgaWxsbmVzcwpAZGVzY3JpcHRpb246IENsaWVudCBoYXMgYSBmZXZlciB3aXRoIGEgbWVhc3VyZWQgdGVtcGVyYXR1cmUgb2YgMTAyLjIgRi8zOSBDIG9yIGdyZWF0ZXIKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkZldmVyIG9mIDM5IEMgb3IgZ3JlYXRlciI6CiAgZXhpc3RzICJGZXZlciBvZiAzOSBDIG9yIGdyZWF0ZXIgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJGZXZlciBvZiAzOSBDIG9yIGdyZWF0ZXIgT2JzZXJ2YXRpb24iCmRlZmluZSAiRmV2ZXIgb2YgMzkgQyBvciBncmVhdGVyIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIkZldmVyIG9mIDM5IEMgb3IgZ3JlYXRlciBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIkZldmVyIG9mIDM5IEMgb3IgZ3JlYXRlciBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkZldmVyIG9mIDM5IEMgb3IgZ3JlYXRlciBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIEZldmVyIG9mIDM5IEMgb3IgZ3JlYXRlciAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTE5IC0gVGFjaHljYXJkaWEKQGFjdGl2aXR5OiBISVYuRDMgQ2hlY2sgZm9yIHNpZ25zIG9mIHNlcmlvdXMgaWxsbmVzcwpAZGVzY3JpcHRpb246IEhlYXJ0IHJhdGUgYWJvdmUgYSByYXRlIHBlciBtaW51dGUgYmFzZWQgb24gYWdlCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJUYWNoeWNhcmRpYSI6CiAgZXhpc3RzICJUYWNoeWNhcmRpYSBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIlRhY2h5Y2FyZGlhIE9ic2VydmF0aW9uIgpkZWZpbmUgIlRhY2h5Y2FyZGlhIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIlRhY2h5Y2FyZGlhIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiVGFjaHljYXJkaWEgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJUYWNoeWNhcmRpYSBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIFRhY2h5Y2FyZGlhICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFMjAgLSBUYWNoeXBuZWEKQGFjdGl2aXR5OiBISVYuRDMgQ2hlY2sgZm9yIHNpZ25zIG9mIHNlcmlvdXMgaWxsbmVzcwpAZGVzY3JpcHRpb246IFJlc3BpcmF0b3J5IHJhdGUgYWJvdmUgYSBudW1iZXIgb2YgYnJlYXRocyBwZXIgbWludXRlIGJhc2VkIG9uIGFnZQoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiVGFjaHlwbmVhIjoKICBleGlzdHMgIlRhY2h5cG5lYSBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIlRhY2h5cG5lYSBPYnNlcnZhdGlvbiIKZGVmaW5lICJUYWNoeXBuZWEgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iVGFjaHlwbmVhIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiVGFjaHlwbmVhIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iVGFjaHlwbmVhIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgVGFjaHlwbmVhICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFMjEgLSBVbmFibGUgdG8gd2FsayB1bmFpZGVkCkBhY3Rpdml0eTogSElWLkQzIENoZWNrIGZvciBzaWducyBvZiBzZXJpb3VzIGlsbG5lc3MKQGRlc2NyaXB0aW9uOiBDbGllbnQgaXMgbm90IGFibGUgdG8gd2FsayB3aXRob3V0IGhlbHAKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIlVuYWJsZSB0byB3YWxrIHVuYWlkZWQiOgogIGV4aXN0cyAiVW5hYmxlIHRvIHdhbGsgdW5haWRlZCBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIlVuYWJsZSB0byB3YWxrIHVuYWlkZWQgT2JzZXJ2YXRpb24iCmRlZmluZSAiVW5hYmxlIHRvIHdhbGsgdW5haWRlZCBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJVbmFibGUgdG8gd2FsayB1bmFpZGVkIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiVW5hYmxlIHRvIHdhbGsgdW5haWRlZCBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIlVuYWJsZSB0byB3YWxrIHVuYWlkZWQgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBVbmFibGUgdG8gd2FsayB1bmFpZGVkICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFMjIgLSBMZXRoYXJneQpAYWN0aXZpdHk6IEhJVi5EMyBDaGVjayBmb3Igc2lnbnMgb2Ygc2VyaW91cyBpbGxuZXNzCkBkZXNjcmlwdGlvbjogQ2xpZW50IGlzIGV4aGliaXRpbmcgbGV0aGFyZ3kgYXMgYSBzaWduIG9mIHNlcmlvdXMgaWxsbmVzcwoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiTGV0aGFyZ3kgRC5ERTIyIjoKICBleGlzdHMgIkxldGhhcmd5IEQuREUyMiBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIkxldGhhcmd5IEQuREUyMiBPYnNlcnZhdGlvbiIKZGVmaW5lICJMZXRoYXJneSBELkRFMjIgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iTGV0aGFyZ3kgRC5ERTIyIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiTGV0aGFyZ3kgRC5ERTIyIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iTGV0aGFyZ3kgRC5ERTIyIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgTGV0aGFyZ3kgRC5ERTIyICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFMjMgLSBVbmNvbnNjaW91c25lc3MKQGFjdGl2aXR5OiBISVYuRDMgQ2hlY2sgZm9yIHNpZ25zIG9mIHNlcmlvdXMgaWxsbmVzcwpAZGVzY3JpcHRpb246IENsaWVudCBpcyBjdXJyZW50bHkgdW5jb25zY2lvdXMKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIlVuY29uc2Npb3VzbmVzcyI6CiAgZXhpc3RzICJVbmNvbnNjaW91c25lc3MgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJVbmNvbnNjaW91c25lc3MgT2JzZXJ2YXRpb24iCmRlZmluZSAiVW5jb25zY2lvdXNuZXNzIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIlVuY29uc2Npb3VzbmVzcyBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIlVuY29uc2Npb3VzbmVzcyBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIlVuY29uc2Npb3VzbmVzcyBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIFVuY29uc2Npb3VzbmVzcyAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTI0IC0gQ29udnVsc2lvbnMKQGFjdGl2aXR5OiBISVYuRDMgQ2hlY2sgZm9yIHNpZ25zIG9mIHNlcmlvdXMgaWxsbmVzcwpAZGVzY3JpcHRpb246IENsaWVudCBpcyBjb252dWxzaW5nCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJDb252dWxzaW9ucyI6CiAgZXhpc3RzICJDb252dWxzaW9ucyBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIkNvbnZ1bHNpb25zIE9ic2VydmF0aW9uIgpkZWZpbmUgIkNvbnZ1bHNpb25zIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIkNvbnZ1bHNpb25zIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiQ29udnVsc2lvbnMgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJDb252dWxzaW9ucyBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIENvbnZ1bHNpb25zICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFMjUgLSBVbmFibGUgdG8gZHJpbmsKQGFjdGl2aXR5OiBISVYuRDMgQ2hlY2sgZm9yIHNpZ25zIG9mIHNlcmlvdXMgaWxsbmVzcwpAZGVzY3JpcHRpb246IENoaWxkIGlzIG5vdCBhYmxlIHRvIGRyaW5rCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJVbmFibGUgdG8gZHJpbmsiOgogIGV4aXN0cyAiVW5hYmxlIHRvIGRyaW5rIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiVW5hYmxlIHRvIGRyaW5rIE9ic2VydmF0aW9uIgpkZWZpbmUgIlVuYWJsZSB0byBkcmluayBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJVbmFibGUgdG8gZHJpbmsgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJVbmFibGUgdG8gZHJpbmsgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJVbmFibGUgdG8gZHJpbmsgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBVbmFibGUgdG8gZHJpbmsgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREUyNiAtIFVuYWJsZSB0byBicmVhc3RmZWVkCkBhY3Rpdml0eTogSElWLkQzIENoZWNrIGZvciBzaWducyBvZiBzZXJpb3VzIGlsbG5lc3MKQGRlc2NyaXB0aW9uOiBJbmZhbnQgb3IgY2hpbGQgaXMgbm90IGFibGUgdG8gYnJlYXN0ZmVlZAoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiVW5hYmxlIHRvIGJyZWFzdGZlZWQiOgogIGV4aXN0cyAiVW5hYmxlIHRvIGJyZWFzdGZlZWQgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJVbmFibGUgdG8gYnJlYXN0ZmVlZCBPYnNlcnZhdGlvbiIKZGVmaW5lICJVbmFibGUgdG8gYnJlYXN0ZmVlZCBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJVbmFibGUgdG8gYnJlYXN0ZmVlZCBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIlVuYWJsZSB0byBicmVhc3RmZWVkIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iVW5hYmxlIHRvIGJyZWFzdGZlZWQgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBVbmFibGUgdG8gYnJlYXN0ZmVlZCAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTI3IC0gUmVwZWF0ZWQgdm9taXRpbmcKQGFjdGl2aXR5OiBISVYuRDMgQ2hlY2sgZm9yIHNpZ25zIG9mIHNlcmlvdXMgaWxsbmVzcwpAZGVzY3JpcHRpb246IENsaWVudCBpcyByZXBlYXRlZGx5IHZvbWl0aW5nCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJSZXBlYXRlZCB2b21pdGluZyI6CiAgZXhpc3RzICJSZXBlYXRlZCB2b21pdGluZyBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIlJlcGVhdGVkIHZvbWl0aW5nIE9ic2VydmF0aW9uIgpkZWZpbmUgIlJlcGVhdGVkIHZvbWl0aW5nIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIlJlcGVhdGVkIHZvbWl0aW5nIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiUmVwZWF0ZWQgdm9taXRpbmcgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJSZXBlYXRlZCB2b21pdGluZyBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIFJlcGVhdGVkIHZvbWl0aW5nICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFMjggLSBIZWFkYWNoZQpAYWN0aXZpdHk6IEhJVi5EMyBDaGVjayBmb3Igc2lnbnMgb2Ygc2VyaW91cyBpbGxuZXNzCkBkZXNjcmlwdGlvbjogQ2xpZW50IGlzIGV4aGliaXRpbmcgYSBoZWFkYWNoZQoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiSGVhZGFjaGUgRC5ERTI4IjoKICBleGlzdHMgIkhlYWRhY2hlIEQuREUyOCBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIkhlYWRhY2hlIEQuREUyOCBPYnNlcnZhdGlvbiIKZGVmaW5lICJIZWFkYWNoZSBELkRFMjggQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iSGVhZGFjaGUgRC5ERTI4IENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiSGVhZGFjaGUgRC5ERTI4IE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iSGVhZGFjaGUgRC5ERTI4IE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgSGVhZGFjaGUgRC5ERTI4ICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFMjkgLSBPdGhlciBzaWduIG9mIHNlcmlvdXMgaWxsbmVzcwpAYWN0aXZpdHk6IEhJVi5EMyBDaGVjayBmb3Igc2lnbnMgb2Ygc2VyaW91cyBpbGxuZXNzCkBkZXNjcmlwdGlvbjogQ2xpZW50IGlzIGV4aGliaXRpbmcgYW5vdGhlciBzaWduIG9mIGEgc2VyaW91cyBpbGxuZXNzCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJPdGhlciBzaWduIG9mIHNlcmlvdXMgaWxsbmVzcyI6CiAgZXhpc3RzICJPdGhlciBzaWduIG9mIHNlcmlvdXMgaWxsbmVzcyBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIk90aGVyIHNpZ24gb2Ygc2VyaW91cyBpbGxuZXNzIE9ic2VydmF0aW9uIgpkZWZpbmUgIk90aGVyIHNpZ24gb2Ygc2VyaW91cyBpbGxuZXNzIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIk90aGVyIHNpZ24gb2Ygc2VyaW91cyBpbGxuZXNzIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiT3RoZXIgc2lnbiBvZiBzZXJpb3VzIGlsbG5lc3MgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJPdGhlciBzaWduIG9mIHNlcmlvdXMgaWxsbmVzcyBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIE90aGVyIHNpZ24gb2Ygc2VyaW91cyBpbGxuZXNzICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFMzEgLSBDdXJyZW50bHkgcHJlZ25hbnQKQGFjdGl2aXR5OiBISVYuRDggQ2FwdHVyZSBvciB1cGRhdGUgY2xpZW50IGhpc3RvcnkKQGRlc2NyaXB0aW9uOiBDbGllbnQgaXMgY3VycmVudGx5IHByZWduYW50CiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJDdXJyZW50bHkgcHJlZ25hbnQgRC5ERTMxIjoKICBleGlzdHMgIkN1cnJlbnRseSBwcmVnbmFudCBELkRFMzEgT2JzZXJ2YXRpb24iCmRlZmluZSAiQ3VycmVudGx5IHByZWduYW50IEQuREUzMSBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkN1cnJlbnRseSBwcmVnbmFudCBELkRFMzEgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBDdXJyZW50bHkgcHJlZ25hbnQgRC5ERTMxICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFMzcgLSBTZXJvZGlzY29yZGFudCBwYXJ0bmVyCkBhY3Rpdml0eTogSElWLkQ4IENhcHR1cmUgb3IgdXBkYXRlIGNsaWVudCBoaXN0b3J5CkBkZXNjcmlwdGlvbjogQ2xpZW50J3MgSElWIHN0YXR1cyBpcyBkaWZmZXJlbnQgZnJvbSBhIGN1cnJlbnQgcGFydG5lcidzIEhJViBzdGF0dXMKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIlNlcm9kaXNjb3JkYW50IHBhcnRuZXIgRC5ERTM3IjoKICBleGlzdHMgIlNlcm9kaXNjb3JkYW50IHBhcnRuZXIgRC5ERTM3IE9ic2VydmF0aW9uIgpkZWZpbmUgIlNlcm9kaXNjb3JkYW50IHBhcnRuZXIgRC5ERTM3IE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iU2Vyb2Rpc2NvcmRhbnQgcGFydG5lciBELkRFMzcgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBTZXJvZGlzY29yZGFudCBwYXJ0bmVyIEQuREUzNyAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTM4IC0gT24gQVJUCkBhY3Rpdml0eTogSElWLkQ4IENhcHR1cmUgb3IgdXBkYXRlIGNsaWVudCBoaXN0b3J5CkBkZXNjcmlwdGlvbjogQ2xpZW50IGlzIGN1cnJlbnRseSB0YWtpbmcgQVJUCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJPbiBBUlQgRC5ERTM4IjoKICBFbGVtZW50cy4iT24gQVJUIEQuREUzOCIgTVMKICAgICAgd2hlcmUgTVMuZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBPbiBBUlQgRC5ERTM4ICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFMzkgLSBBUlQgc3RhcnQgZGF0ZQpAYWN0aXZpdHk6IEhJVi5EOCBDYXB0dXJlIG9yIHVwZGF0ZSBjbGllbnQgaGlzdG9yeQpAZGVzY3JpcHRpb246IFRoZSBkYXRlIG9uIHdoaWNoIHRoZSBjbGllbnQgc3RhcnRlZCBvciByZXN0YXJ0ZWQgQVJUCiovCmRlZmluZSAiQVJUIHN0YXJ0IGRhdGUgRC5ERTM5IjoKICAiT24gQVJUIEQuREUzOCIgTVMKICByZXR1cm4gc3RhcnQgb2YgTVMuZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKQovKiBFbmQgb2YgQVJUIHN0YXJ0IGRhdGUgRC5ERTM5ICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFNDIgLSBFc3RhYmxpc2hlZCBvbiBBUlQKQGFjdGl2aXR5OiBISVYuRDggQ2FwdHVyZSBvciB1cGRhdGUgY2xpZW50IGhpc3RvcnkKQGRlc2NyaXB0aW9uOiBJcyB0aGUgY2xpZW50IHN1Y2Nlc3NmdWxseSBlc3RhYmxpc2hlZCBvbiBBUlQ/CiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJFc3RhYmxpc2hlZCBvbiBBUlQiOgogIGV4aXN0cyAiRXN0YWJsaXNoZWQgb24gQVJUIE9ic2VydmF0aW9uIgpkZWZpbmUgIkVzdGFibGlzaGVkIG9uIEFSVCBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkVzdGFibGlzaGVkIG9uIEFSVCBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIEVzdGFibGlzaGVkIG9uIEFSVCAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTQzIC0gQVJUIHN0YXJ0IHR5cGUKQGFjdGl2aXR5OiBISVYuRDggQ2FwdHVyZSBvciB1cGRhdGUgY2xpZW50IGhpc3RvcnkKQGRlc2NyaXB0aW9uOiBXaGV0aGVyIHRoZSBjbGllbnQgaXMgQVJUIG5haXZlIG9yIGlzIHJlc3RhcnRpbmcgQVJUCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJBUlQgc3RhcnQgdHlwZSI6CiAgZXhpc3RzICJBUlQgc3RhcnQgdHlwZSBPYnNlcnZhdGlvbiIKZGVmaW5lICJBUlQgc3RhcnQgdHlwZSBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkFSVCBzdGFydCB0eXBlIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgQVJUIHN0YXJ0IHR5cGUgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREU0NCAtIEZpcnN0LXRpbWUgdXNlciBvZiBBUlQKQGFjdGl2aXR5OiBISVYuRDggQ2FwdHVyZSBvciB1cGRhdGUgY2xpZW50IGhpc3RvcnkKQGRlc2NyaXB0aW9uOiBDbGllbnQgaXMgQVJUIG5haXZlLCBoYXZpbmcgbmV2ZXIgdGFrZW4gQVJUIHRvIHRyZWF0IEhJViBiZWZvcmUKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkZpcnN0LXRpbWUgdXNlciBvZiBBUlQiOgogIGV4aXN0cyAiRmlyc3QtdGltZSB1c2VyIG9mIEFSVCBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIkZpcnN0LXRpbWUgdXNlciBvZiBBUlQgT2JzZXJ2YXRpb24iCmRlZmluZSAiRmlyc3QtdGltZSB1c2VyIG9mIEFSVCBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJGaXJzdC10aW1lIHVzZXIgb2YgQVJUIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiRmlyc3QtdGltZSB1c2VyIG9mIEFSVCBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkZpcnN0LXRpbWUgdXNlciBvZiBBUlQgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBGaXJzdC10aW1lIHVzZXIgb2YgQVJUICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFNDUgLSBSZXN0YXJ0aW5nIEFSVApAYWN0aXZpdHk6IEhJVi5EOCBDYXB0dXJlIG9yIHVwZGF0ZSBjbGllbnQgaGlzdG9yeQpAZGVzY3JpcHRpb246IENsaWVudCBpcyByZXN0YXJ0aW5nIEFSVCBhZnRlciBzdG9wcGluZyB0cmVhdG1lbnQgZm9yIGFueSByZWFzb24KKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIlJlc3RhcnRpbmcgQVJUIjoKICBleGlzdHMgIlJlc3RhcnRpbmcgQVJUIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiUmVzdGFydGluZyBBUlQgT2JzZXJ2YXRpb24iCmRlZmluZSAiUmVzdGFydGluZyBBUlQgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iUmVzdGFydGluZyBBUlQgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJSZXN0YXJ0aW5nIEFSVCBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIlJlc3RhcnRpbmcgQVJUIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgUmVzdGFydGluZyBBUlQgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREU3NSAtIEN1cnJlbnQgQVJUIHJlZ2ltZW4KQGFjdGl2aXR5OiBISVYuRDggQ2FwdHVyZSBvciB1cGRhdGUgY2xpZW50IGhpc3RvcnkKQGRlc2NyaXB0aW9uOiBUaGUgY3VycmVudCBBUlQgcmVnaW1lbiB0aGUgY2xpZW50IGlzIHRha2luZwoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiQ3VycmVudCBBUlQgcmVnaW1lbiI6CiAgZXhpc3RzICJDdXJyZW50IEFSVCByZWdpbWVuIE9ic2VydmF0aW9uIgpkZWZpbmUgIkN1cnJlbnQgQVJUIHJlZ2ltZW4gT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJDdXJyZW50IEFSVCByZWdpbWVuIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgQ3VycmVudCBBUlQgcmVnaW1lbiAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTc3IC0gUHJlZmVycmVkIGZpcnN0LWxpbmUgQVJUIHJlZ2ltZW4KQGFjdGl2aXR5OiBISVYuRDggQ2FwdHVyZSBvciB1cGRhdGUgY2xpZW50IGhpc3RvcnkKQGRlc2NyaXB0aW9uOiBUaGUgcHJlZmVycmVkIGZpcnN0LWxpbmUgQVJUIHJlZ2ltZW4gZm9yIHRoZSBjbGllbnQgYWNjb3JkaW5nIHRvIFdITyAob3IgbmF0aW9uYWwpIGd1aWRlbGluZXMKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIlByZWZlcnJlZCBmaXJzdC1saW5lIEFSVCByZWdpbWVuIjoKICBleGlzdHMgIlByZWZlcnJlZCBmaXJzdC1saW5lIEFSVCByZWdpbWVuIE9ic2VydmF0aW9uIgpkZWZpbmUgIlByZWZlcnJlZCBmaXJzdC1saW5lIEFSVCByZWdpbWVuIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iUHJlZmVycmVkIGZpcnN0LWxpbmUgQVJUIHJlZ2ltZW4gT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBQcmVmZXJyZWQgZmlyc3QtbGluZSBBUlQgcmVnaW1lbiAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTc4IC0gQWx0ZXJuYXRpdmUgZmlyc3QtbGluZSBBUlQgcmVnaW1lbgpAYWN0aXZpdHk6IEhJVi5EOCBDYXB0dXJlIG9yIHVwZGF0ZSBjbGllbnQgaGlzdG9yeQpAZGVzY3JpcHRpb246IFRoZSBhbHRlcm5hdGl2ZSBmaXJzdC1saW5lIEFSVCByZWdpbWVuIGZvciB0aGUgY2xpZW50IGFjY29yZGluZyB0byBXSE8gKG9yIG5hdGlvbmFsKSBndWlkZWxpbmVzCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJBbHRlcm5hdGl2ZSBmaXJzdC1saW5lIEFSVCByZWdpbWVuIjoKICBleGlzdHMgIkFsdGVybmF0aXZlIGZpcnN0LWxpbmUgQVJUIHJlZ2ltZW4gT2JzZXJ2YXRpb24iCmRlZmluZSAiQWx0ZXJuYXRpdmUgZmlyc3QtbGluZSBBUlQgcmVnaW1lbiBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkFsdGVybmF0aXZlIGZpcnN0LWxpbmUgQVJUIHJlZ2ltZW4gT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBBbHRlcm5hdGl2ZSBmaXJzdC1saW5lIEFSVCByZWdpbWVuICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFNzkgLSBGaXJzdC1saW5lIEFSVCByZWdpbWVuIHVuZGVyIHNwZWNpYWwgY2lyY3Vtc3RhbmNlcwpAYWN0aXZpdHk6IEhJVi5EOCBDYXB0dXJlIG9yIHVwZGF0ZSBjbGllbnQgaGlzdG9yeQpAZGVzY3JpcHRpb246IFRoZSBmaXJzdC1saW5lIEFSVCByZWdpbWVuIGZvciB0aGUgY2xpZW50IHVuZGVyIHNwZWNpYWwgY2lyY3Vtc3RhbmNlcyBhY2NvcmRpbmcgdG8gV0hPIChvciBuYXRpb25hbCkgZ3VpZGVsaW5lcwoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiRmlyc3QtbGluZSBBUlQgcmVnaW1lbiB1bmRlciBzcGVjaWFsIGNpcmN1bXN0YW5jZXMiOgogIGV4aXN0cyAiRmlyc3QtbGluZSBBUlQgcmVnaW1lbiB1bmRlciBzcGVjaWFsIGNpcmN1bXN0YW5jZXMgT2JzZXJ2YXRpb24iCmRlZmluZSAiRmlyc3QtbGluZSBBUlQgcmVnaW1lbiB1bmRlciBzcGVjaWFsIGNpcmN1bXN0YW5jZXMgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJGaXJzdC1saW5lIEFSVCByZWdpbWVuIHVuZGVyIHNwZWNpYWwgY2lyY3Vtc3RhbmNlcyBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIEZpcnN0LWxpbmUgQVJUIHJlZ2ltZW4gdW5kZXIgc3BlY2lhbCBjaXJjdW1zdGFuY2VzICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFODAgLSBQcmVmZXJyZWQgc2Vjb25kLWxpbmUgQVJUIHJlZ2ltZW4KQGFjdGl2aXR5OiBISVYuRDggQ2FwdHVyZSBvciB1cGRhdGUgY2xpZW50IGhpc3RvcnkKQGRlc2NyaXB0aW9uOiBUaGUgcHJlZmVycmVkIHNlY29uZC1saW5lIEFSVCByZWdpbWVuIGZvciB0aGUgY2xpZW50IGFjY29yZGluZyB0byBXSE8gKG9yIG5hdGlvbmFsKSBndWlkZWxpbmVzCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJQcmVmZXJyZWQgc2Vjb25kLWxpbmUgQVJUIHJlZ2ltZW4iOgogIGV4aXN0cyAiUHJlZmVycmVkIHNlY29uZC1saW5lIEFSVCByZWdpbWVuIE9ic2VydmF0aW9uIgpkZWZpbmUgIlByZWZlcnJlZCBzZWNvbmQtbGluZSBBUlQgcmVnaW1lbiBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIlByZWZlcnJlZCBzZWNvbmQtbGluZSBBUlQgcmVnaW1lbiBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIFByZWZlcnJlZCBzZWNvbmQtbGluZSBBUlQgcmVnaW1lbiAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTgxIC0gQWx0ZXJuYXRpdmUgc2Vjb25kLWxpbmUgQVJUIHJlZ2ltZW4KQGFjdGl2aXR5OiBISVYuRDggQ2FwdHVyZSBvciB1cGRhdGUgY2xpZW50IGhpc3RvcnkKQGRlc2NyaXB0aW9uOiBUaGUgYWx0ZXJuYXRpdmUgc2Vjb25kLWxpbmUgQVJUIHJlZ2ltZW4gZm9yIHRoZSBjbGllbnQgYWNjb3JkaW5nIHRvIFdITyAob3IgbmF0aW9uYWwpIGd1aWRlbGluZXMKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkFsdGVybmF0aXZlIHNlY29uZC1saW5lIEFSVCByZWdpbWVuIjoKICBleGlzdHMgIkFsdGVybmF0aXZlIHNlY29uZC1saW5lIEFSVCByZWdpbWVuIE9ic2VydmF0aW9uIgpkZWZpbmUgIkFsdGVybmF0aXZlIHNlY29uZC1saW5lIEFSVCByZWdpbWVuIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iQWx0ZXJuYXRpdmUgc2Vjb25kLWxpbmUgQVJUIHJlZ2ltZW4gT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBBbHRlcm5hdGl2ZSBzZWNvbmQtbGluZSBBUlQgcmVnaW1lbiAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTgyIC0gT3B0aW1hbCByZWdpbWVuIGZvciB0cmFuc2l0aW9uCkBhY3Rpdml0eTogSElWLkQ4IENhcHR1cmUgb3IgdXBkYXRlIGNsaWVudCBoaXN0b3J5CkBkZXNjcmlwdGlvbjogVGhlIG9wdGltYWwgcmVnaW1lbiBmb3IgdHJhbnNpdGlvbiB0byBEVEctYmFzZWQgcmVnaW1lbnMgZm9yIGNoaWxkcmVuIGVzdGFibGlzaGVkIG9uIEFSVAoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiT3B0aW1hbCByZWdpbWVuIGZvciB0cmFuc2l0aW9uIjoKICBleGlzdHMgIk9wdGltYWwgcmVnaW1lbiBmb3IgdHJhbnNpdGlvbiBPYnNlcnZhdGlvbiIKZGVmaW5lICJPcHRpbWFsIHJlZ2ltZW4gZm9yIHRyYW5zaXRpb24gT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJPcHRpbWFsIHJlZ2ltZW4gZm9yIHRyYW5zaXRpb24gT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBPcHRpbWFsIHJlZ2ltZW4gZm9yIHRyYW5zaXRpb24gKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREU4MyAtIEN1cnJlbnQgQVJUIHJlZ2ltZW4gZmlyc3QtLCBzZWNvbmQtLCBvciB0aGlyZC1saW5lCkBhY3Rpdml0eTogSElWLkQ4IENhcHR1cmUgb3IgdXBkYXRlIGNsaWVudCBoaXN0b3J5CkBkZXNjcmlwdGlvbjogQVJUIHJlZ2ltZW4gZm9yIHRyZWF0aW5nIGNsaWVudHMgbGl2aW5nIHdpdGggSElWLCBiYXNlZCBvbiBuYXRpb25hbCBndWlkYW5jZQoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiQ3VycmVudCBBUlQgcmVnaW1lbiBmaXJzdC0sIHNlY29uZC0sIG9yIHRoaXJkLWxpbmUiOgogIGV4aXN0cyAiQ3VycmVudCBBUlQgcmVnaW1lbiBmaXJzdC0sIHNlY29uZC0sIG9yIHRoaXJkLWxpbmUgT2JzZXJ2YXRpb24iCmRlZmluZSAiQ3VycmVudCBBUlQgcmVnaW1lbiBmaXJzdC0sIHNlY29uZC0sIG9yIHRoaXJkLWxpbmUgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJDdXJyZW50IEFSVCByZWdpbWVuIGZpcnN0LSwgc2Vjb25kLSwgb3IgdGhpcmQtbGluZSBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIEN1cnJlbnQgQVJUIHJlZ2ltZW4gZmlyc3QtLCBzZWNvbmQtLCBvciB0aGlyZC1saW5lICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFODQgLSBGaXJzdC1saW5lIEFSVCByZWdpbWVuIGZvciBhZHVsdHMgYW5kIGFkb2xlc2NlbnRzCkBhY3Rpdml0eTogSElWLkQ4IENhcHR1cmUgb3IgdXBkYXRlIGNsaWVudCBoaXN0b3J5CkBkZXNjcmlwdGlvbjogRmlyc3QtbGluZSBBUlQgcmVnaW1lbiBmb3IgYWR1bHRzIGFuZCBhZG9sZXNjZW50cyBsaXZpbmcgd2l0aCBISVYKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkZpcnN0LWxpbmUgQVJUIHJlZ2ltZW4gZm9yIGFkdWx0cyBhbmQgYWRvbGVzY2VudHMiOgogIGV4aXN0cyAiRmlyc3QtbGluZSBBUlQgcmVnaW1lbiBmb3IgYWR1bHRzIGFuZCBhZG9sZXNjZW50cyBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIkZpcnN0LWxpbmUgQVJUIHJlZ2ltZW4gZm9yIGFkdWx0cyBhbmQgYWRvbGVzY2VudHMgT2JzZXJ2YXRpb24iCmRlZmluZSAiRmlyc3QtbGluZSBBUlQgcmVnaW1lbiBmb3IgYWR1bHRzIGFuZCBhZG9sZXNjZW50cyBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJGaXJzdC1saW5lIEFSVCByZWdpbWVuIGZvciBhZHVsdHMgYW5kIGFkb2xlc2NlbnRzIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiRmlyc3QtbGluZSBBUlQgcmVnaW1lbiBmb3IgYWR1bHRzIGFuZCBhZG9sZXNjZW50cyBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkZpcnN0LWxpbmUgQVJUIHJlZ2ltZW4gZm9yIGFkdWx0cyBhbmQgYWRvbGVzY2VudHMgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBGaXJzdC1saW5lIEFSVCByZWdpbWVuIGZvciBhZHVsdHMgYW5kIGFkb2xlc2NlbnRzICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFODUgLSBGaXJzdC1saW5lIEFSVCByZWdpbWVuIGZvciBjaGlsZHJlbgpAYWN0aXZpdHk6IEhJVi5EOCBDYXB0dXJlIG9yIHVwZGF0ZSBjbGllbnQgaGlzdG9yeQpAZGVzY3JpcHRpb246IEZpcnN0LWxpbmUgQVJUIHJlZ2ltZW4gZm9yIGNoaWxkcmVuIGxpdmluZyB3aXRoIEhJVgoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiRmlyc3QtbGluZSBBUlQgcmVnaW1lbiBmb3IgY2hpbGRyZW4iOgogIGV4aXN0cyAiRmlyc3QtbGluZSBBUlQgcmVnaW1lbiBmb3IgY2hpbGRyZW4gQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJGaXJzdC1saW5lIEFSVCByZWdpbWVuIGZvciBjaGlsZHJlbiBPYnNlcnZhdGlvbiIKZGVmaW5lICJGaXJzdC1saW5lIEFSVCByZWdpbWVuIGZvciBjaGlsZHJlbiBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJGaXJzdC1saW5lIEFSVCByZWdpbWVuIGZvciBjaGlsZHJlbiBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIkZpcnN0LWxpbmUgQVJUIHJlZ2ltZW4gZm9yIGNoaWxkcmVuIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iRmlyc3QtbGluZSBBUlQgcmVnaW1lbiBmb3IgY2hpbGRyZW4gT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBGaXJzdC1saW5lIEFSVCByZWdpbWVuIGZvciBjaGlsZHJlbiAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTg2IC0gRmlyc3QtbGluZSBBUlQgcmVnaW1lbiBmb3IgbmVvbmF0ZXMKQGFjdGl2aXR5OiBISVYuRDggQ2FwdHVyZSBvciB1cGRhdGUgY2xpZW50IGhpc3RvcnkKQGRlc2NyaXB0aW9uOiBGaXJzdC1saW5lIEFSVCByZWdpbWVuIGZvciBuZW9uYXRlcyBsaXZpbmcgd2l0aCBISVYKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkZpcnN0LWxpbmUgQVJUIHJlZ2ltZW4gZm9yIG5lb25hdGVzIjoKICBleGlzdHMgIkZpcnN0LWxpbmUgQVJUIHJlZ2ltZW4gZm9yIG5lb25hdGVzIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiRmlyc3QtbGluZSBBUlQgcmVnaW1lbiBmb3IgbmVvbmF0ZXMgT2JzZXJ2YXRpb24iCmRlZmluZSAiRmlyc3QtbGluZSBBUlQgcmVnaW1lbiBmb3IgbmVvbmF0ZXMgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iRmlyc3QtbGluZSBBUlQgcmVnaW1lbiBmb3IgbmVvbmF0ZXMgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJGaXJzdC1saW5lIEFSVCByZWdpbWVuIGZvciBuZW9uYXRlcyBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkZpcnN0LWxpbmUgQVJUIHJlZ2ltZW4gZm9yIG5lb25hdGVzIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgRmlyc3QtbGluZSBBUlQgcmVnaW1lbiBmb3IgbmVvbmF0ZXMgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREU4NyAtIFNlY29uZC1saW5lIEFSVCByZWdpbWVuIGZvciBhZHVsdHMgYW5kIGFkb2xlc2NlbnRzCkBhY3Rpdml0eTogSElWLkQ4IENhcHR1cmUgb3IgdXBkYXRlIGNsaWVudCBoaXN0b3J5CkBkZXNjcmlwdGlvbjogU2Vjb25kLWxpbmUgQVJUIHJlZ2ltZW4gZm9yIGFkdWx0cyBhbmQgYWRvbGVzY2VudHMgbGl2aW5nIHdpdGggSElWCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJTZWNvbmQtbGluZSBBUlQgcmVnaW1lbiBmb3IgYWR1bHRzIGFuZCBhZG9sZXNjZW50cyI6CiAgZXhpc3RzICJTZWNvbmQtbGluZSBBUlQgcmVnaW1lbiBmb3IgYWR1bHRzIGFuZCBhZG9sZXNjZW50cyBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIlNlY29uZC1saW5lIEFSVCByZWdpbWVuIGZvciBhZHVsdHMgYW5kIGFkb2xlc2NlbnRzIE9ic2VydmF0aW9uIgpkZWZpbmUgIlNlY29uZC1saW5lIEFSVCByZWdpbWVuIGZvciBhZHVsdHMgYW5kIGFkb2xlc2NlbnRzIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIlNlY29uZC1saW5lIEFSVCByZWdpbWVuIGZvciBhZHVsdHMgYW5kIGFkb2xlc2NlbnRzIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiU2Vjb25kLWxpbmUgQVJUIHJlZ2ltZW4gZm9yIGFkdWx0cyBhbmQgYWRvbGVzY2VudHMgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJTZWNvbmQtbGluZSBBUlQgcmVnaW1lbiBmb3IgYWR1bHRzIGFuZCBhZG9sZXNjZW50cyBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIFNlY29uZC1saW5lIEFSVCByZWdpbWVuIGZvciBhZHVsdHMgYW5kIGFkb2xlc2NlbnRzICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFODggLSBTZWNvbmQtbGluZSBBUlQgcmVnaW1lbiBmb3IgY2hpbGRyZW4KQGFjdGl2aXR5OiBISVYuRDggQ2FwdHVyZSBvciB1cGRhdGUgY2xpZW50IGhpc3RvcnkKQGRlc2NyaXB0aW9uOiBTZWNvbmQtbGluZSBBUlQgcmVnaW1lbiBmb3IgY2hpbGRyZW4gbGl2aW5nIHdpdGggSElWCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJTZWNvbmQtbGluZSBBUlQgcmVnaW1lbiBmb3IgY2hpbGRyZW4iOgogIGV4aXN0cyAiU2Vjb25kLWxpbmUgQVJUIHJlZ2ltZW4gZm9yIGNoaWxkcmVuIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiU2Vjb25kLWxpbmUgQVJUIHJlZ2ltZW4gZm9yIGNoaWxkcmVuIE9ic2VydmF0aW9uIgpkZWZpbmUgIlNlY29uZC1saW5lIEFSVCByZWdpbWVuIGZvciBjaGlsZHJlbiBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJTZWNvbmQtbGluZSBBUlQgcmVnaW1lbiBmb3IgY2hpbGRyZW4gQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJTZWNvbmQtbGluZSBBUlQgcmVnaW1lbiBmb3IgY2hpbGRyZW4gT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJTZWNvbmQtbGluZSBBUlQgcmVnaW1lbiBmb3IgY2hpbGRyZW4gT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBTZWNvbmQtbGluZSBBUlQgcmVnaW1lbiBmb3IgY2hpbGRyZW4gKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREU4OSAtIFRoaXJkLWxpbmUgQVJUIHJlZ2ltZW4KQGFjdGl2aXR5OiBISVYuRDggQ2FwdHVyZSBvciB1cGRhdGUgY2xpZW50IGhpc3RvcnkKQGRlc2NyaXB0aW9uOiBUaGlyZC1saW5lIEFSVCByZWdpbWVuIGZvciBwZW9wbGUgbGl2aW5nIHdpdGggSElWIChOb3QgZGVmaW5lZCBieSBXSE8uIE5hdGlvbmFsIHByb2dyYW1tZXMgc2hvdWxkIGRldmVsb3AgcG9saWNpZXMgZm9yIHRoaXJkLWxpbmUgQVJUKQoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiVGhpcmQtbGluZSBBUlQgcmVnaW1lbiI6CiAgZXhpc3RzICJUaGlyZC1saW5lIEFSVCByZWdpbWVuIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiVGhpcmQtbGluZSBBUlQgcmVnaW1lbiBPYnNlcnZhdGlvbiIKZGVmaW5lICJUaGlyZC1saW5lIEFSVCByZWdpbWVuIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIlRoaXJkLWxpbmUgQVJUIHJlZ2ltZW4gQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJUaGlyZC1saW5lIEFSVCByZWdpbWVuIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iVGhpcmQtbGluZSBBUlQgcmVnaW1lbiBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIFRoaXJkLWxpbmUgQVJUIHJlZ2ltZW4gKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREUxMjggLSBBUlQgcmVnaW1lbiBjb21wb3NpdGlvbgpAYWN0aXZpdHk6IEhJVi5EOCBDYXB0dXJlIG9yIHVwZGF0ZSBjbGllbnQgaGlzdG9yeQpAZGVzY3JpcHRpb246IERydWcgY29tcG9zaXRpb24gb2YgY2xpZW50J3MgY3VycmVudCBBUlQgcmVnaW1lbgoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiQVJUIHJlZ2ltZW4gY29tcG9zaXRpb24iOgogIGV4aXN0cyAiQVJUIHJlZ2ltZW4gY29tcG9zaXRpb24gT2JzZXJ2YXRpb24iCmRlZmluZSAiQVJUIHJlZ2ltZW4gY29tcG9zaXRpb24gT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJBUlQgcmVnaW1lbiBjb21wb3NpdGlvbiBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIEFSVCByZWdpbWVuIGNvbXBvc2l0aW9uICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFMTI5IC0gQUJDCkBhY3Rpdml0eTogSElWLkQ4IENhcHR1cmUgb3IgdXBkYXRlIGNsaWVudCBoaXN0b3J5CkBkZXNjcmlwdGlvbjogVHJlYXRlZCB3aXRoIGFiYWNhdmlyIChBQkMpCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJBQkMiOgogIGV4aXN0cyAiQUJDIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiQUJDIE9ic2VydmF0aW9uIgpkZWZpbmUgIkFCQyBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJBQkMgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJBQkMgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJBQkMgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBBQkMgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREUxMzAgLSBGVEMKQGFjdGl2aXR5OiBISVYuRDggQ2FwdHVyZSBvciB1cGRhdGUgY2xpZW50IGhpc3RvcnkKQGRlc2NyaXB0aW9uOiBUcmVhdGVkIHdpdGggZW10cmljaXRhYmluZSAoRlRDKQoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiRlRDIjoKICBleGlzdHMgIkZUQyBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIkZUQyBPYnNlcnZhdGlvbiIKZGVmaW5lICJGVEMgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iRlRDIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiRlRDIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iRlRDIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgRlRDICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFMTMxIC0gM1RDCkBhY3Rpdml0eTogSElWLkQ4IENhcHR1cmUgb3IgdXBkYXRlIGNsaWVudCBoaXN0b3J5CkBkZXNjcmlwdGlvbjogVHJlYXRlZCB3aXRoIGxhbWl2dWRpbmUgKDNUQykKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIjNUQyI6CiAgZXhpc3RzICIzVEMgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICIzVEMgT2JzZXJ2YXRpb24iCmRlZmluZSAiM1RDIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIjNUQyBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIjNUQyBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIjNUQyBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIDNUQyAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTEzMiAtIEFaVApAYWN0aXZpdHk6IEhJVi5EOCBDYXB0dXJlIG9yIHVwZGF0ZSBjbGllbnQgaGlzdG9yeQpAZGVzY3JpcHRpb246IFRyZWF0ZWQgd2l0aCB6aWRvdnVkaW5lIChBWlQpCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJBWlQiOgogIGV4aXN0cyAiQVpUIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiQVpUIE9ic2VydmF0aW9uIgpkZWZpbmUgIkFaVCBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJBWlQgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJBWlQgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJBWlQgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBBWlQgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREUxMzMgLSBEREkKQGFjdGl2aXR5OiBISVYuRDggQ2FwdHVyZSBvciB1cGRhdGUgY2xpZW50IGhpc3RvcnkKQGRlc2NyaXB0aW9uOiBUcmVhdGVkIHdpdGggZGlkYW5vc2luZSAoRERJKQoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiRERJIjoKICBleGlzdHMgIkRESSBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIkRESSBPYnNlcnZhdGlvbiIKZGVmaW5lICJEREkgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iRERJIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiRERJIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iRERJIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgRERJICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFMTM0IC0gRDRUCkBhY3Rpdml0eTogSElWLkQ4IENhcHR1cmUgb3IgdXBkYXRlIGNsaWVudCBoaXN0b3J5CkBkZXNjcmlwdGlvbjogVHJlYXRlZCB3aXRoIHN0YXZ1ZGluZSAoRDRUKQoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiRDRUIjoKICBleGlzdHMgIkQ0VCBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIkQ0VCBPYnNlcnZhdGlvbiIKZGVmaW5lICJENFQgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iRDRUIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiRDRUIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iRDRUIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgRDRUICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFMTM1IC0gVERGCkBhY3Rpdml0eTogSElWLkQ4IENhcHR1cmUgb3IgdXBkYXRlIGNsaWVudCBoaXN0b3J5CkBkZXNjcmlwdGlvbjogVHJlYXRlZCB3aXRoIHRlbm9mb3ZpciAoVERGKQoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiVERGIEQuREUxMzUiOgogIGV4aXN0cyAiVERGIEQuREUxMzUgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJUREYgRC5ERTEzNSBPYnNlcnZhdGlvbiIKZGVmaW5lICJUREYgRC5ERTEzNSBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJUREYgRC5ERTEzNSBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIlRERiBELkRFMTM1IE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iVERGIEQuREUxMzUgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBUREYgRC5ERTEzNSAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTEzNiAtIEVGVgpAYWN0aXZpdHk6IEhJVi5EOCBDYXB0dXJlIG9yIHVwZGF0ZSBjbGllbnQgaGlzdG9yeQpAZGVzY3JpcHRpb246IFRyZWF0ZWQgd2l0aCBlZmF2aXJlbnogKEVGVikKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkVGViI6CiAgZXhpc3RzICJFRlYgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJFRlYgT2JzZXJ2YXRpb24iCmRlZmluZSAiRUZWIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIkVGViBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIkVGViBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkVGViBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIEVGViAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTEzNyAtIEVUVgpAYWN0aXZpdHk6IEhJVi5EOCBDYXB0dXJlIG9yIHVwZGF0ZSBjbGllbnQgaGlzdG9yeQpAZGVzY3JpcHRpb246IFRyZWF0ZWQgd2l0aCBldHJhdmlyaW5lIChFVFYpCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJFVFYiOgogIGV4aXN0cyAiRVRWIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiRVRWIE9ic2VydmF0aW9uIgpkZWZpbmUgIkVUViBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJFVFYgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJFVFYgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJFVFYgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBFVFYgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREUxMzggLSBOVlAKQGFjdGl2aXR5OiBISVYuRDggQ2FwdHVyZSBvciB1cGRhdGUgY2xpZW50IGhpc3RvcnkKQGRlc2NyaXB0aW9uOiBUcmVhdGVkIHdpdGggbmV2aXJhcGluZSAoTlZQKQoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiTlZQIjoKICBleGlzdHMgIk5WUCBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIk5WUCBPYnNlcnZhdGlvbiIKZGVmaW5lICJOVlAgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iTlZQIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiTlZQIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iTlZQIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgTlZQICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFMTM5IC0gUklMCkBhY3Rpdml0eTogSElWLkQ4IENhcHR1cmUgb3IgdXBkYXRlIGNsaWVudCBoaXN0b3J5CkBkZXNjcmlwdGlvbjogVHJlYXRlZCB3aXRoIHJpbHBpdmlyaW5lIChSSUwpCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJSSUwiOgogIGV4aXN0cyAiUklMIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiUklMIE9ic2VydmF0aW9uIgpkZWZpbmUgIlJJTCBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJSSUwgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJSSUwgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJSSUwgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBSSUwgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREUxNDAgLSBBVFYvcgpAYWN0aXZpdHk6IEhJVi5EOCBDYXB0dXJlIG9yIHVwZGF0ZSBjbGllbnQgaGlzdG9yeQpAZGVzY3JpcHRpb246IFRyZWF0ZWQgd2l0aCBhdGF6YW5hdmlyL3JpdG9uYXZpciAoQVRWL3IpCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJBVFYvciBELkRFMTQwIjoKICBleGlzdHMgIkFUVi9yIEQuREUxNDAgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJBVFYvciBELkRFMTQwIE9ic2VydmF0aW9uIgpkZWZpbmUgIkFUVi9yIEQuREUxNDAgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iQVRWL3IgRC5ERTE0MCBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIkFUVi9yIEQuREUxNDAgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJBVFYvciBELkRFMTQwIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgQVRWL3IgRC5ERTE0MCAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTE0MSAtIExQVi9yCkBhY3Rpdml0eTogSElWLkQ4IENhcHR1cmUgb3IgdXBkYXRlIGNsaWVudCBoaXN0b3J5CkBkZXNjcmlwdGlvbjogVHJlYXRlZCB3aXRoIGxvcGluYXZpci9yaXRvbmF2aXIgKExQVi9yKQoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiTFBWL3IgRC5ERTE0MSI6CiAgZXhpc3RzICJMUFYvciBELkRFMTQxIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiTFBWL3IgRC5ERTE0MSBPYnNlcnZhdGlvbiIKZGVmaW5lICJMUFYvciBELkRFMTQxIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIkxQVi9yIEQuREUxNDEgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJMUFYvciBELkRFMTQxIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iTFBWL3IgRC5ERTE0MSBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIExQVi9yIEQuREUxNDEgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREUxNDIgLSBEUlYvcgpAYWN0aXZpdHk6IEhJVi5EOCBDYXB0dXJlIG9yIHVwZGF0ZSBjbGllbnQgaGlzdG9yeQpAZGVzY3JpcHRpb246IFRyZWF0ZWQgd2l0aCBkYXJ1bmF2aXIvcml0b25hdmlyIChEUlYvcikKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkRSVi9yIEQuREUxNDIiOgogIGV4aXN0cyAiRFJWL3IgRC5ERTE0MiBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIkRSVi9yIEQuREUxNDIgT2JzZXJ2YXRpb24iCmRlZmluZSAiRFJWL3IgRC5ERTE0MiBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJEUlYvciBELkRFMTQyIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiRFJWL3IgRC5ERTE0MiBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkRSVi9yIEQuREUxNDIgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBEUlYvciBELkRFMTQyICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFMTQzIC0gUlRWCkBhY3Rpdml0eTogSElWLkQ4IENhcHR1cmUgb3IgdXBkYXRlIGNsaWVudCBoaXN0b3J5CkBkZXNjcmlwdGlvbjogVHJlYXRlZCB3aXRoIHJpdG9uYXZpciAoUlRWKQoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiUlRWIjoKICBleGlzdHMgIlJUViBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIlJUViBPYnNlcnZhdGlvbiIKZGVmaW5lICJSVFYgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iUlRWIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiUlRWIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iUlRWIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgUlRWICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFMTQ0IC0gRFRHCkBhY3Rpdml0eTogSElWLkQ4IENhcHR1cmUgb3IgdXBkYXRlIGNsaWVudCBoaXN0b3J5CkBkZXNjcmlwdGlvbjogVHJlYXRlZCB3aXRoIGRvbHV0ZWdyYXZpciAoRFRHKQoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiRFRHIEQuREUxNDQiOgogIGV4aXN0cyAiRFRHIEQuREUxNDQgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJEVEcgRC5ERTE0NCBPYnNlcnZhdGlvbiIKZGVmaW5lICJEVEcgRC5ERTE0NCBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJEVEcgRC5ERTE0NCBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIkRURyBELkRFMTQ0IE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iRFRHIEQuREUxNDQgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBEVEcgRC5ERTE0NCAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTE0NSAtIFJBTApAYWN0aXZpdHk6IEhJVi5EOCBDYXB0dXJlIG9yIHVwZGF0ZSBjbGllbnQgaGlzdG9yeQpAZGVzY3JpcHRpb246IFRyZWF0ZWQgd2l0aCByYWx0ZWdyYXZpciAoUkFMKQoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiUkFMIEQuREUxNDUiOgogIGV4aXN0cyAiUkFMIEQuREUxNDUgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJSQUwgRC5ERTE0NSBPYnNlcnZhdGlvbiIKZGVmaW5lICJSQUwgRC5ERTE0NSBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJSQUwgRC5ERTE0NSBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIlJBTCBELkRFMTQ1IE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iUkFMIEQuREUxNDUgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBSQUwgRC5ERTE0NSAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTE1MiAtIFByZXZlbnRpb24gc2VydmljZXMgb2ZmZXJlZCBhbmQgcmVmZXJyYWxzCkBhY3Rpdml0eTogSElWLkQxMiBEZXRlcm1pbmUgcmVjb21tZW5kZWQgc2NyZWVuaW5ncyBhbmQgdGVzdHMKQGRlc2NyaXB0aW9uOiBPZmZlciBvciByZWZlciBmb3IgcHJldmVudGlvbiBzZXJ2aWNlcwoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiUHJldmVudGlvbiBzZXJ2aWNlcyBvZmZlcmVkIGFuZCByZWZlcnJhbHMgRC5ERTE1MiI6CiAgZXhpc3RzICJQcmV2ZW50aW9uIHNlcnZpY2VzIG9mZmVyZWQgYW5kIHJlZmVycmFscyBELkRFMTUyIE9ic2VydmF0aW9uIgpkZWZpbmUgIlByZXZlbnRpb24gc2VydmljZXMgb2ZmZXJlZCBhbmQgcmVmZXJyYWxzIEQuREUxNTIgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJQcmV2ZW50aW9uIHNlcnZpY2VzIG9mZmVyZWQgYW5kIHJlZmVycmFscyBELkRFMTUyIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgUHJldmVudGlvbiBzZXJ2aWNlcyBvZmZlcmVkIGFuZCByZWZlcnJhbHMgRC5ERTE1MiAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTE1MyAtIE9mZmVyIG1hbGUgYW5kIGZlbWFsZSBjb25kb21zIGFuZCBjb25kb20tY29tcGF0aWJsZSBsdWJyaWNhbnRzCkBhY3Rpdml0eTogSElWLkQyNiBPZmZlciBzZXh1YWwgYW5kIHJlcHJvZHVjdGl2ZSBoZWFsdGggc2VydmljZXMKQGRlc2NyaXB0aW9uOiBPZmZlciBtYWxlIGFuZCBmZW1hbGUgY29uZG9tcyBhbmQgY29uZG9tLWNvbXBhdGlibGUgbHVicmljYW50cwoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiT2ZmZXIgbWFsZSBhbmQgZmVtYWxlIGNvbmRvbXMgYW5kIGNvbmRvbS1jb21wYXRpYmxlIGx1YnJpY2FudHMgRC5ERTE1MyI6CiAgZXhpc3RzICJPZmZlciBtYWxlIGFuZCBmZW1hbGUgY29uZG9tcyBhbmQgY29uZG9tLWNvbXBhdGlibGUgbHVicmljYW50cyBELkRFMTUzIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiT2ZmZXIgbWFsZSBhbmQgZmVtYWxlIGNvbmRvbXMgYW5kIGNvbmRvbS1jb21wYXRpYmxlIGx1YnJpY2FudHMgRC5ERTE1MyBPYnNlcnZhdGlvbiIKZGVmaW5lICJPZmZlciBtYWxlIGFuZCBmZW1hbGUgY29uZG9tcyBhbmQgY29uZG9tLWNvbXBhdGlibGUgbHVicmljYW50cyBELkRFMTUzIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIk9mZmVyIG1hbGUgYW5kIGZlbWFsZSBjb25kb21zIGFuZCBjb25kb20tY29tcGF0aWJsZSBsdWJyaWNhbnRzIEQuREUxNTMgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJPZmZlciBtYWxlIGFuZCBmZW1hbGUgY29uZG9tcyBhbmQgY29uZG9tLWNvbXBhdGlibGUgbHVicmljYW50cyBELkRFMTUzIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iT2ZmZXIgbWFsZSBhbmQgZmVtYWxlIGNvbmRvbXMgYW5kIGNvbmRvbS1jb21wYXRpYmxlIGx1YnJpY2FudHMgRC5ERTE1MyBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIE9mZmVyIG1hbGUgYW5kIGZlbWFsZSBjb25kb21zIGFuZCBjb25kb20tY29tcGF0aWJsZSBsdWJyaWNhbnRzIEQuREUxNTMgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREUxNTQgLSBIYXJtIHJlZHVjdGlvbiBmb3IgcGVvcGxlIHdobyBpbmplY3QgZHJ1Z3MKQGFjdGl2aXR5OiBISVYuRDEyIERldGVybWluZSByZWNvbW1lbmRlZCBzY3JlZW5pbmdzIGFuZCB0ZXN0cwpAZGVzY3JpcHRpb246IE9mZmVyIG9yIHJlZmVyIHBlb3BsZSB3aG8gaW5qZWN0IGRydWdzIHRvIGhhcm0gcmVkdWN0aW9uIHNlcnZpY2VzIChuZWVkbGUgYW5kIHN5cmluZ2UgcHJvZ3JhbW1lcywgb3Bpb2lkIHN1YnN0aXR1dGlvbiB0aGVyYXB5LCBvdGhlciBkcnVnLWRlcGVuZGVuY2UgdHJlYXRtZW50IGFuZCBvcGlvaWQgb3ZlcmRvc2UgcHJldmVudGlvbiBhbmQgbWFuYWdlbWVudCkKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkhhcm0gcmVkdWN0aW9uIGZvciBwZW9wbGUgd2hvIGluamVjdCBkcnVncyBELkRFMTU0IjoKICBleGlzdHMgIkhhcm0gcmVkdWN0aW9uIGZvciBwZW9wbGUgd2hvIGluamVjdCBkcnVncyBELkRFMTU0IENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiSGFybSByZWR1Y3Rpb24gZm9yIHBlb3BsZSB3aG8gaW5qZWN0IGRydWdzIEQuREUxNTQgT2JzZXJ2YXRpb24iCmRlZmluZSAiSGFybSByZWR1Y3Rpb24gZm9yIHBlb3BsZSB3aG8gaW5qZWN0IGRydWdzIEQuREUxNTQgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iSGFybSByZWR1Y3Rpb24gZm9yIHBlb3BsZSB3aG8gaW5qZWN0IGRydWdzIEQuREUxNTQgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJIYXJtIHJlZHVjdGlvbiBmb3IgcGVvcGxlIHdobyBpbmplY3QgZHJ1Z3MgRC5ERTE1NCBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkhhcm0gcmVkdWN0aW9uIGZvciBwZW9wbGUgd2hvIGluamVjdCBkcnVncyBELkRFMTU0IE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgSGFybSByZWR1Y3Rpb24gZm9yIHBlb3BsZSB3aG8gaW5qZWN0IGRydWdzIEQuREUxNTQgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREUxNTUgLSBCZWhhdmlvdXJhbCBpbnRlcnZlbnRpb25zIHRvIHN1cHBvcnQgcmlzayByZWR1Y3Rpb24KQGFjdGl2aXR5OiBISVYuRDEyIERldGVybWluZSByZWNvbW1lbmRlZCBzY3JlZW5pbmdzIGFuZCB0ZXN0cwpAZGVzY3JpcHRpb246IE9mZmVyIG9yIHJlZmVyIHRvIHNlcnZpY2VzIGZvciBiZWhhdmlvdXJhbCBpbnRlcnZlbnRpb25zIHRvIHN1cHBvcnQgcmlzayByZWR1Y3Rpb24sIHBhcnRpY3VsYXJseSBmb3IgcGVvcGxlIHdpdGggSElWIGFuZCBtZW1iZXJzIG9mIGtleSBwb3B1bGF0aW9ucwoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiQmVoYXZpb3VyYWwgaW50ZXJ2ZW50aW9ucyB0byBzdXBwb3J0IHJpc2sgcmVkdWN0aW9uIEQuREUxNTUiOgogIGV4aXN0cyAiQmVoYXZpb3VyYWwgaW50ZXJ2ZW50aW9ucyB0byBzdXBwb3J0IHJpc2sgcmVkdWN0aW9uIEQuREUxNTUgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJCZWhhdmlvdXJhbCBpbnRlcnZlbnRpb25zIHRvIHN1cHBvcnQgcmlzayByZWR1Y3Rpb24gRC5ERTE1NSBPYnNlcnZhdGlvbiIKZGVmaW5lICJCZWhhdmlvdXJhbCBpbnRlcnZlbnRpb25zIHRvIHN1cHBvcnQgcmlzayByZWR1Y3Rpb24gRC5ERTE1NSBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJCZWhhdmlvdXJhbCBpbnRlcnZlbnRpb25zIHRvIHN1cHBvcnQgcmlzayByZWR1Y3Rpb24gRC5ERTE1NSBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIkJlaGF2aW91cmFsIGludGVydmVudGlvbnMgdG8gc3VwcG9ydCByaXNrIHJlZHVjdGlvbiBELkRFMTU1IE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iQmVoYXZpb3VyYWwgaW50ZXJ2ZW50aW9ucyB0byBzdXBwb3J0IHJpc2sgcmVkdWN0aW9uIEQuREUxNTUgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBCZWhhdmlvdXJhbCBpbnRlcnZlbnRpb25zIHRvIHN1cHBvcnQgcmlzayByZWR1Y3Rpb24gRC5ERTE1NSAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTE1NiAtIFNleHVhbCBhbmQgcmVwcm9kdWN0aXZlIGhlYWx0aCBpbnRlZ3JhdGVkIHNlcnZpY2VzCkBhY3Rpdml0eTogSElWLkQxMiBEZXRlcm1pbmUgcmVjb21tZW5kZWQgc2NyZWVuaW5ncyBhbmQgdGVzdHMKQGRlc2NyaXB0aW9uOiBPZmZlciBvciByZWZlciB0byBzZXh1YWwgYW5kIHJlcHJvZHVjdGl2ZSBoZWFsdGggc2VydmljZXMKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIlNleHVhbCBhbmQgcmVwcm9kdWN0aXZlIGhlYWx0aCBpbnRlZ3JhdGVkIHNlcnZpY2VzIEQuREUxNTYiOgogIGV4aXN0cyAiU2V4dWFsIGFuZCByZXByb2R1Y3RpdmUgaGVhbHRoIGludGVncmF0ZWQgc2VydmljZXMgRC5ERTE1NiBPYnNlcnZhdGlvbiIKZGVmaW5lICJTZXh1YWwgYW5kIHJlcHJvZHVjdGl2ZSBoZWFsdGggaW50ZWdyYXRlZCBzZXJ2aWNlcyBELkRFMTU2IE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iU2V4dWFsIGFuZCByZXByb2R1Y3RpdmUgaGVhbHRoIGludGVncmF0ZWQgc2VydmljZXMgRC5ERTE1NiBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIFNleHVhbCBhbmQgcmVwcm9kdWN0aXZlIGhlYWx0aCBpbnRlZ3JhdGVkIHNlcnZpY2VzIEQuREUxNTYgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREUxNTcgLSBDb250cmFjZXB0aW9uIGFuZCBmYW1pbHkgcGxhbm5pbmcKQGFjdGl2aXR5OiBISVYuRDEyIERldGVybWluZSByZWNvbW1lbmRlZCBzY3JlZW5pbmdzIGFuZCB0ZXN0cwpAZGVzY3JpcHRpb246IE9mZmVyIGNvbnRyYWNlcHRpb24gYW5kIGZhbWlseSBwbGFubmluZyBzZXJ2aWNlcwoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiQ29udHJhY2VwdGlvbiBhbmQgZmFtaWx5IHBsYW5uaW5nIEQuREUxNTciOgogIGV4aXN0cyAiQ29udHJhY2VwdGlvbiBhbmQgZmFtaWx5IHBsYW5uaW5nIEQuREUxNTcgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJDb250cmFjZXB0aW9uIGFuZCBmYW1pbHkgcGxhbm5pbmcgRC5ERTE1NyBPYnNlcnZhdGlvbiIKZGVmaW5lICJDb250cmFjZXB0aW9uIGFuZCBmYW1pbHkgcGxhbm5pbmcgRC5ERTE1NyBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJDb250cmFjZXB0aW9uIGFuZCBmYW1pbHkgcGxhbm5pbmcgRC5ERTE1NyBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIkNvbnRyYWNlcHRpb24gYW5kIGZhbWlseSBwbGFubmluZyBELkRFMTU3IE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iQ29udHJhY2VwdGlvbiBhbmQgZmFtaWx5IHBsYW5uaW5nIEQuREUxNTcgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBDb250cmFjZXB0aW9uIGFuZCBmYW1pbHkgcGxhbm5pbmcgRC5ERTE1NyAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTE1OCAtIENoZWNrIHByZWduYW5jeSBzdGF0dXMKQGFjdGl2aXR5OiBISVYuRDEyIERldGVybWluZSByZWNvbW1lbmRlZCBzY3JlZW5pbmdzIGFuZCB0ZXN0cwpAZGVzY3JpcHRpb246IENoZWNrIHdvbWFuJ3MgcHJlZ25hbmN5IHN0YXR1cwoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiQ2hlY2sgcHJlZ25hbmN5IHN0YXR1cyBELkRFMTU4IjoKICBleGlzdHMgIkNoZWNrIHByZWduYW5jeSBzdGF0dXMgRC5ERTE1OCBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIkNoZWNrIHByZWduYW5jeSBzdGF0dXMgRC5ERTE1OCBPYnNlcnZhdGlvbiIKZGVmaW5lICJDaGVjayBwcmVnbmFuY3kgc3RhdHVzIEQuREUxNTggQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iQ2hlY2sgcHJlZ25hbmN5IHN0YXR1cyBELkRFMTU4IENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiQ2hlY2sgcHJlZ25hbmN5IHN0YXR1cyBELkRFMTU4IE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iQ2hlY2sgcHJlZ25hbmN5IHN0YXR1cyBELkRFMTU4IE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgQ2hlY2sgcHJlZ25hbmN5IHN0YXR1cyBELkRFMTU4ICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFMTU5IC0gUHJldmVudGlvbiBvZiBtb3RoZXItdG8tY2hpbGQgdHJhbnNtaXNzaW9uCkBhY3Rpdml0eTogSElWLkQxMiBEZXRlcm1pbmUgcmVjb21tZW5kZWQgc2NyZWVuaW5ncyBhbmQgdGVzdHMKQGRlc2NyaXB0aW9uOiBPZmZlciBwcmV2ZW50aW9uIG9mIG1vdGhlci10by1jaGlsZCB0cmFuc21pc3Npb24gc2VydmljZXMgKGNvdW5zZWxsaW5nKQoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiUHJldmVudGlvbiBvZiBtb3RoZXItdG8tY2hpbGQgdHJhbnNtaXNzaW9uIjoKICBleGlzdHMgIlByZXZlbnRpb24gb2YgbW90aGVyLXRvLWNoaWxkIHRyYW5zbWlzc2lvbiBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIlByZXZlbnRpb24gb2YgbW90aGVyLXRvLWNoaWxkIHRyYW5zbWlzc2lvbiBPYnNlcnZhdGlvbiIKZGVmaW5lICJQcmV2ZW50aW9uIG9mIG1vdGhlci10by1jaGlsZCB0cmFuc21pc3Npb24gQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iUHJldmVudGlvbiBvZiBtb3RoZXItdG8tY2hpbGQgdHJhbnNtaXNzaW9uIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiUHJldmVudGlvbiBvZiBtb3RoZXItdG8tY2hpbGQgdHJhbnNtaXNzaW9uIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iUHJldmVudGlvbiBvZiBtb3RoZXItdG8tY2hpbGQgdHJhbnNtaXNzaW9uIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgUHJldmVudGlvbiBvZiBtb3RoZXItdG8tY2hpbGQgdHJhbnNtaXNzaW9uICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFMTYwIC0gU1RJIHRlc3RpbmcgYW5kIHRyZWF0bWVudApAYWN0aXZpdHk6IEhJVi5EMTIgRGV0ZXJtaW5lIHJlY29tbWVuZGVkIHNjcmVlbmluZ3MgYW5kIHRlc3RzCkBkZXNjcmlwdGlvbjogT2ZmZXIgU1RJIHRlc3RpbmcgYW5kIHRyZWF0bWVudCBzZXJ2aWNlcwoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiU1RJIHRlc3RpbmcgYW5kIHRyZWF0bWVudCBELkRFMTYwIjoKICBleGlzdHMgIlNUSSB0ZXN0aW5nIGFuZCB0cmVhdG1lbnQgRC5ERTE2MCBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIlNUSSB0ZXN0aW5nIGFuZCB0cmVhdG1lbnQgRC5ERTE2MCBPYnNlcnZhdGlvbiIKZGVmaW5lICJTVEkgdGVzdGluZyBhbmQgdHJlYXRtZW50IEQuREUxNjAgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iU1RJIHRlc3RpbmcgYW5kIHRyZWF0bWVudCBELkRFMTYwIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiU1RJIHRlc3RpbmcgYW5kIHRyZWF0bWVudCBELkRFMTYwIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iU1RJIHRlc3RpbmcgYW5kIHRyZWF0bWVudCBELkRFMTYwIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgU1RJIHRlc3RpbmcgYW5kIHRyZWF0bWVudCBELkRFMTYwICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFMTYyIC0gSEJzQWcgdGVzdCByZXN1bHQKQGFjdGl2aXR5OiBISVYuRDEyIERldGVybWluZSByZWNvbW1lbmRlZCBzY3JlZW5pbmdzIGFuZCB0ZXN0cwpAZGVzY3JpcHRpb246IEhlcGF0aXRpcyBCIHZpcnVzIHRlc3QgcmVzdWx0IChIQnNBZykKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkhCc0FnIHRlc3QgcmVzdWx0IEQuREUxNjIiOgogIGV4aXN0cyAiSEJzQWcgdGVzdCByZXN1bHQgRC5ERTE2MiBPYnNlcnZhdGlvbiIKZGVmaW5lICJIQnNBZyB0ZXN0IHJlc3VsdCBELkRFMTYyIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iSEJzQWcgdGVzdCByZXN1bHQgRC5ERTE2MiBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIEhCc0FnIHRlc3QgcmVzdWx0IEQuREUxNjIgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREUxNjMgLSBQb3NpdGl2ZQpAYWN0aXZpdHk6IEhJVi5EMTIgRGV0ZXJtaW5lIHJlY29tbWVuZGVkIHNjcmVlbmluZ3MgYW5kIHRlc3RzCkBkZXNjcmlwdGlvbjogSEJzQWcgdGVzdCByZXN1bHQgd2FzIHBvc2l0aXZlCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJQb3NpdGl2ZSBELkRFMTYzIjoKICBleGlzdHMgIlBvc2l0aXZlIEQuREUxNjMgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJQb3NpdGl2ZSBELkRFMTYzIE9ic2VydmF0aW9uIgpkZWZpbmUgIlBvc2l0aXZlIEQuREUxNjMgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iUG9zaXRpdmUgRC5ERTE2MyBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIlBvc2l0aXZlIEQuREUxNjMgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJQb3NpdGl2ZSBELkRFMTYzIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgUG9zaXRpdmUgRC5ERTE2MyAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTE2NCAtIE5lZ2F0aXZlCkBhY3Rpdml0eTogSElWLkQxMiBEZXRlcm1pbmUgcmVjb21tZW5kZWQgc2NyZWVuaW5ncyBhbmQgdGVzdHMKQGRlc2NyaXB0aW9uOiBIQnNBZyB0ZXN0IHJlc3VsdCB3YXMgbmVnYXRpdmUKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIk5lZ2F0aXZlIEQuREUxNjQiOgogIGV4aXN0cyAiTmVnYXRpdmUgRC5ERTE2NCBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIk5lZ2F0aXZlIEQuREUxNjQgT2JzZXJ2YXRpb24iCmRlZmluZSAiTmVnYXRpdmUgRC5ERTE2NCBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJOZWdhdGl2ZSBELkRFMTY0IENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiTmVnYXRpdmUgRC5ERTE2NCBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIk5lZ2F0aXZlIEQuREUxNjQgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBOZWdhdGl2ZSBELkRFMTY0ICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFMTY1IC0gSW5kZXRlcm1pbmF0ZQpAYWN0aXZpdHk6IEhJVi5EMTIgRGV0ZXJtaW5lIHJlY29tbWVuZGVkIHNjcmVlbmluZ3MgYW5kIHRlc3RzCkBkZXNjcmlwdGlvbjogSEJzQWcgdGVzdCByZXN1bHQgd2FzIGluZGV0ZXJtaW5hdGUKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkluZGV0ZXJtaW5hdGUgRC5ERTE2NSI6CiAgZXhpc3RzICJJbmRldGVybWluYXRlIEQuREUxNjUgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJJbmRldGVybWluYXRlIEQuREUxNjUgT2JzZXJ2YXRpb24iCmRlZmluZSAiSW5kZXRlcm1pbmF0ZSBELkRFMTY1IENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIkluZGV0ZXJtaW5hdGUgRC5ERTE2NSBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIkluZGV0ZXJtaW5hdGUgRC5ERTE2NSBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkluZGV0ZXJtaW5hdGUgRC5ERTE2NSBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIEluZGV0ZXJtaW5hdGUgRC5ERTE2NSAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTE3MCAtIEhDViB0ZXN0IHJlc3VsdApAYWN0aXZpdHk6IEhJVi5EMTIgRGV0ZXJtaW5lIHJlY29tbWVuZGVkIHNjcmVlbmluZ3MgYW5kIHRlc3RzCkBkZXNjcmlwdGlvbjogSGVwYXRpdGlzIEMgdmlydXMgdGVzdCByZXN1bHQgKEhDViBhbnRpYm9keSwgSENWIFJOQSBvciBIQ1YgY29yZSBhbnRpZ2VuKQoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiSENWIHRlc3QgcmVzdWx0IEQuREUxNzAiOgogIGV4aXN0cyAiSENWIHRlc3QgcmVzdWx0IEQuREUxNzAgT2JzZXJ2YXRpb24iCmRlZmluZSAiSENWIHRlc3QgcmVzdWx0IEQuREUxNzAgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJIQ1YgdGVzdCByZXN1bHQgRC5ERTE3MCBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIEhDViB0ZXN0IHJlc3VsdCBELkRFMTcwICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFMTcxIC0gUG9zaXRpdmUKQGFjdGl2aXR5OiBISVYuRDEyIERldGVybWluZSByZWNvbW1lbmRlZCBzY3JlZW5pbmdzIGFuZCB0ZXN0cwpAZGVzY3JpcHRpb246IEhDViB0ZXN0IHJlc3VsdCB3YXMgcG9zaXRpdmUKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIlBvc2l0aXZlIEQuREUxNzEiOgogIGV4aXN0cyAiUG9zaXRpdmUgRC5ERTE3MSBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIlBvc2l0aXZlIEQuREUxNzEgT2JzZXJ2YXRpb24iCmRlZmluZSAiUG9zaXRpdmUgRC5ERTE3MSBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJQb3NpdGl2ZSBELkRFMTcxIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiUG9zaXRpdmUgRC5ERTE3MSBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIlBvc2l0aXZlIEQuREUxNzEgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBQb3NpdGl2ZSBELkRFMTcxICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFMTcyIC0gTmVnYXRpdmUKQGFjdGl2aXR5OiBISVYuRDEyIERldGVybWluZSByZWNvbW1lbmRlZCBzY3JlZW5pbmdzIGFuZCB0ZXN0cwpAZGVzY3JpcHRpb246IEhDViB0ZXN0IHJlc3VsdCB3YXMgbmVnYXRpdmUKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIk5lZ2F0aXZlIEQuREUxNzIiOgogIGV4aXN0cyAiTmVnYXRpdmUgRC5ERTE3MiBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIk5lZ2F0aXZlIEQuREUxNzIgT2JzZXJ2YXRpb24iCmRlZmluZSAiTmVnYXRpdmUgRC5ERTE3MiBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJOZWdhdGl2ZSBELkRFMTcyIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiTmVnYXRpdmUgRC5ERTE3MiBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIk5lZ2F0aXZlIEQuREUxNzIgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBOZWdhdGl2ZSBELkRFMTcyICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFMTczIC0gSW5kZXRlcm1pbmF0ZQpAYWN0aXZpdHk6IEhJVi5EMTIgRGV0ZXJtaW5lIHJlY29tbWVuZGVkIHNjcmVlbmluZ3MgYW5kIHRlc3RzCkBkZXNjcmlwdGlvbjogSENWIHRlc3QgcmVzdWx0IHdhcyBpbmRldGVybWluYXRlCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJJbmRldGVybWluYXRlIEQuREUxNzMiOgogIGV4aXN0cyAiSW5kZXRlcm1pbmF0ZSBELkRFMTczIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiSW5kZXRlcm1pbmF0ZSBELkRFMTczIE9ic2VydmF0aW9uIgpkZWZpbmUgIkluZGV0ZXJtaW5hdGUgRC5ERTE3MyBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJJbmRldGVybWluYXRlIEQuREUxNzMgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJJbmRldGVybWluYXRlIEQuREUxNzMgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJJbmRldGVybWluYXRlIEQuREUxNzMgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBJbmRldGVybWluYXRlIEQuREUxNzMgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREUxODYgLSBISVYgY2xpbmljYWwgc3RhZ2UKQGFjdGl2aXR5OiBISVYuRDggQ2FwdHVyZSBvciB1cGRhdGUgY2xpZW50IGhpc3RvcnkKQGRlc2NyaXB0aW9uOiBXSE8gY2xpbmljYWwgc3RhZ2Ugb2YgY2xpZW50IGJhc2VkIG9uIHNpZ25zIGFuZCBzeW1wdG9tcy4gV0hPIGNsaW5pY2FsIHN0YWdpbmcgaXMgYSB3YXkgdG8gY2F0ZWdvcml6ZSBISVYgZGlzZWFzZSBzZXZlcml0eSBiYXNlZCBvbiBuZXcgb3IgcmVjdXJyZW50IGNsaW5pY2FsIGV2ZW50cy4gVGhlcmUgYXJlIDQgV0hPIGNsaW5pY2FsIHN0YWdlcyB0aGF0IHJhbmdlIGZyb20gbWlsZCBzeW1wdG9tcyAoV0hPIGNsaW5pY2FsIHN0YWdlIDEpIHRvIHNldmVyZSBzeW1wdG9tcyAoV0hPIGNsaW5pY2FsIHN0YWdlIDQpLgoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiSElWIGNsaW5pY2FsIHN0YWdlIEQuREUxODYiOgogIGV4aXN0cyAiSElWIGNsaW5pY2FsIHN0YWdlIEQuREUxODYgT2JzZXJ2YXRpb24iCmRlZmluZSAiSElWIGNsaW5pY2FsIHN0YWdlIEQuREUxODYgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJISVYgY2xpbmljYWwgc3RhZ2UgRC5ERTE4NiBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIEhJViBjbGluaWNhbCBzdGFnZSBELkRFMTg2ICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFMTg3IC0gV0hPIEhJViBjbGluaWNhbCBzdGFnZSAxCkBhY3Rpdml0eTogSElWLkQ4IENhcHR1cmUgb3IgdXBkYXRlIGNsaWVudCBoaXN0b3J5CkBkZXNjcmlwdGlvbjogQ2xpZW50IGlzIGN1cnJlbnRseSBhc3Nlc3NlZCB0byBiZSBhdCBhIGNsaW5pY2FsIHN0YWdlIDEsIGJhc2VkIG9uIGNsaW5pY2FsIGFzc2Vzc21lbnQgYW5kIGRpYWdub3N0aWNzCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJXSE8gSElWIGNsaW5pY2FsIHN0YWdlIDEiOgogIGV4aXN0cyAiV0hPIEhJViBjbGluaWNhbCBzdGFnZSAxIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiV0hPIEhJViBjbGluaWNhbCBzdGFnZSAxIE9ic2VydmF0aW9uIgpkZWZpbmUgIldITyBISVYgY2xpbmljYWwgc3RhZ2UgMSBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJXSE8gSElWIGNsaW5pY2FsIHN0YWdlIDEgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJXSE8gSElWIGNsaW5pY2FsIHN0YWdlIDEgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJXSE8gSElWIGNsaW5pY2FsIHN0YWdlIDEgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBXSE8gSElWIGNsaW5pY2FsIHN0YWdlIDEgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREUxODggLSBXSE8gSElWIGNsaW5pY2FsIHN0YWdlIDIKQGFjdGl2aXR5OiBISVYuRDggQ2FwdHVyZSBvciB1cGRhdGUgY2xpZW50IGhpc3RvcnkKQGRlc2NyaXB0aW9uOiBDbGllbnQgaXMgY3VycmVudGx5IGFzc2Vzc2VkIHRvIGJlIGF0IGEgY2xpbmljYWwgc3RhZ2UgMiwgYmFzZWQgb24gY2xpbmljYWwgYXNzZXNzbWVudCBhbmQgZGlhZ25vc3RpY3MKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIldITyBISVYgY2xpbmljYWwgc3RhZ2UgMiI6CiAgZXhpc3RzICJXSE8gSElWIGNsaW5pY2FsIHN0YWdlIDIgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJXSE8gSElWIGNsaW5pY2FsIHN0YWdlIDIgT2JzZXJ2YXRpb24iCmRlZmluZSAiV0hPIEhJViBjbGluaWNhbCBzdGFnZSAyIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIldITyBISVYgY2xpbmljYWwgc3RhZ2UgMiBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIldITyBISVYgY2xpbmljYWwgc3RhZ2UgMiBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIldITyBISVYgY2xpbmljYWwgc3RhZ2UgMiBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIFdITyBISVYgY2xpbmljYWwgc3RhZ2UgMiAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTE4OSAtIFdITyBISVYgY2xpbmljYWwgc3RhZ2UgMwpAYWN0aXZpdHk6IEhJVi5EOCBDYXB0dXJlIG9yIHVwZGF0ZSBjbGllbnQgaGlzdG9yeQpAZGVzY3JpcHRpb246IENsaWVudCBpcyBjdXJyZW50bHkgYXNzZXNzZWQgdG8gYmUgYXQgYSBjbGluaWNhbCBzdGFnZSAzLCBiYXNlZCBvbiBjbGluaWNhbCBhc3Nlc3NtZW50IGFuZCBkaWFnbm9zdGljcwoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiV0hPIEhJViBjbGluaWNhbCBzdGFnZSAzIjoKICBleGlzdHMgIldITyBISVYgY2xpbmljYWwgc3RhZ2UgMyBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIldITyBISVYgY2xpbmljYWwgc3RhZ2UgMyBPYnNlcnZhdGlvbiIKZGVmaW5lICJXSE8gSElWIGNsaW5pY2FsIHN0YWdlIDMgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iV0hPIEhJViBjbGluaWNhbCBzdGFnZSAzIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiV0hPIEhJViBjbGluaWNhbCBzdGFnZSAzIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iV0hPIEhJViBjbGluaWNhbCBzdGFnZSAzIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgV0hPIEhJViBjbGluaWNhbCBzdGFnZSAzICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFMTkwIC0gV0hPIEhJViBjbGluaWNhbCBzdGFnZSA0CkBhY3Rpdml0eTogSElWLkQ4IENhcHR1cmUgb3IgdXBkYXRlIGNsaWVudCBoaXN0b3J5CkBkZXNjcmlwdGlvbjogQ2xpZW50IGlzIGN1cnJlbnRseSBhc3Nlc3NlZCB0byBiZSBhdCBhIGNsaW5pY2FsIHN0YWdlIDQsIGJhc2VkIG9uIGNsaW5pY2FsIGFzc2Vzc21lbnQgYW5kIGRpYWdub3N0aWNzCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJXSE8gSElWIGNsaW5pY2FsIHN0YWdlIDQiOgogIGV4aXN0cyAiV0hPIEhJViBjbGluaWNhbCBzdGFnZSA0IENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiV0hPIEhJViBjbGluaWNhbCBzdGFnZSA0IE9ic2VydmF0aW9uIgpkZWZpbmUgIldITyBISVYgY2xpbmljYWwgc3RhZ2UgNCBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJXSE8gSElWIGNsaW5pY2FsIHN0YWdlIDQgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJXSE8gSElWIGNsaW5pY2FsIHN0YWdlIDQgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJXSE8gSElWIGNsaW5pY2FsIHN0YWdlIDQgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBXSE8gSElWIGNsaW5pY2FsIHN0YWdlIDQgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREUxOTQgLSBEYXRlIG9mIHZpcmFsIGxvYWQgc2FtcGxlIGNvbGxlY3Rpb24KQGFjdGl2aXR5OiBISVYuRDEwIENvdW5zZWwgcmV0dXJuaW5nIGNsaWVudApAZGVzY3JpcHRpb246IERhdGUgYW5kIHRpbWUgd2hlbiB0aGUgc2FtcGxlIHdhcyBjb2xsZWN0ZWQgdG8gdGVzdCB0aGUgY2xpZW50J3MgSElWIHZpcmFsIGxvYWQKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkRhdGUgb2YgdmlyYWwgbG9hZCBzYW1wbGUgY29sbGVjdGlvbiBELkRFMTk0IjoKICBFbGVtZW50cy4iRGF0ZSBvZiB2aXJhbCBsb2FkIHNhbXBsZSBjb2xsZWN0aW9uIEQuREUxOTQiIFAKICAgIHdoZXJlIFAuZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIFAucGVyZm9ybWVkLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBEYXRlIG9mIHZpcmFsIGxvYWQgc2FtcGxlIGNvbGxlY3Rpb24gRC5ERTE5NCAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTE5NSAtIERhdGUgb2Ygc2NoZWR1bGVkIHJldmlldyBvZiB2aXJhbCBsb2FkIHRlc3QgcmVzdWx0cwpAYWN0aXZpdHk6IEhJVi5EMTAgQ291bnNlbCByZXR1cm5pbmcgY2xpZW50CkBkZXNjcmlwdGlvbjogRXhwZWN0ZWQgZGF0ZSB3aGVuIGNsaWVudCdzIHZpcmFsIGxvYWQgdGVzdCByZXN1bHRzIHdpbGwgYmUgcmV0dXJuZWQgYW5kIHJldmlld2VkCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJEYXRlIG9mIHNjaGVkdWxlZCByZXZpZXcgb2YgdmlyYWwgbG9hZCB0ZXN0IHJlc3VsdHMiOgogIEVsZW1lbnRzLiJEYXRlIG9mIHNjaGVkdWxlZCByZXZpZXcgb2YgdmlyYWwgbG9hZCB0ZXN0IHJlc3VsdHMiIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiRGF0ZSBvZiBzY2hlZHVsZWQgcmV2aWV3IG9mIHZpcmFsIGxvYWQgdGVzdCByZXN1bHRzIFZhbHVlIjoKICAiRGF0ZSBvZiBzY2hlZHVsZWQgcmV2aWV3IG9mIHZpcmFsIGxvYWQgdGVzdCByZXN1bHRzIiBPCiAgcmV0dXJuIE8udmFsdWUKLyogRW5kIG9mIERhdGUgb2Ygc2NoZWR1bGVkIHJldmlldyBvZiB2aXJhbCBsb2FkIHRlc3QgcmVzdWx0cyAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTIyNSAtIFRyZWF0bWVudCBmYWlsdXJlCkBhY3Rpdml0eTogSElWLkQxNyBDaGVjayBmb3Igc2lnbnMgb2YgdHJlYXRtZW50IGZhaWx1cmUKQGRlc2NyaXB0aW9uOiBBUlQgdHJlYXRtZW50IGZhaWx1cmUKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIlRyZWF0bWVudCBmYWlsdXJlIjoKICBleGlzdHMgIlRyZWF0bWVudCBmYWlsdXJlIE9ic2VydmF0aW9uIgpkZWZpbmUgIlRyZWF0bWVudCBmYWlsdXJlIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iVHJlYXRtZW50IGZhaWx1cmUgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBUcmVhdG1lbnQgZmFpbHVyZSAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTIyNiAtIENsaW5pY2FsIGZhaWx1cmUKQGFjdGl2aXR5OiBISVYuRDE3IENoZWNrIGZvciBzaWducyBvZiB0cmVhdG1lbnQgZmFpbHVyZQpAZGVzY3JpcHRpb246IE5ldyBvciByZWN1cnJlbnQgY2xpbmljYWwgZXZlbnQgaW5kaWNhdGluZyBzZXZlcmUgaW1tdW5vZGVmaWNpZW5jeSBpbiBhZHVsdHMgb3IgYWR2YW5jZWQgb3Igc2V2ZXJlIGltbXVub2RlZmljaWVuY3kgaW4gY2hpbGRyZW4KKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkNsaW5pY2FsIGZhaWx1cmUiOgogIGV4aXN0cyAiQ2xpbmljYWwgZmFpbHVyZSBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIkNsaW5pY2FsIGZhaWx1cmUgT2JzZXJ2YXRpb24iCmRlZmluZSAiQ2xpbmljYWwgZmFpbHVyZSBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJDbGluaWNhbCBmYWlsdXJlIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiQ2xpbmljYWwgZmFpbHVyZSBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkNsaW5pY2FsIGZhaWx1cmUgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBDbGluaWNhbCBmYWlsdXJlICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFMjI3IC0gSW1tdW5vbG9naWNhbCBmYWlsdXJlCkBhY3Rpdml0eTogSElWLkQxNyBDaGVjayBmb3Igc2lnbnMgb2YgdHJlYXRtZW50IGZhaWx1cmUKQGRlc2NyaXB0aW9uOiBDRDQgY291bnQgYXQgb3IgYmVsb3cgMjUwIGNlbGxzL21tMyBmb2xsb3dpbmcgY2xpbmljYWwgZmFpbHVyZQoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiSW1tdW5vbG9naWNhbCBmYWlsdXJlIjoKICBleGlzdHMgIkltbXVub2xvZ2ljYWwgZmFpbHVyZSBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIkltbXVub2xvZ2ljYWwgZmFpbHVyZSBPYnNlcnZhdGlvbiIKZGVmaW5lICJJbW11bm9sb2dpY2FsIGZhaWx1cmUgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iSW1tdW5vbG9naWNhbCBmYWlsdXJlIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiSW1tdW5vbG9naWNhbCBmYWlsdXJlIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iSW1tdW5vbG9naWNhbCBmYWlsdXJlIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgSW1tdW5vbG9naWNhbCBmYWlsdXJlICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFMjI4IC0gVmlyb2xvZ2ljYWwgZmFpbHVyZQpAYWN0aXZpdHk6IEhJVi5EMTcgQ2hlY2sgZm9yIHNpZ25zIG9mIHRyZWF0bWVudCBmYWlsdXJlCkBkZXNjcmlwdGlvbjogVGhlIGluYWJpbGl0eSB0byBhY2hpZXZlIG9yIG1haW50YWluIHZpcmFsIHN1cHByZXNzaW9uIGJlbG93IGEgY2VydGFpbiB0aHJlc2hvbGQgaW5kaWNhdGVkIGJ5IHZpcmFsIGxvYWQgYWJvdmUgMTAwMCBjb3BpZXMvbUwgYmFzZWQgb24gdHdvIGNvbnNlY3V0aXZlIHZpcmFsIGxvYWQgbWVhc3VyZW1lbnRzIGluIDMgbW9udGhzLCB3aXRoIGFkaGVyZW5jZSBzdXBwb3J0IGZvbGxvd2luZyB0aGUgZmlyc3QgdmlyYWwgbG9hZCB0ZXN0CiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJWaXJvbG9naWNhbCBmYWlsdXJlIjoKICBleGlzdHMgIlZpcm9sb2dpY2FsIGZhaWx1cmUgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJWaXJvbG9naWNhbCBmYWlsdXJlIE9ic2VydmF0aW9uIgpkZWZpbmUgIlZpcm9sb2dpY2FsIGZhaWx1cmUgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iVmlyb2xvZ2ljYWwgZmFpbHVyZSBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIlZpcm9sb2dpY2FsIGZhaWx1cmUgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJWaXJvbG9naWNhbCBmYWlsdXJlIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgVmlyb2xvZ2ljYWwgZmFpbHVyZSAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTI1OSAtIFJpc2sgZmFjdG9ycywgY29tb3JiaWRpdGllcyBhbmQgY29pbmZlY3Rpb25zIHNpZ25zIGFuZCBzeW1wdG9tcwpAYWN0aXZpdHk6IEhJVi5EMTQgUHJldmVudCwgc2NyZWVuLCBhbmQgbWFuYWdlIGNvbW9yYmlkaXRpZXMgYW5kIGNvaW5mZWN0aW9ucwpAZGVzY3JpcHRpb246IFNpZ25zIGFuZCBzeW1wdG9tcyBvZiBvcHBvcnR1bmlzdGljIGluZmVjdGlvbnMgb3Igb3RoZXIgY29tb3JiaWRpdGllcyBleHBlcmllbmNlZCBieSBjbGllbnQKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIlJpc2sgZmFjdG9ycywgY29tb3JiaWRpdGllcyBhbmQgY29pbmZlY3Rpb25zIHNpZ25zIGFuZCBzeW1wdG9tcyI6CiAgZXhpc3RzICJSaXNrIGZhY3RvcnMsIGNvbW9yYmlkaXRpZXMgYW5kIGNvaW5mZWN0aW9ucyBzaWducyBhbmQgc3ltcHRvbXMgT2JzZXJ2YXRpb24iCmRlZmluZSAiUmlzayBmYWN0b3JzLCBjb21vcmJpZGl0aWVzIGFuZCBjb2luZmVjdGlvbnMgc2lnbnMgYW5kIHN5bXB0b21zIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iUmlzayBmYWN0b3JzLCBjb21vcmJpZGl0aWVzIGFuZCBjb2luZmVjdGlvbnMgc2lnbnMgYW5kIHN5bXB0b21zIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgUmlzayBmYWN0b3JzLCBjb21vcmJpZGl0aWVzIGFuZCBjb2luZmVjdGlvbnMgc2lnbnMgYW5kIHN5bXB0b21zICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFMjgyIC0gUHJlc3VtcHRpdmUgVEIKQGFjdGl2aXR5OiBISVYuRDE0IFByZXZlbnQsIHNjcmVlbiwgYW5kIG1hbmFnZSBjb21vcmJpZGl0aWVzIGFuZCBjb2luZmVjdGlvbnMKQGRlc2NyaXB0aW9uOiBDbGllbnQncyBjb21vcmJpZGl0aWVzIG9yIGNvaW5mZWN0aW9ucyBvciBzeW1wdG9tcyBvZiB0aGVzZSBpbmNsdWRlIHByZXN1bXB0aXZlIFRCCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJQcmVzdW1wdGl2ZSBUQiBELkRFMjgyIjoKICBleGlzdHMgIlByZXN1bXB0aXZlIFRCIEQuREUyODIgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJQcmVzdW1wdGl2ZSBUQiBELkRFMjgyIE9ic2VydmF0aW9uIgpkZWZpbmUgIlByZXN1bXB0aXZlIFRCIEQuREUyODIgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iUHJlc3VtcHRpdmUgVEIgRC5ERTI4MiBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIlByZXN1bXB0aXZlIFRCIEQuREUyODIgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJQcmVzdW1wdGl2ZSBUQiBELkRFMjgyIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgUHJlc3VtcHRpdmUgVEIgRC5ERTI4MiAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTI4OSAtIFdITyBISVYgY2xpbmljYWwgc3RhZ2UgY29uZGl0aW9uIG9yIHN5bXB0b20KQGFjdGl2aXR5OiBISVYuRDE1IERldGVybWluZSBjbGluaWNhbCBzdGFnZSBvZiBISVYKQGRlc2NyaXB0aW9uOiBOZXcgb3IgcmVjdXJyZW50IGNsaW5pY2FsIGV2ZW50cyB1c2VkIHRvIGNhdGVnb3JpemUgSElWIGRpc2Vhc2Ugc2V2ZXJpdHkgYmFzZWQgYXQgYmFzZWxpbmUgYW5kIGZvbGxvdyB1cAoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiV0hPIEhJViBjbGluaWNhbCBzdGFnZSBjb25kaXRpb24gb3Igc3ltcHRvbSBELkRFMjg5IjoKICBleGlzdHMgIldITyBISVYgY2xpbmljYWwgc3RhZ2UgY29uZGl0aW9uIG9yIHN5bXB0b20gRC5ERTI4OSBPYnNlcnZhdGlvbiIKZGVmaW5lICJXSE8gSElWIGNsaW5pY2FsIHN0YWdlIGNvbmRpdGlvbiBvciBzeW1wdG9tIEQuREUyODkgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJXSE8gSElWIGNsaW5pY2FsIHN0YWdlIGNvbmRpdGlvbiBvciBzeW1wdG9tIEQuREUyODkgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBXSE8gSElWIGNsaW5pY2FsIHN0YWdlIGNvbmRpdGlvbiBvciBzeW1wdG9tIEQuREUyODkgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREUyOTAgLSBBc3ltcHRvbWF0aWMKQGFjdGl2aXR5OiBISVYuRDE1IERldGVybWluZSBjbGluaWNhbCBzdGFnZSBvZiBISVYKQGRlc2NyaXB0aW9uOiBObyBISVYtcmVsYXRlZCBzeW1wdG9tcyByZXBvcnRlZCBhbmQgbm8gY2xpbmljYWwgc2lnbnMgb24gZXhhbWluYXRpb24KKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkFzeW1wdG9tYXRpYyI6CiAgZXhpc3RzICJBc3ltcHRvbWF0aWMgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJBc3ltcHRvbWF0aWMgT2JzZXJ2YXRpb24iCmRlZmluZSAiQXN5bXB0b21hdGljIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIkFzeW1wdG9tYXRpYyBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIkFzeW1wdG9tYXRpYyBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkFzeW1wdG9tYXRpYyBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIEFzeW1wdG9tYXRpYyAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTI5MSAtIFBlcnNpc3RlbnQgZ2VuZXJhbGl6ZWQgbHltcGhhZGVub3BhdGh5CkBhY3Rpdml0eTogSElWLkQxNSBEZXRlcm1pbmUgY2xpbmljYWwgc3RhZ2Ugb2YgSElWCkBkZXNjcmlwdGlvbjogUGVyc2lzdGVudCBlbmxhcmdlZCBseW1waCBub2RlcyA+MSBjbSBhdCB0d28gb3IgbW9yZSBub24tY29udGlndW91cyBzaXRlcyAoZXhjbHVkaW5nIGluZ3VpbmFsKSB3aXRob3V0IGtub3duIGNhdXNlCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJQZXJzaXN0ZW50IGdlbmVyYWxpemVkIGx5bXBoYWRlbm9wYXRoeSI6CiAgZXhpc3RzICJQZXJzaXN0ZW50IGdlbmVyYWxpemVkIGx5bXBoYWRlbm9wYXRoeSBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIlBlcnNpc3RlbnQgZ2VuZXJhbGl6ZWQgbHltcGhhZGVub3BhdGh5IE9ic2VydmF0aW9uIgpkZWZpbmUgIlBlcnNpc3RlbnQgZ2VuZXJhbGl6ZWQgbHltcGhhZGVub3BhdGh5IENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIlBlcnNpc3RlbnQgZ2VuZXJhbGl6ZWQgbHltcGhhZGVub3BhdGh5IENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiUGVyc2lzdGVudCBnZW5lcmFsaXplZCBseW1waGFkZW5vcGF0aHkgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJQZXJzaXN0ZW50IGdlbmVyYWxpemVkIGx5bXBoYWRlbm9wYXRoeSBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIFBlcnNpc3RlbnQgZ2VuZXJhbGl6ZWQgbHltcGhhZGVub3BhdGh5ICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFMjkyIC0gTW9kZXJhdGUgdW5leHBsYWluZWQgd2VpZ2h0IGxvc3MKQGFjdGl2aXR5OiBISVYuRDE1IERldGVybWluZSBjbGluaWNhbCBzdGFnZSBvZiBISVYKQGRlc2NyaXB0aW9uOiBNb2RlcmF0ZSB1bmV4cGxhaW5lZCB3ZWlnaHQgbG9zcyAoPDEwJSBvZiBwcmVzdW1lZCBvciBtZWFzdXJlZCBib2R5IHdlaWdodCkKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIk1vZGVyYXRlIHVuZXhwbGFpbmVkIHdlaWdodCBsb3NzIjoKICBleGlzdHMgIk1vZGVyYXRlIHVuZXhwbGFpbmVkIHdlaWdodCBsb3NzIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiTW9kZXJhdGUgdW5leHBsYWluZWQgd2VpZ2h0IGxvc3MgT2JzZXJ2YXRpb24iCmRlZmluZSAiTW9kZXJhdGUgdW5leHBsYWluZWQgd2VpZ2h0IGxvc3MgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iTW9kZXJhdGUgdW5leHBsYWluZWQgd2VpZ2h0IGxvc3MgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJNb2RlcmF0ZSB1bmV4cGxhaW5lZCB3ZWlnaHQgbG9zcyBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIk1vZGVyYXRlIHVuZXhwbGFpbmVkIHdlaWdodCBsb3NzIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgTW9kZXJhdGUgdW5leHBsYWluZWQgd2VpZ2h0IGxvc3MgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREUyOTMgLSBSZWN1cnJlbnQgcmVzcGlyYXRvcnkgdHJhY3QgaW5mZWN0aW9ucwpAYWN0aXZpdHk6IEhJVi5EMTUgRGV0ZXJtaW5lIGNsaW5pY2FsIHN0YWdlIG9mIEhJVgpAZGVzY3JpcHRpb246IENsaWVudCdzIHN5bXB0b21zIGluY2x1ZGUgcmVjdXJyZW50IHJlc3BpcmF0b3J5IHRyYWN0IGluZmVjdGlvbnMgaW5jbHVkaW5nIHNpbnVzaXRpcywgdG9uc2lsbGl0aXMsIG90aXRpcyBtZWRpYSBvciBwaGFyeW5naXRpcwoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiUmVjdXJyZW50IHJlc3BpcmF0b3J5IHRyYWN0IGluZmVjdGlvbnMiOgogIGV4aXN0cyAiUmVjdXJyZW50IHJlc3BpcmF0b3J5IHRyYWN0IGluZmVjdGlvbnMgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJSZWN1cnJlbnQgcmVzcGlyYXRvcnkgdHJhY3QgaW5mZWN0aW9ucyBPYnNlcnZhdGlvbiIKZGVmaW5lICJSZWN1cnJlbnQgcmVzcGlyYXRvcnkgdHJhY3QgaW5mZWN0aW9ucyBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJSZWN1cnJlbnQgcmVzcGlyYXRvcnkgdHJhY3QgaW5mZWN0aW9ucyBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIlJlY3VycmVudCByZXNwaXJhdG9yeSB0cmFjdCBpbmZlY3Rpb25zIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iUmVjdXJyZW50IHJlc3BpcmF0b3J5IHRyYWN0IGluZmVjdGlvbnMgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBSZWN1cnJlbnQgcmVzcGlyYXRvcnkgdHJhY3QgaW5mZWN0aW9ucyAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTI5NCAtIFVuZXhwbGFpbmVkIHBlcnNpc3RlbnQgaGVwYXRvc3BsZW5vbWVnYWx5CkBhY3Rpdml0eTogSElWLkQxNSBEZXRlcm1pbmUgY2xpbmljYWwgc3RhZ2Ugb2YgSElWCkBkZXNjcmlwdGlvbjogQ2xpZW50J3Mgc3ltcHRvbXMgaW5jbHVkZSB1bmV4cGxhaW5lZCBwZXJzaXN0ZW50IGhlcGF0b3NwbGVub21lZ2FseQoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiVW5leHBsYWluZWQgcGVyc2lzdGVudCBoZXBhdG9zcGxlbm9tZWdhbHkiOgogIGV4aXN0cyAiVW5leHBsYWluZWQgcGVyc2lzdGVudCBoZXBhdG9zcGxlbm9tZWdhbHkgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJVbmV4cGxhaW5lZCBwZXJzaXN0ZW50IGhlcGF0b3NwbGVub21lZ2FseSBPYnNlcnZhdGlvbiIKZGVmaW5lICJVbmV4cGxhaW5lZCBwZXJzaXN0ZW50IGhlcGF0b3NwbGVub21lZ2FseSBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJVbmV4cGxhaW5lZCBwZXJzaXN0ZW50IGhlcGF0b3NwbGVub21lZ2FseSBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIlVuZXhwbGFpbmVkIHBlcnNpc3RlbnQgaGVwYXRvc3BsZW5vbWVnYWx5IE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iVW5leHBsYWluZWQgcGVyc2lzdGVudCBoZXBhdG9zcGxlbm9tZWdhbHkgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBVbmV4cGxhaW5lZCBwZXJzaXN0ZW50IGhlcGF0b3NwbGVub21lZ2FseSAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTI5NSAtIEhlcnBlcyB6b3N0ZXIKQGFjdGl2aXR5OiBISVYuRDE1IERldGVybWluZSBjbGluaWNhbCBzdGFnZSBvZiBISVYKQGRlc2NyaXB0aW9uOiBDbGllbnQncyBzeW1wdG9tcyBpbmNsdWRlIGhlcnBlcyB6b3N0ZXIKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkhlcnBlcyB6b3N0ZXIiOgogIGV4aXN0cyAiSGVycGVzIHpvc3RlciBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIkhlcnBlcyB6b3N0ZXIgT2JzZXJ2YXRpb24iCmRlZmluZSAiSGVycGVzIHpvc3RlciBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJIZXJwZXMgem9zdGVyIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiSGVycGVzIHpvc3RlciBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkhlcnBlcyB6b3N0ZXIgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBIZXJwZXMgem9zdGVyICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFMjk2IC0gQW5ndWxhciBjaGVpbGl0aXMKQGFjdGl2aXR5OiBISVYuRDE1IERldGVybWluZSBjbGluaWNhbCBzdGFnZSBvZiBISVYKQGRlc2NyaXB0aW9uOiBDbGllbnQncyBzeW1wdG9tcyBpbmNsdWRlIGFuZ3VsYXIgY2hlaWxpdGlzCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJBbmd1bGFyIGNoZWlsaXRpcyI6CiAgZXhpc3RzICJBbmd1bGFyIGNoZWlsaXRpcyBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIkFuZ3VsYXIgY2hlaWxpdGlzIE9ic2VydmF0aW9uIgpkZWZpbmUgIkFuZ3VsYXIgY2hlaWxpdGlzIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIkFuZ3VsYXIgY2hlaWxpdGlzIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiQW5ndWxhciBjaGVpbGl0aXMgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJBbmd1bGFyIGNoZWlsaXRpcyBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIEFuZ3VsYXIgY2hlaWxpdGlzICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFMjk3IC0gTGluZWFyIGdpbmdpdmFsIGVyeXRoZW1hCkBhY3Rpdml0eTogSElWLkQxNSBEZXRlcm1pbmUgY2xpbmljYWwgc3RhZ2Ugb2YgSElWCkBkZXNjcmlwdGlvbjogQ2xpZW50J3Mgc3ltcHRvbXMgaW5jbHVkZSBsaW5lYXIgZ2luZ2l2YWwgZXJ5dGhlbWEKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkxpbmVhciBnaW5naXZhbCBlcnl0aGVtYSI6CiAgZXhpc3RzICJMaW5lYXIgZ2luZ2l2YWwgZXJ5dGhlbWEgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJMaW5lYXIgZ2luZ2l2YWwgZXJ5dGhlbWEgT2JzZXJ2YXRpb24iCmRlZmluZSAiTGluZWFyIGdpbmdpdmFsIGVyeXRoZW1hIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIkxpbmVhciBnaW5naXZhbCBlcnl0aGVtYSBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIkxpbmVhciBnaW5naXZhbCBlcnl0aGVtYSBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkxpbmVhciBnaW5naXZhbCBlcnl0aGVtYSBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIExpbmVhciBnaW5naXZhbCBlcnl0aGVtYSAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTI5OCAtIFJlY3VycmVudCBvcmFsIHVsY2VyYXRpb24KQGFjdGl2aXR5OiBISVYuRDE1IERldGVybWluZSBjbGluaWNhbCBzdGFnZSBvZiBISVYKQGRlc2NyaXB0aW9uOiBDbGllbnQncyBzeW1wdG9tcyBpbmNsdWRlIHJlY3VycmVudCBvcmFsIHVsY2VyYXRpb24KKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIlJlY3VycmVudCBvcmFsIHVsY2VyYXRpb24iOgogIGV4aXN0cyAiUmVjdXJyZW50IG9yYWwgdWxjZXJhdGlvbiBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIlJlY3VycmVudCBvcmFsIHVsY2VyYXRpb24gT2JzZXJ2YXRpb24iCmRlZmluZSAiUmVjdXJyZW50IG9yYWwgdWxjZXJhdGlvbiBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJSZWN1cnJlbnQgb3JhbCB1bGNlcmF0aW9uIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiUmVjdXJyZW50IG9yYWwgdWxjZXJhdGlvbiBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIlJlY3VycmVudCBvcmFsIHVsY2VyYXRpb24gT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBSZWN1cnJlbnQgb3JhbCB1bGNlcmF0aW9uICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFMjk5IC0gUGFwdWxhciBwcnVyaXRpYyBlcnVwdGlvbgpAYWN0aXZpdHk6IEhJVi5EMTUgRGV0ZXJtaW5lIGNsaW5pY2FsIHN0YWdlIG9mIEhJVgpAZGVzY3JpcHRpb246IENsaWVudCdzIHN5bXB0b21zIGluY2x1ZGUgcGFwdWxhciBwcnVyaXRpYyBlcnVwdGlvbgoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiUGFwdWxhciBwcnVyaXRpYyBlcnVwdGlvbiI6CiAgZXhpc3RzICJQYXB1bGFyIHBydXJpdGljIGVydXB0aW9uIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiUGFwdWxhciBwcnVyaXRpYyBlcnVwdGlvbiBPYnNlcnZhdGlvbiIKZGVmaW5lICJQYXB1bGFyIHBydXJpdGljIGVydXB0aW9uIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIlBhcHVsYXIgcHJ1cml0aWMgZXJ1cHRpb24gQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJQYXB1bGFyIHBydXJpdGljIGVydXB0aW9uIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iUGFwdWxhciBwcnVyaXRpYyBlcnVwdGlvbiBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIFBhcHVsYXIgcHJ1cml0aWMgZXJ1cHRpb24gKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREUzMDAgLSBGdW5nYWwgbmFpbCBpbmZlY3Rpb25zCkBhY3Rpdml0eTogSElWLkQxNSBEZXRlcm1pbmUgY2xpbmljYWwgc3RhZ2Ugb2YgSElWCkBkZXNjcmlwdGlvbjogQ2xpZW50J3Mgc3ltcHRvbXMgaW5jbHVkZSBmdW5nYWwgbmFpbCBpbmZlY3Rpb25zCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJGdW5nYWwgbmFpbCBpbmZlY3Rpb25zIjoKICBleGlzdHMgIkZ1bmdhbCBuYWlsIGluZmVjdGlvbnMgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJGdW5nYWwgbmFpbCBpbmZlY3Rpb25zIE9ic2VydmF0aW9uIgpkZWZpbmUgIkZ1bmdhbCBuYWlsIGluZmVjdGlvbnMgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iRnVuZ2FsIG5haWwgaW5mZWN0aW9ucyBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIkZ1bmdhbCBuYWlsIGluZmVjdGlvbnMgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJGdW5nYWwgbmFpbCBpbmZlY3Rpb25zIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgRnVuZ2FsIG5haWwgaW5mZWN0aW9ucyAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTMwMSAtIFNlYm9ycmhvZWljIGRlcm1hdGl0aXMKQGFjdGl2aXR5OiBISVYuRDE1IERldGVybWluZSBjbGluaWNhbCBzdGFnZSBvZiBISVYKQGRlc2NyaXB0aW9uOiBDbGllbnQncyBzeW1wdG9tcyBpbmNsdWRlIHNlYm9ycmhvZWljIGRlcm1hdGl0aXMKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIlNlYm9ycmhvZWljIGRlcm1hdGl0aXMiOgogIGV4aXN0cyAiU2Vib3JyaG9laWMgZGVybWF0aXRpcyBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIlNlYm9ycmhvZWljIGRlcm1hdGl0aXMgT2JzZXJ2YXRpb24iCmRlZmluZSAiU2Vib3JyaG9laWMgZGVybWF0aXRpcyBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJTZWJvcnJob2VpYyBkZXJtYXRpdGlzIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiU2Vib3JyaG9laWMgZGVybWF0aXRpcyBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIlNlYm9ycmhvZWljIGRlcm1hdGl0aXMgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBTZWJvcnJob2VpYyBkZXJtYXRpdGlzICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFMzAyIC0gRXh0ZW5zaXZlIHdhcnQgdmlydXMgaW5mZWN0aW9uCkBhY3Rpdml0eTogSElWLkQxNSBEZXRlcm1pbmUgY2xpbmljYWwgc3RhZ2Ugb2YgSElWCkBkZXNjcmlwdGlvbjogQ2xpZW50J3Mgc3ltcHRvbXMgaW5jbHVkZSBleHRlbnNpdmUgd2FydCB2aXJ1cyBpbmZlY3Rpb24KKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkV4dGVuc2l2ZSB3YXJ0IHZpcnVzIGluZmVjdGlvbiI6CiAgZXhpc3RzICJFeHRlbnNpdmUgd2FydCB2aXJ1cyBpbmZlY3Rpb24gQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJFeHRlbnNpdmUgd2FydCB2aXJ1cyBpbmZlY3Rpb24gT2JzZXJ2YXRpb24iCmRlZmluZSAiRXh0ZW5zaXZlIHdhcnQgdmlydXMgaW5mZWN0aW9uIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIkV4dGVuc2l2ZSB3YXJ0IHZpcnVzIGluZmVjdGlvbiBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIkV4dGVuc2l2ZSB3YXJ0IHZpcnVzIGluZmVjdGlvbiBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkV4dGVuc2l2ZSB3YXJ0IHZpcnVzIGluZmVjdGlvbiBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIEV4dGVuc2l2ZSB3YXJ0IHZpcnVzIGluZmVjdGlvbiAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTMwMyAtIEV4dGVuc2l2ZSBtb2xsdXNjdW0gY29udGFnaW9zdW0KQGFjdGl2aXR5OiBISVYuRDE1IERldGVybWluZSBjbGluaWNhbCBzdGFnZSBvZiBISVYKQGRlc2NyaXB0aW9uOiBDbGllbnQncyBzeW1wdG9tcyBpbmNsdWRlIGV4dGVuc2l2ZSBtb2xsdXNjdW0gY29udGFnaW9zdW0KKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkV4dGVuc2l2ZSBtb2xsdXNjdW0gY29udGFnaW9zdW0iOgogIGV4aXN0cyAiRXh0ZW5zaXZlIG1vbGx1c2N1bSBjb250YWdpb3N1bSBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIkV4dGVuc2l2ZSBtb2xsdXNjdW0gY29udGFnaW9zdW0gT2JzZXJ2YXRpb24iCmRlZmluZSAiRXh0ZW5zaXZlIG1vbGx1c2N1bSBjb250YWdpb3N1bSBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJFeHRlbnNpdmUgbW9sbHVzY3VtIGNvbnRhZ2lvc3VtIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiRXh0ZW5zaXZlIG1vbGx1c2N1bSBjb250YWdpb3N1bSBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkV4dGVuc2l2ZSBtb2xsdXNjdW0gY29udGFnaW9zdW0gT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBFeHRlbnNpdmUgbW9sbHVzY3VtIGNvbnRhZ2lvc3VtICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFMzA0IC0gVW5leHBsYWluZWQgcGVyc2lzdGVudCBwYXJvdGlkIGVubGFyZ2VtZW50CkBhY3Rpdml0eTogSElWLkQxNSBEZXRlcm1pbmUgY2xpbmljYWwgc3RhZ2Ugb2YgSElWCkBkZXNjcmlwdGlvbjogQ2xpZW50J3Mgc3ltcHRvbXMgaW5jbHVkZSB1bmV4cGxhaW5lZCBwZXJzaXN0ZW50IHBhcm90aWQgZW5sYXJnZW1lbnQKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIlVuZXhwbGFpbmVkIHBlcnNpc3RlbnQgcGFyb3RpZCBlbmxhcmdlbWVudCI6CiAgZXhpc3RzICJVbmV4cGxhaW5lZCBwZXJzaXN0ZW50IHBhcm90aWQgZW5sYXJnZW1lbnQgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJVbmV4cGxhaW5lZCBwZXJzaXN0ZW50IHBhcm90aWQgZW5sYXJnZW1lbnQgT2JzZXJ2YXRpb24iCmRlZmluZSAiVW5leHBsYWluZWQgcGVyc2lzdGVudCBwYXJvdGlkIGVubGFyZ2VtZW50IENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIlVuZXhwbGFpbmVkIHBlcnNpc3RlbnQgcGFyb3RpZCBlbmxhcmdlbWVudCBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIlVuZXhwbGFpbmVkIHBlcnNpc3RlbnQgcGFyb3RpZCBlbmxhcmdlbWVudCBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIlVuZXhwbGFpbmVkIHBlcnNpc3RlbnQgcGFyb3RpZCBlbmxhcmdlbWVudCBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIFVuZXhwbGFpbmVkIHBlcnNpc3RlbnQgcGFyb3RpZCBlbmxhcmdlbWVudCAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTMwNSAtIFVuZXhwbGFpbmVkIHNldmVyZSB3ZWlnaHQgbG9zcyBpbiBhZHVsdHMKQGFjdGl2aXR5OiBISVYuRDE1IERldGVybWluZSBjbGluaWNhbCBzdGFnZSBvZiBISVYKQGRlc2NyaXB0aW9uOiBVbmV4cGxhaW5lZCBzZXZlcmUgd2VpZ2h0IGxvc3MgKD4xMCUgb2YgcHJlc3VtZWQgb3IgbWVhc3VyZWQgYm9keSB3ZWlnaHQpCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJVbmV4cGxhaW5lZCBzZXZlcmUgd2VpZ2h0IGxvc3MgaW4gYWR1bHRzIjoKICBleGlzdHMgIlVuZXhwbGFpbmVkIHNldmVyZSB3ZWlnaHQgbG9zcyBpbiBhZHVsdHMgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJVbmV4cGxhaW5lZCBzZXZlcmUgd2VpZ2h0IGxvc3MgaW4gYWR1bHRzIE9ic2VydmF0aW9uIgpkZWZpbmUgIlVuZXhwbGFpbmVkIHNldmVyZSB3ZWlnaHQgbG9zcyBpbiBhZHVsdHMgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iVW5leHBsYWluZWQgc2V2ZXJlIHdlaWdodCBsb3NzIGluIGFkdWx0cyBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIlVuZXhwbGFpbmVkIHNldmVyZSB3ZWlnaHQgbG9zcyBpbiBhZHVsdHMgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJVbmV4cGxhaW5lZCBzZXZlcmUgd2VpZ2h0IGxvc3MgaW4gYWR1bHRzIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgVW5leHBsYWluZWQgc2V2ZXJlIHdlaWdodCBsb3NzIGluIGFkdWx0cyAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTMwNiAtIFVuZXhwbGFpbmVkIG1vZGVyYXRlIG1hbG51dHJpdGlvbiBub3QgYWRlcXVhdGVseSByZXNwb25kaW5nIHRvIHN0YW5kYXJkIHRoZXJhcHkKQGFjdGl2aXR5OiBISVYuRDE1IERldGVybWluZSBjbGluaWNhbCBzdGFnZSBvZiBISVYKQGRlc2NyaXB0aW9uOiBEZWZpbmVkIGFzIHdlaWdodC1mb3ItaGVpZ2h0IDwgLSAyIHotc2NvcmUgb3IgbWlkLXVwcGVyIGFybSBjaXJjdW1mZXJlbmNlIDExNSBtbSB0byA8MTI1IG1tLiBGb3IgY2hpbGRyZW4geW91bmdlciB0aGFuIGZpdmUgeWVhcnMgb2YgYWdlOiBzdHVudGluZyBpcyBkZWZpbmVkIGFzIHNldmVyZSBhY3V0ZSBtYWxudXRyaXRpb24gLSBlaXRoZXIgd2VpZ2h0IGZvciBoZWlnaHQgPCAtMyB6LXNjb3JlIG9yIG1pZC11cHBlciBhcm0gY2lyY3VtZmVyZW5jZSA8MTE1IG1tIG9yIHRoZSBwcmVzZW5jZSBvZiBvZWRlbWEuCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJVbmV4cGxhaW5lZCBtb2RlcmF0ZSBtYWxudXRyaXRpb24gbm90IGFkZXF1YXRlbHkgcmVzcG9uZGluZyB0byBzdGFuZGFyZCB0aGVyYXB5IjoKICBleGlzdHMgIlVuZXhwbGFpbmVkIG1vZGVyYXRlIG1hbG51dHJpdGlvbiBub3QgYWRlcXVhdGVseSByZXNwb25kaW5nIHRvIHN0YW5kYXJkIHRoZXJhcHkgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJVbmV4cGxhaW5lZCBtb2RlcmF0ZSBtYWxudXRyaXRpb24gbm90IGFkZXF1YXRlbHkgcmVzcG9uZGluZyB0byBzdGFuZGFyZCB0aGVyYXB5IE9ic2VydmF0aW9uIgpkZWZpbmUgIlVuZXhwbGFpbmVkIG1vZGVyYXRlIG1hbG51dHJpdGlvbiBub3QgYWRlcXVhdGVseSByZXNwb25kaW5nIHRvIHN0YW5kYXJkIHRoZXJhcHkgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iVW5leHBsYWluZWQgbW9kZXJhdGUgbWFsbnV0cml0aW9uIG5vdCBhZGVxdWF0ZWx5IHJlc3BvbmRpbmcgdG8gc3RhbmRhcmQgdGhlcmFweSBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIlVuZXhwbGFpbmVkIG1vZGVyYXRlIG1hbG51dHJpdGlvbiBub3QgYWRlcXVhdGVseSByZXNwb25kaW5nIHRvIHN0YW5kYXJkIHRoZXJhcHkgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJVbmV4cGxhaW5lZCBtb2RlcmF0ZSBtYWxudXRyaXRpb24gbm90IGFkZXF1YXRlbHkgcmVzcG9uZGluZyB0byBzdGFuZGFyZCB0aGVyYXB5IE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgVW5leHBsYWluZWQgbW9kZXJhdGUgbWFsbnV0cml0aW9uIG5vdCBhZGVxdWF0ZWx5IHJlc3BvbmRpbmcgdG8gc3RhbmRhcmQgdGhlcmFweSAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTMwNyAtIFVuZXhwbGFpbmVkIGNocm9uaWMgZGlhcnJob2VhIGZvciBsb25nZXIgdGhhbiAxIG1vbnRoCkBhY3Rpdml0eTogSElWLkQxNSBEZXRlcm1pbmUgY2xpbmljYWwgc3RhZ2Ugb2YgSElWCkBkZXNjcmlwdGlvbjogQ2xpZW50J3Mgc3ltcHRvbXMgaW5jbHVkZSB1bmV4cGxhaW5lZCBjaHJvbmljIGRpYXJyaG9lYSBmb3IgbG9uZ2VyIHRoYW4gMSBtb250aAoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiVW5leHBsYWluZWQgY2hyb25pYyBkaWFycmhvZWEgZm9yIGxvbmdlciB0aGFuIDEgbW9udGgiOgogIGV4aXN0cyAiVW5leHBsYWluZWQgY2hyb25pYyBkaWFycmhvZWEgZm9yIGxvbmdlciB0aGFuIDEgbW9udGggQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJVbmV4cGxhaW5lZCBjaHJvbmljIGRpYXJyaG9lYSBmb3IgbG9uZ2VyIHRoYW4gMSBtb250aCBPYnNlcnZhdGlvbiIKZGVmaW5lICJVbmV4cGxhaW5lZCBjaHJvbmljIGRpYXJyaG9lYSBmb3IgbG9uZ2VyIHRoYW4gMSBtb250aCBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJVbmV4cGxhaW5lZCBjaHJvbmljIGRpYXJyaG9lYSBmb3IgbG9uZ2VyIHRoYW4gMSBtb250aCBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIlVuZXhwbGFpbmVkIGNocm9uaWMgZGlhcnJob2VhIGZvciBsb25nZXIgdGhhbiAxIG1vbnRoIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iVW5leHBsYWluZWQgY2hyb25pYyBkaWFycmhvZWEgZm9yIGxvbmdlciB0aGFuIDEgbW9udGggT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBVbmV4cGxhaW5lZCBjaHJvbmljIGRpYXJyaG9lYSBmb3IgbG9uZ2VyIHRoYW4gMSBtb250aCAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTMwOCAtIFVuZXhwbGFpbmVkIHBlcnNpc3RlbnQgZGlhcnJob2VhIDE0IGRheXMgb3IgbW9yZQpAYWN0aXZpdHk6IEhJVi5EMTUgRGV0ZXJtaW5lIGNsaW5pY2FsIHN0YWdlIG9mIEhJVgpAZGVzY3JpcHRpb246IENsaWVudCdzIHN5bXB0b21zIGluY2x1ZGUgdW5leHBsYWluZWQgcGVyc2lzdGVudCBkaWFycmhvZWEgKDE0IGRheXMgb3IgbW9yZSkKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIlVuZXhwbGFpbmVkIHBlcnNpc3RlbnQgZGlhcnJob2VhIDE0IGRheXMgb3IgbW9yZSI6CiAgZXhpc3RzICJVbmV4cGxhaW5lZCBwZXJzaXN0ZW50IGRpYXJyaG9lYSAxNCBkYXlzIG9yIG1vcmUgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJVbmV4cGxhaW5lZCBwZXJzaXN0ZW50IGRpYXJyaG9lYSAxNCBkYXlzIG9yIG1vcmUgT2JzZXJ2YXRpb24iCmRlZmluZSAiVW5leHBsYWluZWQgcGVyc2lzdGVudCBkaWFycmhvZWEgMTQgZGF5cyBvciBtb3JlIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIlVuZXhwbGFpbmVkIHBlcnNpc3RlbnQgZGlhcnJob2VhIDE0IGRheXMgb3IgbW9yZSBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIlVuZXhwbGFpbmVkIHBlcnNpc3RlbnQgZGlhcnJob2VhIDE0IGRheXMgb3IgbW9yZSBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIlVuZXhwbGFpbmVkIHBlcnNpc3RlbnQgZGlhcnJob2VhIDE0IGRheXMgb3IgbW9yZSBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIFVuZXhwbGFpbmVkIHBlcnNpc3RlbnQgZGlhcnJob2VhIDE0IGRheXMgb3IgbW9yZSAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTMwOSAtIFVuZXhwbGFpbmVkIHBlcnNpc3RlbnQgZmV2ZXIgYWJvdmUgMzcuNSBDLCBpbnRlcm1pdHRlbnQgb3IgY29uc3RhbnQsIGZvciBsb25nZXIgdGhhbiBvbmUgMSBtb250aApAYWN0aXZpdHk6IEhJVi5EMTUgRGV0ZXJtaW5lIGNsaW5pY2FsIHN0YWdlIG9mIEhJVgpAZGVzY3JpcHRpb246IENsaWVudCdzIHN5bXB0b21zIGluY2x1ZGUgdW5leHBsYWluZWQgcGVyc2lzdGVudCBmZXZlciAoYWJvdmUgMzcuNSBDLCBpbnRlcm1pdHRlbnQgb3IgY29uc3RhbnQsIGZvciBsb25nZXIgdGhhbiBvbmUgMSBtb250aCkKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIlVuZXhwbGFpbmVkIHBlcnNpc3RlbnQgZmV2ZXIgYWJvdmUgMzcuNSBDLCBpbnRlcm1pdHRlbnQgb3IgY29uc3RhbnQsIGZvciBsb25nZXIgdGhhbiBvbmUgMSBtb250aCI6CiAgZXhpc3RzICJVbmV4cGxhaW5lZCBwZXJzaXN0ZW50IGZldmVyIGFib3ZlIDM3LjUgQywgaW50ZXJtaXR0ZW50IG9yIGNvbnN0YW50LCBmb3IgbG9uZ2VyIHRoYW4gb25lIDEgbW9udGggQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJVbmV4cGxhaW5lZCBwZXJzaXN0ZW50IGZldmVyIGFib3ZlIDM3LjUgQywgaW50ZXJtaXR0ZW50IG9yIGNvbnN0YW50LCBmb3IgbG9uZ2VyIHRoYW4gb25lIDEgbW9udGggT2JzZXJ2YXRpb24iCmRlZmluZSAiVW5leHBsYWluZWQgcGVyc2lzdGVudCBmZXZlciBhYm92ZSAzNy41IEMsIGludGVybWl0dGVudCBvciBjb25zdGFudCwgZm9yIGxvbmdlciB0aGFuIG9uZSAxIG1vbnRoIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIlVuZXhwbGFpbmVkIHBlcnNpc3RlbnQgZmV2ZXIgYWJvdmUgMzcuNSBDLCBpbnRlcm1pdHRlbnQgb3IgY29uc3RhbnQsIGZvciBsb25nZXIgdGhhbiBvbmUgMSBtb250aCBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIlVuZXhwbGFpbmVkIHBlcnNpc3RlbnQgZmV2ZXIgYWJvdmUgMzcuNSBDLCBpbnRlcm1pdHRlbnQgb3IgY29uc3RhbnQsIGZvciBsb25nZXIgdGhhbiBvbmUgMSBtb250aCBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIlVuZXhwbGFpbmVkIHBlcnNpc3RlbnQgZmV2ZXIgYWJvdmUgMzcuNSBDLCBpbnRlcm1pdHRlbnQgb3IgY29uc3RhbnQsIGZvciBsb25nZXIgdGhhbiBvbmUgMSBtb250aCBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIFVuZXhwbGFpbmVkIHBlcnNpc3RlbnQgZmV2ZXIgYWJvdmUgMzcuNSBDLCBpbnRlcm1pdHRlbnQgb3IgY29uc3RhbnQsIGZvciBsb25nZXIgdGhhbiBvbmUgMSBtb250aCAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTMxMCAtIFBlcnNpc3RlbnQgb3JhbCBjYW5kaWRpYXNpcwpAYWN0aXZpdHk6IEhJVi5EMTUgRGV0ZXJtaW5lIGNsaW5pY2FsIHN0YWdlIG9mIEhJVgpAZGVzY3JpcHRpb246IENsaWVudCdzIHN5bXB0b21zIGluY2x1ZGUgcGVyc2lzdGVudCBvcmFsIGNhbmRpZGlhc2lzCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJQZXJzaXN0ZW50IG9yYWwgY2FuZGlkaWFzaXMiOgogIGV4aXN0cyAiUGVyc2lzdGVudCBvcmFsIGNhbmRpZGlhc2lzIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiUGVyc2lzdGVudCBvcmFsIGNhbmRpZGlhc2lzIE9ic2VydmF0aW9uIgpkZWZpbmUgIlBlcnNpc3RlbnQgb3JhbCBjYW5kaWRpYXNpcyBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJQZXJzaXN0ZW50IG9yYWwgY2FuZGlkaWFzaXMgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJQZXJzaXN0ZW50IG9yYWwgY2FuZGlkaWFzaXMgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJQZXJzaXN0ZW50IG9yYWwgY2FuZGlkaWFzaXMgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBQZXJzaXN0ZW50IG9yYWwgY2FuZGlkaWFzaXMgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREUzMTEgLSBPcmFsIGhhaXJ5IGxldWtvcGxha2lhCkBhY3Rpdml0eTogSElWLkQxNSBEZXRlcm1pbmUgY2xpbmljYWwgc3RhZ2Ugb2YgSElWCkBkZXNjcmlwdGlvbjogQ2xpZW50IGhhcyBmaW5lIHdoaXRlIHNtYWxsIGxpbmVhciBvciBjb3JydWdhdGVkIGxlc2lvbnMgb24gbGF0ZXJhbCBib3JkZXJzIG9mIHRoZSB0b25ndWUgdGhhdCBkbyBub3Qgc2NyYXBlIG9mZgoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiT3JhbCBoYWlyeSBsZXVrb3BsYWtpYSI6CiAgZXhpc3RzICJPcmFsIGhhaXJ5IGxldWtvcGxha2lhIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiT3JhbCBoYWlyeSBsZXVrb3BsYWtpYSBPYnNlcnZhdGlvbiIKZGVmaW5lICJPcmFsIGhhaXJ5IGxldWtvcGxha2lhIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIk9yYWwgaGFpcnkgbGV1a29wbGFraWEgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJPcmFsIGhhaXJ5IGxldWtvcGxha2lhIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iT3JhbCBoYWlyeSBsZXVrb3BsYWtpYSBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIE9yYWwgaGFpcnkgbGV1a29wbGFraWEgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREUzMTIgLSBQdWxtb25hcnkgVEIKQGFjdGl2aXR5OiBISVYuRDE1IERldGVybWluZSBjbGluaWNhbCBzdGFnZSBvZiBISVYKQGRlc2NyaXB0aW9uOiBDbGllbnQncyBzeW1wdG9tcyBpbmNsdWRlIHB1bG1vbmFyeSBUQgoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiUHVsbW9uYXJ5IFRCIEQuREUzMTIiOgogIGV4aXN0cyAiUHVsbW9uYXJ5IFRCIEQuREUzMTIgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJQdWxtb25hcnkgVEIgRC5ERTMxMiBPYnNlcnZhdGlvbiIKZGVmaW5lICJQdWxtb25hcnkgVEIgRC5ERTMxMiBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJQdWxtb25hcnkgVEIgRC5ERTMxMiBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIlB1bG1vbmFyeSBUQiBELkRFMzEyIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iUHVsbW9uYXJ5IFRCIEQuREUzMTIgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBQdWxtb25hcnkgVEIgRC5ERTMxMiAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTMxMyAtIEx5bXBoIG5vZGUgVEIKQGFjdGl2aXR5OiBISVYuRDE1IERldGVybWluZSBjbGluaWNhbCBzdGFnZSBvZiBISVYKQGRlc2NyaXB0aW9uOiBDbGllbnQncyBzeW1wdG9tcyBpbmNsdWRlIGx5bXBoIG5vZGUgVEIKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkx5bXBoIG5vZGUgVEIgRC5ERTMxMyI6CiAgZXhpc3RzICJMeW1waCBub2RlIFRCIEQuREUzMTMgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJMeW1waCBub2RlIFRCIEQuREUzMTMgT2JzZXJ2YXRpb24iCmRlZmluZSAiTHltcGggbm9kZSBUQiBELkRFMzEzIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIkx5bXBoIG5vZGUgVEIgRC5ERTMxMyBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIkx5bXBoIG5vZGUgVEIgRC5ERTMxMyBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkx5bXBoIG5vZGUgVEIgRC5ERTMxMyBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIEx5bXBoIG5vZGUgVEIgRC5ERTMxMyAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTMxNCAtIFNldmVyZSBiYWN0ZXJpYWwgaW5mZWN0aW9ucyBzdWNoIGFzIHBuZXVtb25pYSwgZW1weWVtYSwgcHlvbXlvc2l0aXMsIGJvbmUgb3Igam9pbnQgaW5mZWN0aW9uLCBtZW5pbmdpdGlzLCBiYWN0ZXJhZW1pYQpAYWN0aXZpdHk6IEhJVi5EMTUgRGV0ZXJtaW5lIGNsaW5pY2FsIHN0YWdlIG9mIEhJVgpAZGVzY3JpcHRpb246IENsaWVudCdzIHN5bXB0b21zIGluY2x1ZGUgc2V2ZXJlIGJhY3RlcmlhbCBpbmZlY3Rpb25zIChzdWNoIGFzIHBuZXVtb25pYSwgZW1weWVtYSwgcHlvbXlvc2l0aXMsIGJvbmUgb3Igam9pbnQgaW5mZWN0aW9uLCBtZW5pbmdpdGlzLCBiYWN0ZXJhZW1pYSkKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIlNldmVyZSBiYWN0ZXJpYWwgaW5mZWN0aW9ucyBzdWNoIGFzIHBuZXVtb25pYSwgZW1weWVtYSwgcHlvbXlvc2l0aXMsIGJvbmUgb3Igam9pbnQgaW5mZWN0aW9uLCBtZW5pbmdpdGlzLCBiYWN0ZXJhZW1pYSI6CiAgZXhpc3RzICJTZXZlcmUgYmFjdGVyaWFsIGluZmVjdGlvbnMgc3VjaCBhcyBwbmV1bW9uaWEsIGVtcHllbWEsIHB5b215b3NpdGlzLCBib25lIG9yIGpvaW50IGluZmVjdGlvbiwgbWVuaW5naXRpcywgYmFjdGVyYWVtaWEgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJTZXZlcmUgYmFjdGVyaWFsIGluZmVjdGlvbnMgc3VjaCBhcyBwbmV1bW9uaWEsIGVtcHllbWEsIHB5b215b3NpdGlzLCBib25lIG9yIGpvaW50IGluZmVjdGlvbiwgbWVuaW5naXRpcywgYmFjdGVyYWVtaWEgT2JzZXJ2YXRpb24iCmRlZmluZSAiU2V2ZXJlIGJhY3RlcmlhbCBpbmZlY3Rpb25zIHN1Y2ggYXMgcG5ldW1vbmlhLCBlbXB5ZW1hLCBweW9teW9zaXRpcywgYm9uZSBvciBqb2ludCBpbmZlY3Rpb24sIG1lbmluZ2l0aXMsIGJhY3RlcmFlbWlhIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIlNldmVyZSBiYWN0ZXJpYWwgaW5mZWN0aW9ucyBzdWNoIGFzIHBuZXVtb25pYSwgZW1weWVtYSwgcHlvbXlvc2l0aXMsIGJvbmUgb3Igam9pbnQgaW5mZWN0aW9uLCBtZW5pbmdpdGlzLCBiYWN0ZXJhZW1pYSBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIlNldmVyZSBiYWN0ZXJpYWwgaW5mZWN0aW9ucyBzdWNoIGFzIHBuZXVtb25pYSwgZW1weWVtYSwgcHlvbXlvc2l0aXMsIGJvbmUgb3Igam9pbnQgaW5mZWN0aW9uLCBtZW5pbmdpdGlzLCBiYWN0ZXJhZW1pYSBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIlNldmVyZSBiYWN0ZXJpYWwgaW5mZWN0aW9ucyBzdWNoIGFzIHBuZXVtb25pYSwgZW1weWVtYSwgcHlvbXlvc2l0aXMsIGJvbmUgb3Igam9pbnQgaW5mZWN0aW9uLCBtZW5pbmdpdGlzLCBiYWN0ZXJhZW1pYSBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIFNldmVyZSBiYWN0ZXJpYWwgaW5mZWN0aW9ucyBzdWNoIGFzIHBuZXVtb25pYSwgZW1weWVtYSwgcHlvbXlvc2l0aXMsIGJvbmUgb3Igam9pbnQgaW5mZWN0aW9uLCBtZW5pbmdpdGlzLCBiYWN0ZXJhZW1pYSAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTMxNSAtIFNldmVyZSByZWN1cnJlbnQgYmFjdGVyaWFsIHBuZXVtb25pYQpAYWN0aXZpdHk6IEhJVi5EMTUgRGV0ZXJtaW5lIGNsaW5pY2FsIHN0YWdlIG9mIEhJVgpAZGVzY3JpcHRpb246IENsaWVudCdzIHN5bXB0b21zIGluY2x1ZGUgc2V2ZXJlIHJlY3VycmVudCBiYWN0ZXJpYWwgcG5ldW1vbmlhCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJTZXZlcmUgcmVjdXJyZW50IGJhY3RlcmlhbCBwbmV1bW9uaWEiOgogIGV4aXN0cyAiU2V2ZXJlIHJlY3VycmVudCBiYWN0ZXJpYWwgcG5ldW1vbmlhIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiU2V2ZXJlIHJlY3VycmVudCBiYWN0ZXJpYWwgcG5ldW1vbmlhIE9ic2VydmF0aW9uIgpkZWZpbmUgIlNldmVyZSByZWN1cnJlbnQgYmFjdGVyaWFsIHBuZXVtb25pYSBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJTZXZlcmUgcmVjdXJyZW50IGJhY3RlcmlhbCBwbmV1bW9uaWEgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJTZXZlcmUgcmVjdXJyZW50IGJhY3RlcmlhbCBwbmV1bW9uaWEgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJTZXZlcmUgcmVjdXJyZW50IGJhY3RlcmlhbCBwbmV1bW9uaWEgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBTZXZlcmUgcmVjdXJyZW50IGJhY3RlcmlhbCBwbmV1bW9uaWEgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREUzMTYgLSBBY3V0ZSBuZWNyb3RpemluZyB1bGNlcmF0aXZlIHN0b21hdGl0aXMKQGFjdGl2aXR5OiBISVYuRDE1IERldGVybWluZSBjbGluaWNhbCBzdGFnZSBvZiBISVYKQGRlc2NyaXB0aW9uOiBDbGllbnQncyBzeW1wdG9tcyBpbmNsdWRlIGFjdXRlIG5lY3JvdGl6aW5nIHVsY2VyYXRpdmUgc3RvbWF0aXRpcwoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiQWN1dGUgbmVjcm90aXppbmcgdWxjZXJhdGl2ZSBzdG9tYXRpdGlzIjoKICBleGlzdHMgIkFjdXRlIG5lY3JvdGl6aW5nIHVsY2VyYXRpdmUgc3RvbWF0aXRpcyBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIkFjdXRlIG5lY3JvdGl6aW5nIHVsY2VyYXRpdmUgc3RvbWF0aXRpcyBPYnNlcnZhdGlvbiIKZGVmaW5lICJBY3V0ZSBuZWNyb3RpemluZyB1bGNlcmF0aXZlIHN0b21hdGl0aXMgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iQWN1dGUgbmVjcm90aXppbmcgdWxjZXJhdGl2ZSBzdG9tYXRpdGlzIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiQWN1dGUgbmVjcm90aXppbmcgdWxjZXJhdGl2ZSBzdG9tYXRpdGlzIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iQWN1dGUgbmVjcm90aXppbmcgdWxjZXJhdGl2ZSBzdG9tYXRpdGlzIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgQWN1dGUgbmVjcm90aXppbmcgdWxjZXJhdGl2ZSBzdG9tYXRpdGlzICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFMzE3IC0gQWN1dGUgbmVjcm90aXppbmcgdWxjZXJhdGl2ZSBnaW5naXZpdGlzCkBhY3Rpdml0eTogSElWLkQxNSBEZXRlcm1pbmUgY2xpbmljYWwgc3RhZ2Ugb2YgSElWCkBkZXNjcmlwdGlvbjogQ2xpZW50J3Mgc3ltcHRvbXMgaW5jbHVkZSBhY3V0ZSBuZWNyb3RpemluZyB1bGNlcmF0aXZlIGdpbmdpdml0aXMKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkFjdXRlIG5lY3JvdGl6aW5nIHVsY2VyYXRpdmUgZ2luZ2l2aXRpcyI6CiAgZXhpc3RzICJBY3V0ZSBuZWNyb3RpemluZyB1bGNlcmF0aXZlIGdpbmdpdml0aXMgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJBY3V0ZSBuZWNyb3RpemluZyB1bGNlcmF0aXZlIGdpbmdpdml0aXMgT2JzZXJ2YXRpb24iCmRlZmluZSAiQWN1dGUgbmVjcm90aXppbmcgdWxjZXJhdGl2ZSBnaW5naXZpdGlzIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIkFjdXRlIG5lY3JvdGl6aW5nIHVsY2VyYXRpdmUgZ2luZ2l2aXRpcyBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIkFjdXRlIG5lY3JvdGl6aW5nIHVsY2VyYXRpdmUgZ2luZ2l2aXRpcyBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkFjdXRlIG5lY3JvdGl6aW5nIHVsY2VyYXRpdmUgZ2luZ2l2aXRpcyBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIEFjdXRlIG5lY3JvdGl6aW5nIHVsY2VyYXRpdmUgZ2luZ2l2aXRpcyAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTMxOCAtIEFjdXRlIG5lY3JvdGl6aW5nIHVsY2VyYXRpdmUgcGVyaW9kb250aXRpcwpAYWN0aXZpdHk6IEhJVi5EMTUgRGV0ZXJtaW5lIGNsaW5pY2FsIHN0YWdlIG9mIEhJVgpAZGVzY3JpcHRpb246IENsaWVudCdzIHN5bXB0b21zIGluY2x1ZGUgYWN1dGUgbmVjcm90aXppbmcgdWxjZXJhdGl2ZSBwZXJpb2RvbnRpdGlzCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJBY3V0ZSBuZWNyb3RpemluZyB1bGNlcmF0aXZlIHBlcmlvZG9udGl0aXMiOgogIGV4aXN0cyAiQWN1dGUgbmVjcm90aXppbmcgdWxjZXJhdGl2ZSBwZXJpb2RvbnRpdGlzIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiQWN1dGUgbmVjcm90aXppbmcgdWxjZXJhdGl2ZSBwZXJpb2RvbnRpdGlzIE9ic2VydmF0aW9uIgpkZWZpbmUgIkFjdXRlIG5lY3JvdGl6aW5nIHVsY2VyYXRpdmUgcGVyaW9kb250aXRpcyBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJBY3V0ZSBuZWNyb3RpemluZyB1bGNlcmF0aXZlIHBlcmlvZG9udGl0aXMgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJBY3V0ZSBuZWNyb3RpemluZyB1bGNlcmF0aXZlIHBlcmlvZG9udGl0aXMgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJBY3V0ZSBuZWNyb3RpemluZyB1bGNlcmF0aXZlIHBlcmlvZG9udGl0aXMgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBBY3V0ZSBuZWNyb3RpemluZyB1bGNlcmF0aXZlIHBlcmlvZG9udGl0aXMgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREUzMTkgLSBVbmV4cGxhaW5lZCBhbmFlbWlhIDw4IGcvZEwKQGFjdGl2aXR5OiBISVYuRDE1IERldGVybWluZSBjbGluaWNhbCBzdGFnZSBvZiBISVYKQGRlc2NyaXB0aW9uOiBDbGllbnQncyBzeW1wdG9tcyBpbmNsdWRlIHVuZXhwbGFpbmVkIGFuYWVtaWEgKDw4IGcvZEwpCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJVbmV4cGxhaW5lZCBhbmFlbWlhIDw4IGcvZEwiOgogIGV4aXN0cyAiVW5leHBsYWluZWQgYW5hZW1pYSA8OCBnL2RMIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiVW5leHBsYWluZWQgYW5hZW1pYSA8OCBnL2RMIE9ic2VydmF0aW9uIgpkZWZpbmUgIlVuZXhwbGFpbmVkIGFuYWVtaWEgPDggZy9kTCBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJVbmV4cGxhaW5lZCBhbmFlbWlhIDw4IGcvZEwgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJVbmV4cGxhaW5lZCBhbmFlbWlhIDw4IGcvZEwgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJVbmV4cGxhaW5lZCBhbmFlbWlhIDw4IGcvZEwgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBVbmV4cGxhaW5lZCBhbmFlbWlhIDw4IGcvZEwgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREUzMjAgLSBOZXV0cm9wYWVuaWEgPDAuNSB4IDEwXjkvTApAYWN0aXZpdHk6IEhJVi5EMTUgRGV0ZXJtaW5lIGNsaW5pY2FsIHN0YWdlIG9mIEhJVgpAZGVzY3JpcHRpb246IENsaWVudCdzIHN5bXB0b21zIGluY2x1ZGUgbmV1dHJvcGFlbmlhICg8MC41IHggMTBeOS9MKQoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiTmV1dHJvcGFlbmlhIDwwLjUgeCAxMF45L0wiOgogIGV4aXN0cyAiTmV1dHJvcGFlbmlhIDwwLjUgeCAxMF45L0wgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJOZXV0cm9wYWVuaWEgPDAuNSB4IDEwXjkvTCBPYnNlcnZhdGlvbiIKZGVmaW5lICJOZXV0cm9wYWVuaWEgPDAuNSB4IDEwXjkvTCBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJOZXV0cm9wYWVuaWEgPDAuNSB4IDEwXjkvTCBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIk5ldXRyb3BhZW5pYSA8MC41IHggMTBeOS9MIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iTmV1dHJvcGFlbmlhIDwwLjUgeCAxMF45L0wgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBOZXV0cm9wYWVuaWEgPDAuNSB4IDEwXjkvTCAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTMyMSAtIENocm9uaWMgdGhyb21ib2N5dG9wYWVuaWEgPDUwIHggMTBeOS9MCkBhY3Rpdml0eTogSElWLkQxNSBEZXRlcm1pbmUgY2xpbmljYWwgc3RhZ2Ugb2YgSElWCkBkZXNjcmlwdGlvbjogQ2xpZW50J3Mgc3ltcHRvbXMgaW5jbHVkZSBjaHJvbmljIHRocm9tYm9jeXRvcGFlbmlhICg8NTAgeCAxMF45L0wpCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJDaHJvbmljIHRocm9tYm9jeXRvcGFlbmlhIDw1MCB4IDEwXjkvTCI6CiAgZXhpc3RzICJDaHJvbmljIHRocm9tYm9jeXRvcGFlbmlhIDw1MCB4IDEwXjkvTCBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIkNocm9uaWMgdGhyb21ib2N5dG9wYWVuaWEgPDUwIHggMTBeOS9MIE9ic2VydmF0aW9uIgpkZWZpbmUgIkNocm9uaWMgdGhyb21ib2N5dG9wYWVuaWEgPDUwIHggMTBeOS9MIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIkNocm9uaWMgdGhyb21ib2N5dG9wYWVuaWEgPDUwIHggMTBeOS9MIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiQ2hyb25pYyB0aHJvbWJvY3l0b3BhZW5pYSA8NTAgeCAxMF45L0wgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJDaHJvbmljIHRocm9tYm9jeXRvcGFlbmlhIDw1MCB4IDEwXjkvTCBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIENocm9uaWMgdGhyb21ib2N5dG9wYWVuaWEgPDUwIHggMTBeOS9MICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFMzIyIC0gU3ltcHRvbWF0aWMgbHltcGhvaWQgaW50ZXJzdGl0aWFsIHBuZXVtb25pdGlzCkBhY3Rpdml0eTogSElWLkQxNSBEZXRlcm1pbmUgY2xpbmljYWwgc3RhZ2Ugb2YgSElWCkBkZXNjcmlwdGlvbjogQ2xpZW50J3Mgc3ltcHRvbXMgaW5jbHVkZSBzeW1wdG9tYXRpYyBseW1waG9pZCBpbnRlcnN0aXRpYWwgcG5ldW1vbml0aXMKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIlN5bXB0b21hdGljIGx5bXBob2lkIGludGVyc3RpdGlhbCBwbmV1bW9uaXRpcyI6CiAgZXhpc3RzICJTeW1wdG9tYXRpYyBseW1waG9pZCBpbnRlcnN0aXRpYWwgcG5ldW1vbml0aXMgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJTeW1wdG9tYXRpYyBseW1waG9pZCBpbnRlcnN0aXRpYWwgcG5ldW1vbml0aXMgT2JzZXJ2YXRpb24iCmRlZmluZSAiU3ltcHRvbWF0aWMgbHltcGhvaWQgaW50ZXJzdGl0aWFsIHBuZXVtb25pdGlzIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIlN5bXB0b21hdGljIGx5bXBob2lkIGludGVyc3RpdGlhbCBwbmV1bW9uaXRpcyBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIlN5bXB0b21hdGljIGx5bXBob2lkIGludGVyc3RpdGlhbCBwbmV1bW9uaXRpcyBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIlN5bXB0b21hdGljIGx5bXBob2lkIGludGVyc3RpdGlhbCBwbmV1bW9uaXRpcyBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIFN5bXB0b21hdGljIGx5bXBob2lkIGludGVyc3RpdGlhbCBwbmV1bW9uaXRpcyAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTMyMyAtIENocm9uaWMgSElWLWFzc29jaWF0ZWQgbHVuZyBkaXNlYXNlLCBpbmNsdWRpbmcgYnJvbmNoaWVjdGFzaXMKQGFjdGl2aXR5OiBISVYuRDE1IERldGVybWluZSBjbGluaWNhbCBzdGFnZSBvZiBISVYKQGRlc2NyaXB0aW9uOiBDbGllbnQncyBzeW1wdG9tcyBpbmNsdWRlIGNocm9uaWMgSElWLWFzc29jaWF0ZWQgbHVuZyBkaXNlYXNlLCBpbmNsdWRpbmcgYnJvbmNoaWVjdGFzaXMKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkNocm9uaWMgSElWLWFzc29jaWF0ZWQgbHVuZyBkaXNlYXNlLCBpbmNsdWRpbmcgYnJvbmNoaWVjdGFzaXMiOgogIGV4aXN0cyAiQ2hyb25pYyBISVYtYXNzb2NpYXRlZCBsdW5nIGRpc2Vhc2UsIGluY2x1ZGluZyBicm9uY2hpZWN0YXNpcyBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIkNocm9uaWMgSElWLWFzc29jaWF0ZWQgbHVuZyBkaXNlYXNlLCBpbmNsdWRpbmcgYnJvbmNoaWVjdGFzaXMgT2JzZXJ2YXRpb24iCmRlZmluZSAiQ2hyb25pYyBISVYtYXNzb2NpYXRlZCBsdW5nIGRpc2Vhc2UsIGluY2x1ZGluZyBicm9uY2hpZWN0YXNpcyBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJDaHJvbmljIEhJVi1hc3NvY2lhdGVkIGx1bmcgZGlzZWFzZSwgaW5jbHVkaW5nIGJyb25jaGllY3Rhc2lzIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiQ2hyb25pYyBISVYtYXNzb2NpYXRlZCBsdW5nIGRpc2Vhc2UsIGluY2x1ZGluZyBicm9uY2hpZWN0YXNpcyBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkNocm9uaWMgSElWLWFzc29jaWF0ZWQgbHVuZyBkaXNlYXNlLCBpbmNsdWRpbmcgYnJvbmNoaWVjdGFzaXMgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBDaHJvbmljIEhJVi1hc3NvY2lhdGVkIGx1bmcgZGlzZWFzZSwgaW5jbHVkaW5nIGJyb25jaGllY3Rhc2lzICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFMzI0IC0gSElWIHdhc3Rpbmcgc3luZHJvbWUKQGFjdGl2aXR5OiBISVYuRDE1IERldGVybWluZSBjbGluaWNhbCBzdGFnZSBvZiBISVYKQGRlc2NyaXB0aW9uOiBVbmV4cGxhaW5lZCBpbnZvbHVudGFyeSB3ZWlnaHQgbG9zcyAoPjEwJSBiYXNlbGluZSBib2R5IHdlaWdodCksIHdpdGggb2J2aW91cyB3YXN0aW5nIG9yIGJvZHkgbWFzcyBpbmRleCA8MTguNTsgUExVUyBFSVRIRVIgdW5leHBsYWluZWQgY2hyb25pYyByZXBvcnRlZCBmb3IgbG9uZ2VyIHRoYW4gb25lIG1vbnRoOyBPUiByZXBvcnRzIG9mIGZldmVyIG9yIG5pZ2h0IHN3ZWF0cyBmb3IgbW9yZSB0aGFuIG9uZSBtb250aCB3aXRob3V0IG90aGVyIGNhdXNlIGFuZCBsYWNrIG9mIHJlc3BvbnNlIHRvIGFudGliaW90aWNzIG9yIGFudGltYWxhcmlhbCBhZ2VudHM7IG1hbGFyaWEgbXVzdCBiZSBleGNsdWRlZCBpbiBtYWxhcmlvdXMgYXJlYXMuCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJISVYgd2FzdGluZyBzeW5kcm9tZSI6CiAgZXhpc3RzICJISVYgd2FzdGluZyBzeW5kcm9tZSBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIkhJViB3YXN0aW5nIHN5bmRyb21lIE9ic2VydmF0aW9uIgpkZWZpbmUgIkhJViB3YXN0aW5nIHN5bmRyb21lIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIkhJViB3YXN0aW5nIHN5bmRyb21lIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiSElWIHdhc3Rpbmcgc3luZHJvbWUgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJISVYgd2FzdGluZyBzeW5kcm9tZSBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIEhJViB3YXN0aW5nIHN5bmRyb21lICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFMzI1IC0gVW5leHBsYWluZWQgc2V2ZXJlIHdhc3Rpbmcgbm90IHJlc3BvbmRpbmcgdG8gc3RhbmRhcmQgdGhlcmFweQpAYWN0aXZpdHk6IEhJVi5EMTUgRGV0ZXJtaW5lIGNsaW5pY2FsIHN0YWdlIG9mIEhJVgpAZGVzY3JpcHRpb246IENsaWVudCBoYXMgdW5leHBsYWluZWQgc2V2ZXJlIHdhc3Rpbmcgbm90IHJlc3BvbmRpbmcgdG8gc3RhbmRhcmQgdGhlcmFweSAuIEZvciB1bmRlciA1IHllYXJzIG9sZCwgZGVmaW5lZCBhcyB3ZWlnaHQtZm9yLWhlaWdodCA8IC0zIHotc2NvcmUKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIlVuZXhwbGFpbmVkIHNldmVyZSB3YXN0aW5nIG5vdCByZXNwb25kaW5nIHRvIHN0YW5kYXJkIHRoZXJhcHkiOgogIGV4aXN0cyAiVW5leHBsYWluZWQgc2V2ZXJlIHdhc3Rpbmcgbm90IHJlc3BvbmRpbmcgdG8gc3RhbmRhcmQgdGhlcmFweSBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIlVuZXhwbGFpbmVkIHNldmVyZSB3YXN0aW5nIG5vdCByZXNwb25kaW5nIHRvIHN0YW5kYXJkIHRoZXJhcHkgT2JzZXJ2YXRpb24iCmRlZmluZSAiVW5leHBsYWluZWQgc2V2ZXJlIHdhc3Rpbmcgbm90IHJlc3BvbmRpbmcgdG8gc3RhbmRhcmQgdGhlcmFweSBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJVbmV4cGxhaW5lZCBzZXZlcmUgd2FzdGluZyBub3QgcmVzcG9uZGluZyB0byBzdGFuZGFyZCB0aGVyYXB5IENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiVW5leHBsYWluZWQgc2V2ZXJlIHdhc3Rpbmcgbm90IHJlc3BvbmRpbmcgdG8gc3RhbmRhcmQgdGhlcmFweSBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIlVuZXhwbGFpbmVkIHNldmVyZSB3YXN0aW5nIG5vdCByZXNwb25kaW5nIHRvIHN0YW5kYXJkIHRoZXJhcHkgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBVbmV4cGxhaW5lZCBzZXZlcmUgd2FzdGluZyBub3QgcmVzcG9uZGluZyB0byBzdGFuZGFyZCB0aGVyYXB5ICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFMzI2IC0gVW5leHBsYWluZWQgc3R1bnRpbmcgbm90IHJlc3BvbmRpbmcgdG8gc3RhbmRhcmQgdGhlcmFweQpAYWN0aXZpdHk6IEhJVi5EMTUgRGV0ZXJtaW5lIGNsaW5pY2FsIHN0YWdlIG9mIEhJVgpAZGVzY3JpcHRpb246IENsaWVudCBoYXMgdW5leHBsYWluZWQgc3R1bnRpbmcgbm90IHJlc3BvbmRpbmcgdG8gc3RhbmRhcmQgdGhlcmFweSAuIEZvciB1bmRlciA1IHllYXJzIG9sZCwgZGVmaW5lZCBhcyBsZW5ndGgtZm9yLSBhZ2UvaGVpZ2h0LWZvci1hZ2UgPCAtMiB6LXNjb3JlCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJVbmV4cGxhaW5lZCBzdHVudGluZyBub3QgcmVzcG9uZGluZyB0byBzdGFuZGFyZCB0aGVyYXB5IjoKICBleGlzdHMgIlVuZXhwbGFpbmVkIHN0dW50aW5nIG5vdCByZXNwb25kaW5nIHRvIHN0YW5kYXJkIHRoZXJhcHkgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJVbmV4cGxhaW5lZCBzdHVudGluZyBub3QgcmVzcG9uZGluZyB0byBzdGFuZGFyZCB0aGVyYXB5IE9ic2VydmF0aW9uIgpkZWZpbmUgIlVuZXhwbGFpbmVkIHN0dW50aW5nIG5vdCByZXNwb25kaW5nIHRvIHN0YW5kYXJkIHRoZXJhcHkgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iVW5leHBsYWluZWQgc3R1bnRpbmcgbm90IHJlc3BvbmRpbmcgdG8gc3RhbmRhcmQgdGhlcmFweSBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIlVuZXhwbGFpbmVkIHN0dW50aW5nIG5vdCByZXNwb25kaW5nIHRvIHN0YW5kYXJkIHRoZXJhcHkgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJVbmV4cGxhaW5lZCBzdHVudGluZyBub3QgcmVzcG9uZGluZyB0byBzdGFuZGFyZCB0aGVyYXB5IE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgVW5leHBsYWluZWQgc3R1bnRpbmcgbm90IHJlc3BvbmRpbmcgdG8gc3RhbmRhcmQgdGhlcmFweSAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTMyNyAtIFVuZXhwbGFpbmVkIHNldmVyZSBtYWxudXRyaXRpb24gbm90IHJlc3BvbmRpbmcgdG8gc3RhbmRhcmQgdGhlcmFweQpAYWN0aXZpdHk6IEhJVi5EMTUgRGV0ZXJtaW5lIGNsaW5pY2FsIHN0YWdlIG9mIEhJVgpAZGVzY3JpcHRpb246IENsaWVudCBoYXMgdW5leHBsYWluZWQgc2V2ZXJlIG1hbG51dHJpdGlvbiBub3QgcmVzcG9uZGluZyB0byBzdGFuZGFyZCB0aGVyYXB5IC4gRm9yIHVuZGVyIDUgeWVhcnMgb2xkLCB3ZWlnaHQgZm9yIGhlaWdodCA8IC0zIHotc2NvcmUgb3IgbWlkLXVwcGVyIGFybSBjaXJjdW1mZXJlbmNlIDwxMTUgbW0gb3IgdGhlIHByZXNlbmNlIG9mIG9lZGVtYQoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiVW5leHBsYWluZWQgc2V2ZXJlIG1hbG51dHJpdGlvbiBub3QgcmVzcG9uZGluZyB0byBzdGFuZGFyZCB0aGVyYXB5IjoKICBleGlzdHMgIlVuZXhwbGFpbmVkIHNldmVyZSBtYWxudXRyaXRpb24gbm90IHJlc3BvbmRpbmcgdG8gc3RhbmRhcmQgdGhlcmFweSBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIlVuZXhwbGFpbmVkIHNldmVyZSBtYWxudXRyaXRpb24gbm90IHJlc3BvbmRpbmcgdG8gc3RhbmRhcmQgdGhlcmFweSBPYnNlcnZhdGlvbiIKZGVmaW5lICJVbmV4cGxhaW5lZCBzZXZlcmUgbWFsbnV0cml0aW9uIG5vdCByZXNwb25kaW5nIHRvIHN0YW5kYXJkIHRoZXJhcHkgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iVW5leHBsYWluZWQgc2V2ZXJlIG1hbG51dHJpdGlvbiBub3QgcmVzcG9uZGluZyB0byBzdGFuZGFyZCB0aGVyYXB5IENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiVW5leHBsYWluZWQgc2V2ZXJlIG1hbG51dHJpdGlvbiBub3QgcmVzcG9uZGluZyB0byBzdGFuZGFyZCB0aGVyYXB5IE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iVW5leHBsYWluZWQgc2V2ZXJlIG1hbG51dHJpdGlvbiBub3QgcmVzcG9uZGluZyB0byBzdGFuZGFyZCB0aGVyYXB5IE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgVW5leHBsYWluZWQgc2V2ZXJlIG1hbG51dHJpdGlvbiBub3QgcmVzcG9uZGluZyB0byBzdGFuZGFyZCB0aGVyYXB5ICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFMzI4IC0gUG5ldW1vY3lzdGlzIGppcm92ZWNpaSBwbmV1bW9uaWEKQGFjdGl2aXR5OiBISVYuRDE1IERldGVybWluZSBjbGluaWNhbCBzdGFnZSBvZiBISVYKQGRlc2NyaXB0aW9uOiBDbGllbnQncyBzeW1wdG9tcyBpbmNsdWRlIHBuZXVtb2N5c3RpcyAoamlyb3ZlY2lpKSBwbmV1bW9uaWEKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIlBuZXVtb2N5c3RpcyBqaXJvdmVjaWkgcG5ldW1vbmlhIjoKICBleGlzdHMgIlBuZXVtb2N5c3RpcyBqaXJvdmVjaWkgcG5ldW1vbmlhIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiUG5ldW1vY3lzdGlzIGppcm92ZWNpaSBwbmV1bW9uaWEgT2JzZXJ2YXRpb24iCmRlZmluZSAiUG5ldW1vY3lzdGlzIGppcm92ZWNpaSBwbmV1bW9uaWEgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iUG5ldW1vY3lzdGlzIGppcm92ZWNpaSBwbmV1bW9uaWEgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJQbmV1bW9jeXN0aXMgamlyb3ZlY2lpIHBuZXVtb25pYSBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIlBuZXVtb2N5c3RpcyBqaXJvdmVjaWkgcG5ldW1vbmlhIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgUG5ldW1vY3lzdGlzIGppcm92ZWNpaSBwbmV1bW9uaWEgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREUzMjkgLSBSZWN1cnJlbnQgc2V2ZXJlIGJhY3RlcmlhbCBwbmV1bW9uaWEKQGFjdGl2aXR5OiBISVYuRDE1IERldGVybWluZSBjbGluaWNhbCBzdGFnZSBvZiBISVYKQGRlc2NyaXB0aW9uOiBDbGllbnQncyBzeW1wdG9tcyBpbmNsdWRlIHJlY3VycmVudCBzZXZlcmUgYmFjdGVyaWFsIHBuZXVtb25pYQoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiUmVjdXJyZW50IHNldmVyZSBiYWN0ZXJpYWwgcG5ldW1vbmlhIjoKICBleGlzdHMgIlJlY3VycmVudCBzZXZlcmUgYmFjdGVyaWFsIHBuZXVtb25pYSBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIlJlY3VycmVudCBzZXZlcmUgYmFjdGVyaWFsIHBuZXVtb25pYSBPYnNlcnZhdGlvbiIKZGVmaW5lICJSZWN1cnJlbnQgc2V2ZXJlIGJhY3RlcmlhbCBwbmV1bW9uaWEgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iUmVjdXJyZW50IHNldmVyZSBiYWN0ZXJpYWwgcG5ldW1vbmlhIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiUmVjdXJyZW50IHNldmVyZSBiYWN0ZXJpYWwgcG5ldW1vbmlhIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iUmVjdXJyZW50IHNldmVyZSBiYWN0ZXJpYWwgcG5ldW1vbmlhIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgUmVjdXJyZW50IHNldmVyZSBiYWN0ZXJpYWwgcG5ldW1vbmlhICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFMzMwIC0gUmVjdXJyZW50IHNldmVyZSBiYWN0ZXJpYWwgaW5mZWN0aW9ucyBzdWNoIGFzIGVtcHllbWEsIHB5b215b3NpdGlzLCBib25lIG9yIGpvaW50IGluZmVjdGlvbiwgbWVuaW5naXRpcywgYnV0IGV4Y2x1ZGluZyBwbmV1bW9uaWEKQGFjdGl2aXR5OiBISVYuRDE1IERldGVybWluZSBjbGluaWNhbCBzdGFnZSBvZiBISVYKQGRlc2NyaXB0aW9uOiBDbGllbnQncyBzeW1wdG9tcyBpbmNsdWRlIHJlY3VycmVudCBzZXZlcmUgYmFjdGVyaWFsIGluZmVjdGlvbnMgKHN1Y2ggYXMgZW1weWVtYSwgcHlvbXlvc2l0aXMsIGJvbmUgb3Igam9pbnQgaW5mZWN0aW9uLCBtZW5pbmdpdGlzLCBidXQgZXhjbHVkaW5nIHBuZXVtb25pYSkKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIlJlY3VycmVudCBzZXZlcmUgYmFjdGVyaWFsIGluZmVjdGlvbnMgc3VjaCBhcyBlbXB5ZW1hLCBweW9teW9zaXRpcywgYm9uZSBvciBqb2ludCBpbmZlY3Rpb24sIG1lbmluZ2l0aXMsIGJ1dCBleGNsdWRpbmcgcG5ldW1vbmlhIjoKICBleGlzdHMgIlJlY3VycmVudCBzZXZlcmUgYmFjdGVyaWFsIGluZmVjdGlvbnMgc3VjaCBhcyBlbXB5ZW1hLCBweW9teW9zaXRpcywgYm9uZSBvciBqb2ludCBpbmZlY3Rpb24sIG1lbmluZ2l0aXMsIGJ1dCBleGNsdWRpbmcgcG5ldW1vbmlhIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiUmVjdXJyZW50IHNldmVyZSBiYWN0ZXJpYWwgaW5mZWN0aW9ucyBzdWNoIGFzIGVtcHllbWEsIHB5b215b3NpdGlzLCBib25lIG9yIGpvaW50IGluZmVjdGlvbiwgbWVuaW5naXRpcywgYnV0IGV4Y2x1ZGluZyBwbmV1bW9uaWEgT2JzZXJ2YXRpb24iCmRlZmluZSAiUmVjdXJyZW50IHNldmVyZSBiYWN0ZXJpYWwgaW5mZWN0aW9ucyBzdWNoIGFzIGVtcHllbWEsIHB5b215b3NpdGlzLCBib25lIG9yIGpvaW50IGluZmVjdGlvbiwgbWVuaW5naXRpcywgYnV0IGV4Y2x1ZGluZyBwbmV1bW9uaWEgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iUmVjdXJyZW50IHNldmVyZSBiYWN0ZXJpYWwgaW5mZWN0aW9ucyBzdWNoIGFzIGVtcHllbWEsIHB5b215b3NpdGlzLCBib25lIG9yIGpvaW50IGluZmVjdGlvbiwgbWVuaW5naXRpcywgYnV0IGV4Y2x1ZGluZyBwbmV1bW9uaWEgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJSZWN1cnJlbnQgc2V2ZXJlIGJhY3RlcmlhbCBpbmZlY3Rpb25zIHN1Y2ggYXMgZW1weWVtYSwgcHlvbXlvc2l0aXMsIGJvbmUgb3Igam9pbnQgaW5mZWN0aW9uLCBtZW5pbmdpdGlzLCBidXQgZXhjbHVkaW5nIHBuZXVtb25pYSBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIlJlY3VycmVudCBzZXZlcmUgYmFjdGVyaWFsIGluZmVjdGlvbnMgc3VjaCBhcyBlbXB5ZW1hLCBweW9teW9zaXRpcywgYm9uZSBvciBqb2ludCBpbmZlY3Rpb24sIG1lbmluZ2l0aXMsIGJ1dCBleGNsdWRpbmcgcG5ldW1vbmlhIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgUmVjdXJyZW50IHNldmVyZSBiYWN0ZXJpYWwgaW5mZWN0aW9ucyBzdWNoIGFzIGVtcHllbWEsIHB5b215b3NpdGlzLCBib25lIG9yIGpvaW50IGluZmVjdGlvbiwgbWVuaW5naXRpcywgYnV0IGV4Y2x1ZGluZyBwbmV1bW9uaWEgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREUzMzEgLSBFbXB5ZW1hCkBhY3Rpdml0eTogSElWLkQxNSBEZXRlcm1pbmUgY2xpbmljYWwgc3RhZ2Ugb2YgSElWCkBkZXNjcmlwdGlvbjogQ2xpZW50J3Mgc3ltcHRvbXMgaW5jbHVkZSByZWN1cnJlbnQgZW1weWVtYQoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiRW1weWVtYSI6CiAgZXhpc3RzICJFbXB5ZW1hIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiRW1weWVtYSBPYnNlcnZhdGlvbiIKZGVmaW5lICJFbXB5ZW1hIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIkVtcHllbWEgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJFbXB5ZW1hIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iRW1weWVtYSBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIEVtcHllbWEgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREUzMzIgLSBQeW9teW9zaXRpcwpAYWN0aXZpdHk6IEhJVi5EMTUgRGV0ZXJtaW5lIGNsaW5pY2FsIHN0YWdlIG9mIEhJVgpAZGVzY3JpcHRpb246IENsaWVudCdzIHN5bXB0b21zIGluY2x1ZGUgcmVjdXJyZW50IHB5b215b3NpdGlzCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJQeW9teW9zaXRpcyI6CiAgZXhpc3RzICJQeW9teW9zaXRpcyBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIlB5b215b3NpdGlzIE9ic2VydmF0aW9uIgpkZWZpbmUgIlB5b215b3NpdGlzIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIlB5b215b3NpdGlzIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiUHlvbXlvc2l0aXMgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJQeW9teW9zaXRpcyBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIFB5b215b3NpdGlzICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFMzMzIC0gQm9uZSBvciBqb2ludCBpbmZlY3Rpb24KQGFjdGl2aXR5OiBISVYuRDE1IERldGVybWluZSBjbGluaWNhbCBzdGFnZSBvZiBISVYKQGRlc2NyaXB0aW9uOiBDbGllbnQncyBzeW1wdG9tcyBpbmNsdWRlIHJlY3VycmVudCBib25lIG9yIGpvaW50IGluZmVjdGlvbnMKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkJvbmUgb3Igam9pbnQgaW5mZWN0aW9uIjoKICBleGlzdHMgIkJvbmUgb3Igam9pbnQgaW5mZWN0aW9uIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiQm9uZSBvciBqb2ludCBpbmZlY3Rpb24gT2JzZXJ2YXRpb24iCmRlZmluZSAiQm9uZSBvciBqb2ludCBpbmZlY3Rpb24gQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iQm9uZSBvciBqb2ludCBpbmZlY3Rpb24gQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJCb25lIG9yIGpvaW50IGluZmVjdGlvbiBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkJvbmUgb3Igam9pbnQgaW5mZWN0aW9uIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgQm9uZSBvciBqb2ludCBpbmZlY3Rpb24gKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREUzMzQgLSBNZW5pbmdpdGlzCkBhY3Rpdml0eTogSElWLkQxNSBEZXRlcm1pbmUgY2xpbmljYWwgc3RhZ2Ugb2YgSElWCkBkZXNjcmlwdGlvbjogQ2xpZW50J3Mgc3ltcHRvbXMgaW5jbHVkZSByZWN1cnJlbnQgbWVuaW5naXRpcwoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiTWVuaW5naXRpcyI6CiAgZXhpc3RzICJNZW5pbmdpdGlzIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiTWVuaW5naXRpcyBPYnNlcnZhdGlvbiIKZGVmaW5lICJNZW5pbmdpdGlzIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIk1lbmluZ2l0aXMgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJNZW5pbmdpdGlzIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iTWVuaW5naXRpcyBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIE1lbmluZ2l0aXMgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREUzMzUgLSBDaHJvbmljIGhlcnBlcyBzaW1wbGV4IGluZmVjdGlvbiBvcm9sYWJpYWwgb3IgY3V0YW5lb3VzIG9mIG1vcmUgdGhhbiAxIG1vbnRoIGR1cmF0aW9uIG9yIHZpc2NlcmFsIGF0IGFueSBzaXRlCkBhY3Rpdml0eTogSElWLkQxNSBEZXRlcm1pbmUgY2xpbmljYWwgc3RhZ2Ugb2YgSElWCkBkZXNjcmlwdGlvbjogQ2xpZW50J3Mgc3ltcHRvbXMgaW5jbHVkZSBjaHJvbmljIGhlcnBlcyBzaW1wbGV4IGluZmVjdGlvbiAob3JvbGFiaWFsIG9yIGN1dGFuZW91cyBvZiBtb3JlIHRoYW4gMSBtb250aCBkdXJhdGlvbiBvciB2aXNjZXJhbCBhdCBhbnkgc2l0ZSkKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkNocm9uaWMgaGVycGVzIHNpbXBsZXggaW5mZWN0aW9uIG9yb2xhYmlhbCBvciBjdXRhbmVvdXMgb2YgbW9yZSB0aGFuIDEgbW9udGggZHVyYXRpb24gb3IgdmlzY2VyYWwgYXQgYW55IHNpdGUiOgogIGV4aXN0cyAiQ2hyb25pYyBoZXJwZXMgc2ltcGxleCBpbmZlY3Rpb24gb3JvbGFiaWFsIG9yIGN1dGFuZW91cyBvZiBtb3JlIHRoYW4gMSBtb250aCBkdXJhdGlvbiBvciB2aXNjZXJhbCBhdCBhbnkgc2l0ZSBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIkNocm9uaWMgaGVycGVzIHNpbXBsZXggaW5mZWN0aW9uIG9yb2xhYmlhbCBvciBjdXRhbmVvdXMgb2YgbW9yZSB0aGFuIDEgbW9udGggZHVyYXRpb24gb3IgdmlzY2VyYWwgYXQgYW55IHNpdGUgT2JzZXJ2YXRpb24iCmRlZmluZSAiQ2hyb25pYyBoZXJwZXMgc2ltcGxleCBpbmZlY3Rpb24gb3JvbGFiaWFsIG9yIGN1dGFuZW91cyBvZiBtb3JlIHRoYW4gMSBtb250aCBkdXJhdGlvbiBvciB2aXNjZXJhbCBhdCBhbnkgc2l0ZSBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJDaHJvbmljIGhlcnBlcyBzaW1wbGV4IGluZmVjdGlvbiBvcm9sYWJpYWwgb3IgY3V0YW5lb3VzIG9mIG1vcmUgdGhhbiAxIG1vbnRoIGR1cmF0aW9uIG9yIHZpc2NlcmFsIGF0IGFueSBzaXRlIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiQ2hyb25pYyBoZXJwZXMgc2ltcGxleCBpbmZlY3Rpb24gb3JvbGFiaWFsIG9yIGN1dGFuZW91cyBvZiBtb3JlIHRoYW4gMSBtb250aCBkdXJhdGlvbiBvciB2aXNjZXJhbCBhdCBhbnkgc2l0ZSBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkNocm9uaWMgaGVycGVzIHNpbXBsZXggaW5mZWN0aW9uIG9yb2xhYmlhbCBvciBjdXRhbmVvdXMgb2YgbW9yZSB0aGFuIDEgbW9udGggZHVyYXRpb24gb3IgdmlzY2VyYWwgYXQgYW55IHNpdGUgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBDaHJvbmljIGhlcnBlcyBzaW1wbGV4IGluZmVjdGlvbiBvcm9sYWJpYWwgb3IgY3V0YW5lb3VzIG9mIG1vcmUgdGhhbiAxIG1vbnRoIGR1cmF0aW9uIG9yIHZpc2NlcmFsIGF0IGFueSBzaXRlICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFMzM2IC0gQ2hyb25pYyBoZXJwZXMgc2ltcGxleCBpbmZlY3Rpb24gb3JvbGFiaWFsLCBnZW5pdGFsIG9yIGFub3JlY3RhbCBvZiBtb3JlIHRoYW4gMSBtb250aCBpbiBkdXJhdGlvbiBvciB2aXNjZXJhbCBhdCBhbnkgc2l0ZQpAYWN0aXZpdHk6IEhJVi5EMTUgRGV0ZXJtaW5lIGNsaW5pY2FsIHN0YWdlIG9mIEhJVgpAZGVzY3JpcHRpb246IENsaWVudCdzIHN5bXB0b21zIGluY2x1ZGUgY2hyb25pYyBoZXJwZXMgc2ltcGxleCBpbmZlY3Rpb24gKG9yb2xhYmlhbCwgZ2VuaXRhbCBvciBhbm9yZWN0YWwgb2YgbW9yZSB0aGFuIG9uZSBtb250aCBpbiBkdXJhdGlvbiBvciB2aXNjZXJhbCBhdCBhbnkgc2l0ZSkKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkNocm9uaWMgaGVycGVzIHNpbXBsZXggaW5mZWN0aW9uIG9yb2xhYmlhbCwgZ2VuaXRhbCBvciBhbm9yZWN0YWwgb2YgbW9yZSB0aGFuIDEgbW9udGggaW4gZHVyYXRpb24gb3IgdmlzY2VyYWwgYXQgYW55IHNpdGUiOgogIGV4aXN0cyAiQ2hyb25pYyBoZXJwZXMgc2ltcGxleCBpbmZlY3Rpb24gb3JvbGFiaWFsLCBnZW5pdGFsIG9yIGFub3JlY3RhbCBvZiBtb3JlIHRoYW4gMSBtb250aCBpbiBkdXJhdGlvbiBvciB2aXNjZXJhbCBhdCBhbnkgc2l0ZSBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIkNocm9uaWMgaGVycGVzIHNpbXBsZXggaW5mZWN0aW9uIG9yb2xhYmlhbCwgZ2VuaXRhbCBvciBhbm9yZWN0YWwgb2YgbW9yZSB0aGFuIDEgbW9udGggaW4gZHVyYXRpb24gb3IgdmlzY2VyYWwgYXQgYW55IHNpdGUgT2JzZXJ2YXRpb24iCmRlZmluZSAiQ2hyb25pYyBoZXJwZXMgc2ltcGxleCBpbmZlY3Rpb24gb3JvbGFiaWFsLCBnZW5pdGFsIG9yIGFub3JlY3RhbCBvZiBtb3JlIHRoYW4gMSBtb250aCBpbiBkdXJhdGlvbiBvciB2aXNjZXJhbCBhdCBhbnkgc2l0ZSBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJDaHJvbmljIGhlcnBlcyBzaW1wbGV4IGluZmVjdGlvbiBvcm9sYWJpYWwsIGdlbml0YWwgb3IgYW5vcmVjdGFsIG9mIG1vcmUgdGhhbiAxIG1vbnRoIGluIGR1cmF0aW9uIG9yIHZpc2NlcmFsIGF0IGFueSBzaXRlIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiQ2hyb25pYyBoZXJwZXMgc2ltcGxleCBpbmZlY3Rpb24gb3JvbGFiaWFsLCBnZW5pdGFsIG9yIGFub3JlY3RhbCBvZiBtb3JlIHRoYW4gMSBtb250aCBpbiBkdXJhdGlvbiBvciB2aXNjZXJhbCBhdCBhbnkgc2l0ZSBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkNocm9uaWMgaGVycGVzIHNpbXBsZXggaW5mZWN0aW9uIG9yb2xhYmlhbCwgZ2VuaXRhbCBvciBhbm9yZWN0YWwgb2YgbW9yZSB0aGFuIDEgbW9udGggaW4gZHVyYXRpb24gb3IgdmlzY2VyYWwgYXQgYW55IHNpdGUgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBDaHJvbmljIGhlcnBlcyBzaW1wbGV4IGluZmVjdGlvbiBvcm9sYWJpYWwsIGdlbml0YWwgb3IgYW5vcmVjdGFsIG9mIG1vcmUgdGhhbiAxIG1vbnRoIGluIGR1cmF0aW9uIG9yIHZpc2NlcmFsIGF0IGFueSBzaXRlICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFMzM3IC0gT2Vzb3BoYWdlYWwgY2FuZGlkaWFzaXMgb3IgY2FuZGlkaWFzaXMgb2YgdHJhY2hlYSwgYnJvbmNoaSBvciBsdW5ncwpAYWN0aXZpdHk6IEhJVi5EMTUgRGV0ZXJtaW5lIGNsaW5pY2FsIHN0YWdlIG9mIEhJVgpAZGVzY3JpcHRpb246IENsaWVudCdzIHN5bXB0b21zIGluY2x1ZGUgb2Vzb3BoYWdlYWwgY2FuZGlkaWFzaXMgKG9yIGNhbmRpZGlhc2lzIG9mIHRyYWNoZWEsIGJyb25jaGkgb3IgbHVuZ3MpCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJPZXNvcGhhZ2VhbCBjYW5kaWRpYXNpcyBvciBjYW5kaWRpYXNpcyBvZiB0cmFjaGVhLCBicm9uY2hpIG9yIGx1bmdzIjoKICBleGlzdHMgIk9lc29waGFnZWFsIGNhbmRpZGlhc2lzIG9yIGNhbmRpZGlhc2lzIG9mIHRyYWNoZWEsIGJyb25jaGkgb3IgbHVuZ3MgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJPZXNvcGhhZ2VhbCBjYW5kaWRpYXNpcyBvciBjYW5kaWRpYXNpcyBvZiB0cmFjaGVhLCBicm9uY2hpIG9yIGx1bmdzIE9ic2VydmF0aW9uIgpkZWZpbmUgIk9lc29waGFnZWFsIGNhbmRpZGlhc2lzIG9yIGNhbmRpZGlhc2lzIG9mIHRyYWNoZWEsIGJyb25jaGkgb3IgbHVuZ3MgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iT2Vzb3BoYWdlYWwgY2FuZGlkaWFzaXMgb3IgY2FuZGlkaWFzaXMgb2YgdHJhY2hlYSwgYnJvbmNoaSBvciBsdW5ncyBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIk9lc29waGFnZWFsIGNhbmRpZGlhc2lzIG9yIGNhbmRpZGlhc2lzIG9mIHRyYWNoZWEsIGJyb25jaGkgb3IgbHVuZ3MgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJPZXNvcGhhZ2VhbCBjYW5kaWRpYXNpcyBvciBjYW5kaWRpYXNpcyBvZiB0cmFjaGVhLCBicm9uY2hpIG9yIGx1bmdzIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgT2Vzb3BoYWdlYWwgY2FuZGlkaWFzaXMgb3IgY2FuZGlkaWFzaXMgb2YgdHJhY2hlYSwgYnJvbmNoaSBvciBsdW5ncyAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTMzOCAtIEV4dHJhcHVsbW9uYXJ5IFRCCkBhY3Rpdml0eTogSElWLkQxNSBEZXRlcm1pbmUgY2xpbmljYWwgc3RhZ2Ugb2YgSElWCkBkZXNjcmlwdGlvbjogQ2xpZW50J3Mgc3ltcHRvbXMgaW5jbHVkZSBleHRyYXB1bG1vbmFyeSB0dWJlcmN1bG9zaXMKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkV4dHJhcHVsbW9uYXJ5IFRCIEQuREUzMzgiOgogIGV4aXN0cyAiRXh0cmFwdWxtb25hcnkgVEIgRC5ERTMzOCBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIkV4dHJhcHVsbW9uYXJ5IFRCIEQuREUzMzggT2JzZXJ2YXRpb24iCmRlZmluZSAiRXh0cmFwdWxtb25hcnkgVEIgRC5ERTMzOCBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJFeHRyYXB1bG1vbmFyeSBUQiBELkRFMzM4IENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiRXh0cmFwdWxtb25hcnkgVEIgRC5ERTMzOCBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkV4dHJhcHVsbW9uYXJ5IFRCIEQuREUzMzggT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBFeHRyYXB1bG1vbmFyeSBUQiBELkRFMzM4ICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFMzM5IC0gS2Fwb3NpIHNhcmNvbWEKQGFjdGl2aXR5OiBISVYuRDE1IERldGVybWluZSBjbGluaWNhbCBzdGFnZSBvZiBISVYKQGRlc2NyaXB0aW9uOiBDbGllbnQncyBzeW1wdG9tcyBpbmNsdWRlIEthcG9zaSBzYXJjb21hCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJLYXBvc2kgc2FyY29tYSI6CiAgZXhpc3RzICJLYXBvc2kgc2FyY29tYSBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIkthcG9zaSBzYXJjb21hIE9ic2VydmF0aW9uIgpkZWZpbmUgIkthcG9zaSBzYXJjb21hIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIkthcG9zaSBzYXJjb21hIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiS2Fwb3NpIHNhcmNvbWEgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJLYXBvc2kgc2FyY29tYSBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIEthcG9zaSBzYXJjb21hICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFMzQwIC0gQ3l0b21lZ2Fsb3ZpcnVzIGluZmVjdGlvbiByZXRpbml0aXMgb3IgaW5mZWN0aW9uIG9mIG90aGVyIG9yZ2FucwpAYWN0aXZpdHk6IEhJVi5EMTUgRGV0ZXJtaW5lIGNsaW5pY2FsIHN0YWdlIG9mIEhJVgpAZGVzY3JpcHRpb246IENsaWVudCdzIHN5bXB0b21zIGluY2x1ZGUgY3l0b21lZ2Fsb3ZpcnVzIGluZmVjdGlvbiAocmV0aW5pdGlzIG9yIGluZmVjdGlvbiBvZiBvdGhlciBvcmdhbnMpCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJDeXRvbWVnYWxvdmlydXMgaW5mZWN0aW9uIHJldGluaXRpcyBvciBpbmZlY3Rpb24gb2Ygb3RoZXIgb3JnYW5zIjoKICBleGlzdHMgIkN5dG9tZWdhbG92aXJ1cyBpbmZlY3Rpb24gcmV0aW5pdGlzIG9yIGluZmVjdGlvbiBvZiBvdGhlciBvcmdhbnMgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJDeXRvbWVnYWxvdmlydXMgaW5mZWN0aW9uIHJldGluaXRpcyBvciBpbmZlY3Rpb24gb2Ygb3RoZXIgb3JnYW5zIE9ic2VydmF0aW9uIgpkZWZpbmUgIkN5dG9tZWdhbG92aXJ1cyBpbmZlY3Rpb24gcmV0aW5pdGlzIG9yIGluZmVjdGlvbiBvZiBvdGhlciBvcmdhbnMgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iQ3l0b21lZ2Fsb3ZpcnVzIGluZmVjdGlvbiByZXRpbml0aXMgb3IgaW5mZWN0aW9uIG9mIG90aGVyIG9yZ2FucyBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIkN5dG9tZWdhbG92aXJ1cyBpbmZlY3Rpb24gcmV0aW5pdGlzIG9yIGluZmVjdGlvbiBvZiBvdGhlciBvcmdhbnMgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJDeXRvbWVnYWxvdmlydXMgaW5mZWN0aW9uIHJldGluaXRpcyBvciBpbmZlY3Rpb24gb2Ygb3RoZXIgb3JnYW5zIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgQ3l0b21lZ2Fsb3ZpcnVzIGluZmVjdGlvbiByZXRpbml0aXMgb3IgaW5mZWN0aW9uIG9mIG90aGVyIG9yZ2FucyAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTM0MSAtIENlbnRyYWwgbmVydm91cyBzeXN0ZW0gdG94b3BsYXNtb3NpcwpAYWN0aXZpdHk6IEhJVi5EMTUgRGV0ZXJtaW5lIGNsaW5pY2FsIHN0YWdlIG9mIEhJVgpAZGVzY3JpcHRpb246IENsaWVudCdzIHN5bXB0b21zIGluY2x1ZGUgY2VudHJhbCBuZXJ2b3VzIHN5c3RlbSB0b3hvcGxhc21vc2lzCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJDZW50cmFsIG5lcnZvdXMgc3lzdGVtIHRveG9wbGFzbW9zaXMiOgogIGV4aXN0cyAiQ2VudHJhbCBuZXJ2b3VzIHN5c3RlbSB0b3hvcGxhc21vc2lzIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiQ2VudHJhbCBuZXJ2b3VzIHN5c3RlbSB0b3hvcGxhc21vc2lzIE9ic2VydmF0aW9uIgpkZWZpbmUgIkNlbnRyYWwgbmVydm91cyBzeXN0ZW0gdG94b3BsYXNtb3NpcyBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJDZW50cmFsIG5lcnZvdXMgc3lzdGVtIHRveG9wbGFzbW9zaXMgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJDZW50cmFsIG5lcnZvdXMgc3lzdGVtIHRveG9wbGFzbW9zaXMgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJDZW50cmFsIG5lcnZvdXMgc3lzdGVtIHRveG9wbGFzbW9zaXMgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBDZW50cmFsIG5lcnZvdXMgc3lzdGVtIHRveG9wbGFzbW9zaXMgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREUzNDIgLSBISVYgZW5jZXBoYWxvcGF0aHkKQGFjdGl2aXR5OiBISVYuRDE1IERldGVybWluZSBjbGluaWNhbCBzdGFnZSBvZiBISVYKQGRlc2NyaXB0aW9uOiBDbGllbnQncyBzeW1wdG9tcyBpbmNsdWRlIEhJViBlbmNlcGhhbG9wYXRoeQoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiSElWIGVuY2VwaGFsb3BhdGh5IjoKICBleGlzdHMgIkhJViBlbmNlcGhhbG9wYXRoeSBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIkhJViBlbmNlcGhhbG9wYXRoeSBPYnNlcnZhdGlvbiIKZGVmaW5lICJISVYgZW5jZXBoYWxvcGF0aHkgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iSElWIGVuY2VwaGFsb3BhdGh5IENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiSElWIGVuY2VwaGFsb3BhdGh5IE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iSElWIGVuY2VwaGFsb3BhdGh5IE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgSElWIGVuY2VwaGFsb3BhdGh5ICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFMzQzIC0gRXh0cmFwdWxtb25hcnkgY3J5cHRvY29jY29zaXMsIGluY2x1ZGluZyBtZW5pbmdpdGlzCkBhY3Rpdml0eTogSElWLkQxNSBEZXRlcm1pbmUgY2xpbmljYWwgc3RhZ2Ugb2YgSElWCkBkZXNjcmlwdGlvbjogQ2xpZW50J3Mgc3ltcHRvbXMgaW5jbHVkZSBleHRyYXB1bG1vbmFyeSBjcnlwdG9jb2Njb3NpcywgaW5jbHVkaW5nIG1lbmluZ2l0aXMKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkV4dHJhcHVsbW9uYXJ5IGNyeXB0b2NvY2Nvc2lzLCBpbmNsdWRpbmcgbWVuaW5naXRpcyI6CiAgZXhpc3RzICJFeHRyYXB1bG1vbmFyeSBjcnlwdG9jb2Njb3NpcywgaW5jbHVkaW5nIG1lbmluZ2l0aXMgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJFeHRyYXB1bG1vbmFyeSBjcnlwdG9jb2Njb3NpcywgaW5jbHVkaW5nIG1lbmluZ2l0aXMgT2JzZXJ2YXRpb24iCmRlZmluZSAiRXh0cmFwdWxtb25hcnkgY3J5cHRvY29jY29zaXMsIGluY2x1ZGluZyBtZW5pbmdpdGlzIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIkV4dHJhcHVsbW9uYXJ5IGNyeXB0b2NvY2Nvc2lzLCBpbmNsdWRpbmcgbWVuaW5naXRpcyBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIkV4dHJhcHVsbW9uYXJ5IGNyeXB0b2NvY2Nvc2lzLCBpbmNsdWRpbmcgbWVuaW5naXRpcyBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkV4dHJhcHVsbW9uYXJ5IGNyeXB0b2NvY2Nvc2lzLCBpbmNsdWRpbmcgbWVuaW5naXRpcyBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIEV4dHJhcHVsbW9uYXJ5IGNyeXB0b2NvY2Nvc2lzLCBpbmNsdWRpbmcgbWVuaW5naXRpcyAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTM0NCAtIERpc3NlbWluYXRlZCBub250dWJlcmN1bG91cyBteWNvYmFjdGVyaWFsIGluZmVjdGlvbgpAYWN0aXZpdHk6IEhJVi5EMTUgRGV0ZXJtaW5lIGNsaW5pY2FsIHN0YWdlIG9mIEhJVgpAZGVzY3JpcHRpb246IENsaWVudCdzIHN5bXB0b21zIGluY2x1ZGUgZGlzc2VtaW5hdGVkIG5vbnR1YmVyY3Vsb3VzIG15Y29iYWN0ZXJpYWwgaW5mZWN0aW9uCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJEaXNzZW1pbmF0ZWQgbm9udHViZXJjdWxvdXMgbXljb2JhY3RlcmlhbCBpbmZlY3Rpb24iOgogIGV4aXN0cyAiRGlzc2VtaW5hdGVkIG5vbnR1YmVyY3Vsb3VzIG15Y29iYWN0ZXJpYWwgaW5mZWN0aW9uIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiRGlzc2VtaW5hdGVkIG5vbnR1YmVyY3Vsb3VzIG15Y29iYWN0ZXJpYWwgaW5mZWN0aW9uIE9ic2VydmF0aW9uIgpkZWZpbmUgIkRpc3NlbWluYXRlZCBub250dWJlcmN1bG91cyBteWNvYmFjdGVyaWFsIGluZmVjdGlvbiBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJEaXNzZW1pbmF0ZWQgbm9udHViZXJjdWxvdXMgbXljb2JhY3RlcmlhbCBpbmZlY3Rpb24gQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJEaXNzZW1pbmF0ZWQgbm9udHViZXJjdWxvdXMgbXljb2JhY3RlcmlhbCBpbmZlY3Rpb24gT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJEaXNzZW1pbmF0ZWQgbm9udHViZXJjdWxvdXMgbXljb2JhY3RlcmlhbCBpbmZlY3Rpb24gT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBEaXNzZW1pbmF0ZWQgbm9udHViZXJjdWxvdXMgbXljb2JhY3RlcmlhbCBpbmZlY3Rpb24gKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREUzNDUgLSBQcm9ncmVzc2l2ZSBtdWx0aWZvY2FsIGxldWtvZW5jZXBoYWxvcGF0aHkKQGFjdGl2aXR5OiBISVYuRDE1IERldGVybWluZSBjbGluaWNhbCBzdGFnZSBvZiBISVYKQGRlc2NyaXB0aW9uOiBDbGllbnQncyBzeW1wdG9tcyBpbmNsdWRlIHByb2dyZXNzaXZlIG11bHRpZm9jYWwgbGV1a29lbmNlcGhhbG9wYXRoeQoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiUHJvZ3Jlc3NpdmUgbXVsdGlmb2NhbCBsZXVrb2VuY2VwaGFsb3BhdGh5IjoKICBleGlzdHMgIlByb2dyZXNzaXZlIG11bHRpZm9jYWwgbGV1a29lbmNlcGhhbG9wYXRoeSBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIlByb2dyZXNzaXZlIG11bHRpZm9jYWwgbGV1a29lbmNlcGhhbG9wYXRoeSBPYnNlcnZhdGlvbiIKZGVmaW5lICJQcm9ncmVzc2l2ZSBtdWx0aWZvY2FsIGxldWtvZW5jZXBoYWxvcGF0aHkgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iUHJvZ3Jlc3NpdmUgbXVsdGlmb2NhbCBsZXVrb2VuY2VwaGFsb3BhdGh5IENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiUHJvZ3Jlc3NpdmUgbXVsdGlmb2NhbCBsZXVrb2VuY2VwaGFsb3BhdGh5IE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iUHJvZ3Jlc3NpdmUgbXVsdGlmb2NhbCBsZXVrb2VuY2VwaGFsb3BhdGh5IE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgUHJvZ3Jlc3NpdmUgbXVsdGlmb2NhbCBsZXVrb2VuY2VwaGFsb3BhdGh5ICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFMzQ2IC0gQ2hyb25pYyBjcnlwdG9zcG9yaWRpb3NpcwpAYWN0aXZpdHk6IEhJVi5EMTUgRGV0ZXJtaW5lIGNsaW5pY2FsIHN0YWdlIG9mIEhJVgpAZGVzY3JpcHRpb246IENsaWVudCdzIHN5bXB0b21zIGluY2x1ZGUgY2hyb25pYyBjcnlwdG9zcG9yaWRpb3NpcwoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiQ2hyb25pYyBjcnlwdG9zcG9yaWRpb3NpcyI6CiAgZXhpc3RzICJDaHJvbmljIGNyeXB0b3Nwb3JpZGlvc2lzIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiQ2hyb25pYyBjcnlwdG9zcG9yaWRpb3NpcyBPYnNlcnZhdGlvbiIKZGVmaW5lICJDaHJvbmljIGNyeXB0b3Nwb3JpZGlvc2lzIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIkNocm9uaWMgY3J5cHRvc3BvcmlkaW9zaXMgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJDaHJvbmljIGNyeXB0b3Nwb3JpZGlvc2lzIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iQ2hyb25pYyBjcnlwdG9zcG9yaWRpb3NpcyBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIENocm9uaWMgY3J5cHRvc3BvcmlkaW9zaXMgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREUzNDcgLSBDaHJvbmljIGNyeXB0b3Nwb3JpZGlvc2lzIHdpdGggZGlhcnJob2VhCkBhY3Rpdml0eTogSElWLkQxNSBEZXRlcm1pbmUgY2xpbmljYWwgc3RhZ2Ugb2YgSElWCkBkZXNjcmlwdGlvbjogQ2xpZW50J3Mgc3ltcHRvbXMgaW5jbHVkZSBjaHJvbmljIGNyeXB0b3Nwb3JpZGlvc2lzICh3aXRoIGRpYXJyaG9lYSkKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkNocm9uaWMgY3J5cHRvc3BvcmlkaW9zaXMgd2l0aCBkaWFycmhvZWEiOgogIGV4aXN0cyAiQ2hyb25pYyBjcnlwdG9zcG9yaWRpb3NpcyB3aXRoIGRpYXJyaG9lYSBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIkNocm9uaWMgY3J5cHRvc3BvcmlkaW9zaXMgd2l0aCBkaWFycmhvZWEgT2JzZXJ2YXRpb24iCmRlZmluZSAiQ2hyb25pYyBjcnlwdG9zcG9yaWRpb3NpcyB3aXRoIGRpYXJyaG9lYSBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJDaHJvbmljIGNyeXB0b3Nwb3JpZGlvc2lzIHdpdGggZGlhcnJob2VhIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiQ2hyb25pYyBjcnlwdG9zcG9yaWRpb3NpcyB3aXRoIGRpYXJyaG9lYSBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkNocm9uaWMgY3J5cHRvc3BvcmlkaW9zaXMgd2l0aCBkaWFycmhvZWEgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBDaHJvbmljIGNyeXB0b3Nwb3JpZGlvc2lzIHdpdGggZGlhcnJob2VhICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFMzQ4IC0gQ2hyb25pYyBpc29zcG9yaWFzaXMKQGFjdGl2aXR5OiBISVYuRDE1IERldGVybWluZSBjbGluaWNhbCBzdGFnZSBvZiBISVYKQGRlc2NyaXB0aW9uOiBDbGllbnQncyBzeW1wdG9tcyBpbmNsdWRlIGNocm9uaWMgaXNvc3Bvcmlhc2lzCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJDaHJvbmljIGlzb3Nwb3JpYXNpcyI6CiAgZXhpc3RzICJDaHJvbmljIGlzb3Nwb3JpYXNpcyBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIkNocm9uaWMgaXNvc3Bvcmlhc2lzIE9ic2VydmF0aW9uIgpkZWZpbmUgIkNocm9uaWMgaXNvc3Bvcmlhc2lzIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIkNocm9uaWMgaXNvc3Bvcmlhc2lzIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiQ2hyb25pYyBpc29zcG9yaWFzaXMgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJDaHJvbmljIGlzb3Nwb3JpYXNpcyBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIENocm9uaWMgaXNvc3Bvcmlhc2lzICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFMzQ5IC0gRGlzc2VtaW5hdGVkIG15Y29zaXMgZXh0cmFwdWxtb25hcnkgaGlzdG9wbGFzbW9zaXMsIGNvY2NpZGlvaWRvbXljb3NpcwpAYWN0aXZpdHk6IEhJVi5EMTUgRGV0ZXJtaW5lIGNsaW5pY2FsIHN0YWdlIG9mIEhJVgpAZGVzY3JpcHRpb246IENsaWVudCdzIHN5bXB0b21zIGluY2x1ZGUgZGlzc2VtaW5hdGVkIG15Y29zaXMgKGV4dHJhcHVsbW9uYXJ5IGhpc3RvcGxhc21vc2lzLCBjb2NjaWRpb2lkb215Y29zaXMpCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJEaXNzZW1pbmF0ZWQgbXljb3NpcyBleHRyYXB1bG1vbmFyeSBoaXN0b3BsYXNtb3NpcywgY29jY2lkaW9pZG9teWNvc2lzIjoKICBleGlzdHMgIkRpc3NlbWluYXRlZCBteWNvc2lzIGV4dHJhcHVsbW9uYXJ5IGhpc3RvcGxhc21vc2lzLCBjb2NjaWRpb2lkb215Y29zaXMgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJEaXNzZW1pbmF0ZWQgbXljb3NpcyBleHRyYXB1bG1vbmFyeSBoaXN0b3BsYXNtb3NpcywgY29jY2lkaW9pZG9teWNvc2lzIE9ic2VydmF0aW9uIgpkZWZpbmUgIkRpc3NlbWluYXRlZCBteWNvc2lzIGV4dHJhcHVsbW9uYXJ5IGhpc3RvcGxhc21vc2lzLCBjb2NjaWRpb2lkb215Y29zaXMgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iRGlzc2VtaW5hdGVkIG15Y29zaXMgZXh0cmFwdWxtb25hcnkgaGlzdG9wbGFzbW9zaXMsIGNvY2NpZGlvaWRvbXljb3NpcyBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIkRpc3NlbWluYXRlZCBteWNvc2lzIGV4dHJhcHVsbW9uYXJ5IGhpc3RvcGxhc21vc2lzLCBjb2NjaWRpb2lkb215Y29zaXMgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJEaXNzZW1pbmF0ZWQgbXljb3NpcyBleHRyYXB1bG1vbmFyeSBoaXN0b3BsYXNtb3NpcywgY29jY2lkaW9pZG9teWNvc2lzIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgRGlzc2VtaW5hdGVkIG15Y29zaXMgZXh0cmFwdWxtb25hcnkgaGlzdG9wbGFzbW9zaXMsIGNvY2NpZGlvaWRvbXljb3NpcyAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTM1MCAtIERpc3NlbWluYXRlZCBlbmRlbWljIG15Y29zaXMgZXh0cmFwdWxtb25hcnkgaGlzdG9wbGFzbW9zaXMsIGNvY2NpZGlvaWRvbXljb3NpcywgcGVuaWNpbGxpb3NpcwpAYWN0aXZpdHk6IEhJVi5EMTUgRGV0ZXJtaW5lIGNsaW5pY2FsIHN0YWdlIG9mIEhJVgpAZGVzY3JpcHRpb246IENsaWVudCdzIHN5bXB0b21zIGluY2x1ZGUgZGlzc2VtaW5hdGVkIGVuZGVtaWMgbXljb3NpcyAoZXh0cmFwdWxtb25hcnkgaGlzdG9wbGFzbW9zaXMsIGNvY2NpZGlvaWRvbXljb3NpcywgcGVuaWNpbGxpb3NpcykKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkRpc3NlbWluYXRlZCBlbmRlbWljIG15Y29zaXMgZXh0cmFwdWxtb25hcnkgaGlzdG9wbGFzbW9zaXMsIGNvY2NpZGlvaWRvbXljb3NpcywgcGVuaWNpbGxpb3NpcyI6CiAgZXhpc3RzICJEaXNzZW1pbmF0ZWQgZW5kZW1pYyBteWNvc2lzIGV4dHJhcHVsbW9uYXJ5IGhpc3RvcGxhc21vc2lzLCBjb2NjaWRpb2lkb215Y29zaXMsIHBlbmljaWxsaW9zaXMgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJEaXNzZW1pbmF0ZWQgZW5kZW1pYyBteWNvc2lzIGV4dHJhcHVsbW9uYXJ5IGhpc3RvcGxhc21vc2lzLCBjb2NjaWRpb2lkb215Y29zaXMsIHBlbmljaWxsaW9zaXMgT2JzZXJ2YXRpb24iCmRlZmluZSAiRGlzc2VtaW5hdGVkIGVuZGVtaWMgbXljb3NpcyBleHRyYXB1bG1vbmFyeSBoaXN0b3BsYXNtb3NpcywgY29jY2lkaW9pZG9teWNvc2lzLCBwZW5pY2lsbGlvc2lzIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIkRpc3NlbWluYXRlZCBlbmRlbWljIG15Y29zaXMgZXh0cmFwdWxtb25hcnkgaGlzdG9wbGFzbW9zaXMsIGNvY2NpZGlvaWRvbXljb3NpcywgcGVuaWNpbGxpb3NpcyBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIkRpc3NlbWluYXRlZCBlbmRlbWljIG15Y29zaXMgZXh0cmFwdWxtb25hcnkgaGlzdG9wbGFzbW9zaXMsIGNvY2NpZGlvaWRvbXljb3NpcywgcGVuaWNpbGxpb3NpcyBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkRpc3NlbWluYXRlZCBlbmRlbWljIG15Y29zaXMgZXh0cmFwdWxtb25hcnkgaGlzdG9wbGFzbW9zaXMsIGNvY2NpZGlvaWRvbXljb3NpcywgcGVuaWNpbGxpb3NpcyBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIERpc3NlbWluYXRlZCBlbmRlbWljIG15Y29zaXMgZXh0cmFwdWxtb25hcnkgaGlzdG9wbGFzbW9zaXMsIGNvY2NpZGlvaWRvbXljb3NpcywgcGVuaWNpbGxpb3NpcyAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTM1MSAtIENlcmVicmFsIGx5bXBob21hCkBhY3Rpdml0eTogSElWLkQxNSBEZXRlcm1pbmUgY2xpbmljYWwgc3RhZ2Ugb2YgSElWCkBkZXNjcmlwdGlvbjogQ2xpZW50J3Mgc3ltcHRvbXMgaW5jbHVkZSBjZXJlYnJhbCBseW1waG9tYQoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiQ2VyZWJyYWwgbHltcGhvbWEiOgogIGV4aXN0cyAiQ2VyZWJyYWwgbHltcGhvbWEgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJDZXJlYnJhbCBseW1waG9tYSBPYnNlcnZhdGlvbiIKZGVmaW5lICJDZXJlYnJhbCBseW1waG9tYSBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJDZXJlYnJhbCBseW1waG9tYSBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIkNlcmVicmFsIGx5bXBob21hIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iQ2VyZWJyYWwgbHltcGhvbWEgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBDZXJlYnJhbCBseW1waG9tYSAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTM1MiAtIEItY2VsbCBub24tSG9kZ2tpbiBseW1waG9tYQpAYWN0aXZpdHk6IEhJVi5EMTUgRGV0ZXJtaW5lIGNsaW5pY2FsIHN0YWdlIG9mIEhJVgpAZGVzY3JpcHRpb246IENsaWVudCdzIHN5bXB0b21zIGluY2x1ZGUgYi1jZWxsIG5vbi1Ib2Rna2luIGx5bXBob21hCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJCLWNlbGwgbm9uLUhvZGdraW4gbHltcGhvbWEiOgogIGV4aXN0cyAiQi1jZWxsIG5vbi1Ib2Rna2luIGx5bXBob21hIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiQi1jZWxsIG5vbi1Ib2Rna2luIGx5bXBob21hIE9ic2VydmF0aW9uIgpkZWZpbmUgIkItY2VsbCBub24tSG9kZ2tpbiBseW1waG9tYSBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJCLWNlbGwgbm9uLUhvZGdraW4gbHltcGhvbWEgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJCLWNlbGwgbm9uLUhvZGdraW4gbHltcGhvbWEgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJCLWNlbGwgbm9uLUhvZGdraW4gbHltcGhvbWEgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBCLWNlbGwgbm9uLUhvZGdraW4gbHltcGhvbWEgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREUzNTMgLSBISVYtYXNzb2NpYXRlZCBuZXBocm9wYXRoeSBvciBjYXJkaW9teW9wYXRoeQpAYWN0aXZpdHk6IEhJVi5EMTUgRGV0ZXJtaW5lIGNsaW5pY2FsIHN0YWdlIG9mIEhJVgpAZGVzY3JpcHRpb246IENsaWVudCdzIHN5bXB0b21zIGluY2x1ZGUgSElWLSBhc3NvY2lhdGVkIG5lcGhyb3BhdGh5IG9yIGNhcmRpb215b3BhdGh5CiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJISVYtYXNzb2NpYXRlZCBuZXBocm9wYXRoeSBvciBjYXJkaW9teW9wYXRoeSI6CiAgZXhpc3RzICJISVYtYXNzb2NpYXRlZCBuZXBocm9wYXRoeSBvciBjYXJkaW9teW9wYXRoeSBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIkhJVi1hc3NvY2lhdGVkIG5lcGhyb3BhdGh5IG9yIGNhcmRpb215b3BhdGh5IE9ic2VydmF0aW9uIgpkZWZpbmUgIkhJVi1hc3NvY2lhdGVkIG5lcGhyb3BhdGh5IG9yIGNhcmRpb215b3BhdGh5IENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIkhJVi1hc3NvY2lhdGVkIG5lcGhyb3BhdGh5IG9yIGNhcmRpb215b3BhdGh5IENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiSElWLWFzc29jaWF0ZWQgbmVwaHJvcGF0aHkgb3IgY2FyZGlvbXlvcGF0aHkgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJISVYtYXNzb2NpYXRlZCBuZXBocm9wYXRoeSBvciBjYXJkaW9teW9wYXRoeSBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIEhJVi1hc3NvY2lhdGVkIG5lcGhyb3BhdGh5IG9yIGNhcmRpb215b3BhdGh5ICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFMzU0IC0gUmVjdXJyZW50IHNlcHRpY2FlbWlhIGluY2x1ZGluZyBub250eXBob2lkYWwgU2FsbW9uZWxsYQpAYWN0aXZpdHk6IEhJVi5EMTUgRGV0ZXJtaW5lIGNsaW5pY2FsIHN0YWdlIG9mIEhJVgpAZGVzY3JpcHRpb246IENsaWVudCdzIHN5bXB0b21zIGluY2x1ZGUgcmVjdXJyZW50IGJhY3RlcmFlbWlhIChzZXB0aWNhZW1pYSkgKGluY2x1ZGluZyBub250eXBob2lkYWwgc2FsbW9uZWxsYSkKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIlJlY3VycmVudCBzZXB0aWNhZW1pYSBpbmNsdWRpbmcgbm9udHlwaG9pZGFsIFNhbG1vbmVsbGEiOgogIGV4aXN0cyAiUmVjdXJyZW50IHNlcHRpY2FlbWlhIGluY2x1ZGluZyBub250eXBob2lkYWwgU2FsbW9uZWxsYSBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIlJlY3VycmVudCBzZXB0aWNhZW1pYSBpbmNsdWRpbmcgbm9udHlwaG9pZGFsIFNhbG1vbmVsbGEgT2JzZXJ2YXRpb24iCmRlZmluZSAiUmVjdXJyZW50IHNlcHRpY2FlbWlhIGluY2x1ZGluZyBub250eXBob2lkYWwgU2FsbW9uZWxsYSBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJSZWN1cnJlbnQgc2VwdGljYWVtaWEgaW5jbHVkaW5nIG5vbnR5cGhvaWRhbCBTYWxtb25lbGxhIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiUmVjdXJyZW50IHNlcHRpY2FlbWlhIGluY2x1ZGluZyBub250eXBob2lkYWwgU2FsbW9uZWxsYSBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIlJlY3VycmVudCBzZXB0aWNhZW1pYSBpbmNsdWRpbmcgbm9udHlwaG9pZGFsIFNhbG1vbmVsbGEgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBSZWN1cnJlbnQgc2VwdGljYWVtaWEgaW5jbHVkaW5nIG5vbnR5cGhvaWRhbCBTYWxtb25lbGxhICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFMzU1IC0gSW52YXNpdmUgY2VydmljYWwgY2FyY2lub21hCkBhY3Rpdml0eTogSElWLkQxNSBEZXRlcm1pbmUgY2xpbmljYWwgc3RhZ2Ugb2YgSElWCkBkZXNjcmlwdGlvbjogQ2xpZW50J3Mgc3ltcHRvbXMgaW5jbHVkZSBpbnZhc2l2ZSBjZXJ2aWNhbCBjYXJjaW5vbWEKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkludmFzaXZlIGNlcnZpY2FsIGNhcmNpbm9tYSI6CiAgZXhpc3RzICJJbnZhc2l2ZSBjZXJ2aWNhbCBjYXJjaW5vbWEgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJJbnZhc2l2ZSBjZXJ2aWNhbCBjYXJjaW5vbWEgT2JzZXJ2YXRpb24iCmRlZmluZSAiSW52YXNpdmUgY2VydmljYWwgY2FyY2lub21hIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIkludmFzaXZlIGNlcnZpY2FsIGNhcmNpbm9tYSBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIkludmFzaXZlIGNlcnZpY2FsIGNhcmNpbm9tYSBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkludmFzaXZlIGNlcnZpY2FsIGNhcmNpbm9tYSBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIEludmFzaXZlIGNlcnZpY2FsIGNhcmNpbm9tYSAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTM1NiAtIEF0eXBpY2FsIGRpc3NlbWluYXRlZCBsZWlzaG1hbmlhc2lzCkBhY3Rpdml0eTogSElWLkQxNSBEZXRlcm1pbmUgY2xpbmljYWwgc3RhZ2Ugb2YgSElWCkBkZXNjcmlwdGlvbjogQ2xpZW50J3Mgc3ltcHRvbXMgaW5jbHVkZSBhdHlwaWNhbCBkaXNzZW1pbmF0ZWQgbGVpc2htYW5pYXNpcwoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiQXR5cGljYWwgZGlzc2VtaW5hdGVkIGxlaXNobWFuaWFzaXMiOgogIGV4aXN0cyAiQXR5cGljYWwgZGlzc2VtaW5hdGVkIGxlaXNobWFuaWFzaXMgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJBdHlwaWNhbCBkaXNzZW1pbmF0ZWQgbGVpc2htYW5pYXNpcyBPYnNlcnZhdGlvbiIKZGVmaW5lICJBdHlwaWNhbCBkaXNzZW1pbmF0ZWQgbGVpc2htYW5pYXNpcyBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJBdHlwaWNhbCBkaXNzZW1pbmF0ZWQgbGVpc2htYW5pYXNpcyBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIkF0eXBpY2FsIGRpc3NlbWluYXRlZCBsZWlzaG1hbmlhc2lzIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iQXR5cGljYWwgZGlzc2VtaW5hdGVkIGxlaXNobWFuaWFzaXMgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBBdHlwaWNhbCBkaXNzZW1pbmF0ZWQgbGVpc2htYW5pYXNpcyAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTM1NyAtIE5ldXRyb3BlbmlhCkBhY3Rpdml0eTogSElWLkQxNSBEZXRlcm1pbmUgY2xpbmljYWwgc3RhZ2Ugb2YgSElWCkBkZXNjcmlwdGlvbjogQ2xpZW50J3Mgc3ltcHRvbXMgaW5jbHVkZSBuZXV0cm9wZW5pYSwgYW4gYWJub3JtYWxseSBsb3cgY291bnQgb2YgYSB0eXBlIG9mIHdoaXRlIGJsb29kIGNlbGwgKG5ldXRyb3BoaWxzKQoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiTmV1dHJvcGVuaWEiOgogIGV4aXN0cyAiTmV1dHJvcGVuaWEgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJOZXV0cm9wZW5pYSBPYnNlcnZhdGlvbiIKZGVmaW5lICJOZXV0cm9wZW5pYSBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJOZXV0cm9wZW5pYSBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIk5ldXRyb3BlbmlhIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iTmV1dHJvcGVuaWEgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBOZXV0cm9wZW5pYSAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTM2NCAtIENENCBjb3VudApAYWN0aXZpdHk6IEhJVi5EMjAgRGlhZ25vc3RpY3MKQGRlc2NyaXB0aW9uOiBDRDQgY2VsbCBjb3VudCBpbiBjZWxscy9tbV4zCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJDRDQgY291bnQgRC5ERTM2NCI6CiAgRWxlbWVudHMuIkNENCBjb3VudCBELkRFMzY0IiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIkNENCBjb3VudCBELkRFMzY0IFZhbHVlIjoKICAiQ0Q0IGNvdW50IEQuREUzNjQiIE8KICByZXR1cm4gTy52YWx1ZQovKiBFbmQgb2YgQ0Q0IGNvdW50IEQuREUzNjQgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREUzODcgLSBWaXJhbCBsb2FkIHRlc3QgcmVzdWx0CkBhY3Rpdml0eTogSElWLkQyMCBEaWFnbm9zdGljcwpAZGVzY3JpcHRpb246IFJlc3VsdCBmcm9tIHRoZSB2aXJhbCBsb2FkIHRlc3QgaW4gbnVtYmVyIG9mIGNvcGllcy9tTAoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiVmlyYWwgbG9hZCB0ZXN0IHJlc3VsdCBELkRFMzg3IjoKICBFbGVtZW50cy4iVmlyYWwgbG9hZCB0ZXN0IHJlc3VsdCBELkRFMzg3IiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIlZpcmFsIGxvYWQgdGVzdCByZXN1bHQgRC5ERTM4NyBWYWx1ZSI6CiAgIlZpcmFsIGxvYWQgdGVzdCByZXN1bHQgRC5ERTM4NyIgTwogIHJldHVybiBPLnZhbHVlCi8qIEVuZCBvZiBWaXJhbCBsb2FkIHRlc3QgcmVzdWx0IEQuREUzODcgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREUzOTEgLSBSZWFzb24gZm9yIEhJViB2aXJhbCBsb2FkIHRlc3QKQGFjdGl2aXR5OiBISVYuRDIwIERpYWdub3N0aWNzCkBkZXNjcmlwdGlvbjogV2hldGhlciB0aGUgdmlyYWwgbG9hZCBpcyBiZWluZyB0ZXN0ZWQgZm9yIHJvdXRpbmUgbW9uaXRvcmluZyBvbiBhIHNldCBzY2hlZHVsZSBvciBmb3IgdGFyZ2V0ZWQgbW9uaXRvcmluZyBmb3Igc3VzcGVjdGVkIHRyZWF0bWVudCBmYWlsdXJlCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJSZWFzb24gZm9yIEhJViB2aXJhbCBsb2FkIHRlc3QiOgogIGV4aXN0cyAiUmVhc29uIGZvciBISVYgdmlyYWwgbG9hZCB0ZXN0IE9ic2VydmF0aW9uIgpkZWZpbmUgIlJlYXNvbiBmb3IgSElWIHZpcmFsIGxvYWQgdGVzdCBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIlJlYXNvbiBmb3IgSElWIHZpcmFsIGxvYWQgdGVzdCBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIFJlYXNvbiBmb3IgSElWIHZpcmFsIGxvYWQgdGVzdCAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTM5MiAtIFJvdXRpbmUgdmlyYWwgbG9hZCB0ZXN0CkBhY3Rpdml0eTogSElWLkQyMCBEaWFnbm9zdGljcwpAZGVzY3JpcHRpb246IFJvdXRpbmUgcmVmZXJzIHRvIHZpcmFsIGxvYWQgdGVzdHMgb2J0YWluZWQgYXQgc3RhbmRhcmQgaW50ZXJ2YWxzIGZvbGxvd2luZyBBUlQgaW5pdGlhdGlvbiB0byBtb25pdG9yIHZpcmFsIGxvYWQgcmVzcG9uc2UgdG8gQVJUCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJSb3V0aW5lIHZpcmFsIGxvYWQgdGVzdCI6CiAgZXhpc3RzICJSb3V0aW5lIHZpcmFsIGxvYWQgdGVzdCBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIlJvdXRpbmUgdmlyYWwgbG9hZCB0ZXN0IE9ic2VydmF0aW9uIgpkZWZpbmUgIlJvdXRpbmUgdmlyYWwgbG9hZCB0ZXN0IENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIlJvdXRpbmUgdmlyYWwgbG9hZCB0ZXN0IENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiUm91dGluZSB2aXJhbCBsb2FkIHRlc3QgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJSb3V0aW5lIHZpcmFsIGxvYWQgdGVzdCBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIFJvdXRpbmUgdmlyYWwgbG9hZCB0ZXN0ICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFMzkzIC0gVGFyZ2V0ZWQgdmlyYWwgbG9hZCBtb25pdG9yaW5nCkBhY3Rpdml0eTogSElWLkQyMCBEaWFnbm9zdGljcwpAZGVzY3JpcHRpb246IFRhcmdldGVkIHJlZmVycyB0byB2aXJhbCBsb2FkIHRlc3RzIG9idGFpbmVkIGJhc2VkIG9uIGEgc3BlY2lmaWMgY2xpbmljYWwgaW5kaWNhdGlvbiAoc3VjaCBhcyBjb25jZXJuIGFib3V0IGRpc2Vhc2UgcHJvZ3Jlc3Npb24gb3IgZmFpbHVyZSB0byByZXNwb25kIHRvIEFSVCkKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIlRhcmdldGVkIHZpcmFsIGxvYWQgbW9uaXRvcmluZyI6CiAgZXhpc3RzICJUYXJnZXRlZCB2aXJhbCBsb2FkIG1vbml0b3JpbmcgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJUYXJnZXRlZCB2aXJhbCBsb2FkIG1vbml0b3JpbmcgT2JzZXJ2YXRpb24iCmRlZmluZSAiVGFyZ2V0ZWQgdmlyYWwgbG9hZCBtb25pdG9yaW5nIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIlRhcmdldGVkIHZpcmFsIGxvYWQgbW9uaXRvcmluZyBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIlRhcmdldGVkIHZpcmFsIGxvYWQgbW9uaXRvcmluZyBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIlRhcmdldGVkIHZpcmFsIGxvYWQgbW9uaXRvcmluZyBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIFRhcmdldGVkIHZpcmFsIGxvYWQgbW9uaXRvcmluZyAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTM5NCAtIEluaXRpYWwgdmlyYWwgbG9hZCB0ZXN0CkBhY3Rpdml0eTogSElWLkQyMCBEaWFnbm9zdGljcwpAZGVzY3JpcHRpb246IFRoZSBmaXJzdCB2aXJhbCBsb2FkIHRlc3Qgb2YgdGhlIGNsaWVudAoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiSW5pdGlhbCB2aXJhbCBsb2FkIHRlc3QiOgogIGV4aXN0cyAiSW5pdGlhbCB2aXJhbCBsb2FkIHRlc3QgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJJbml0aWFsIHZpcmFsIGxvYWQgdGVzdCBPYnNlcnZhdGlvbiIKZGVmaW5lICJJbml0aWFsIHZpcmFsIGxvYWQgdGVzdCBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJJbml0aWFsIHZpcmFsIGxvYWQgdGVzdCBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIkluaXRpYWwgdmlyYWwgbG9hZCB0ZXN0IE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iSW5pdGlhbCB2aXJhbCBsb2FkIHRlc3QgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBJbml0aWFsIHZpcmFsIGxvYWQgdGVzdCAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTM5NSAtIEZvbGxvdy11cCB2aXJhbCBsb2FkIHRlc3QgYWZ0ZXIgcmVjZWl2aW5nIGVuaGFuY2VkIGFkaGVyZW5jZSBjb3Vuc2VsbGluZwpAYWN0aXZpdHk6IEhJVi5EMjAgRGlhZ25vc3RpY3MKQGRlc2NyaXB0aW9uOiBBIGZvbGxvdy11cCB2aXJhbCBsb2FkIHRlc3Qgd2l0aGluIDMtNiBtb250aHMgYWZ0ZXIgZW5oYW5jZWQgYWRoZXJlbmNlIGNvdW5zZWxsaW5nIGFmdGVyIGNsaWVudCByZWNlaXZlZCBhIGhpZ2ggdmlyYWwgbG9hZCB0ZXN0IHJlc3VsdAoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiRm9sbG93LXVwIHZpcmFsIGxvYWQgdGVzdCBhZnRlciByZWNlaXZpbmcgZW5oYW5jZWQgYWRoZXJlbmNlIGNvdW5zZWxsaW5nIjoKICBleGlzdHMgIkZvbGxvdy11cCB2aXJhbCBsb2FkIHRlc3QgYWZ0ZXIgcmVjZWl2aW5nIGVuaGFuY2VkIGFkaGVyZW5jZSBjb3Vuc2VsbGluZyBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIkZvbGxvdy11cCB2aXJhbCBsb2FkIHRlc3QgYWZ0ZXIgcmVjZWl2aW5nIGVuaGFuY2VkIGFkaGVyZW5jZSBjb3Vuc2VsbGluZyBPYnNlcnZhdGlvbiIKZGVmaW5lICJGb2xsb3ctdXAgdmlyYWwgbG9hZCB0ZXN0IGFmdGVyIHJlY2VpdmluZyBlbmhhbmNlZCBhZGhlcmVuY2UgY291bnNlbGxpbmcgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iRm9sbG93LXVwIHZpcmFsIGxvYWQgdGVzdCBhZnRlciByZWNlaXZpbmcgZW5oYW5jZWQgYWRoZXJlbmNlIGNvdW5zZWxsaW5nIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiRm9sbG93LXVwIHZpcmFsIGxvYWQgdGVzdCBhZnRlciByZWNlaXZpbmcgZW5oYW5jZWQgYWRoZXJlbmNlIGNvdW5zZWxsaW5nIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iRm9sbG93LXVwIHZpcmFsIGxvYWQgdGVzdCBhZnRlciByZWNlaXZpbmcgZW5oYW5jZWQgYWRoZXJlbmNlIGNvdW5zZWxsaW5nIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgRm9sbG93LXVwIHZpcmFsIGxvYWQgdGVzdCBhZnRlciByZWNlaXZpbmcgZW5oYW5jZWQgYWRoZXJlbmNlIGNvdW5zZWxsaW5nICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFMzk5IC0gTW9uaXRvcmluZyBleGFtaW5hdGlvbnMKQGFjdGl2aXR5OiBISVYuRDIwIERpYWdub3N0aWNzCkBkZXNjcmlwdGlvbjogTmFtZSBvZiBleGFtaW5hdGlvbnMsIHRlc3QgYW5kIHJlc3VsdHMgZm9yIGFueSByZWxldmFudCBpbnZlc3RpZ2F0aW9ucyBjYXJyaWVkIG91dCBmb3IgY2xpZW50CiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJNb25pdG9yaW5nIGV4YW1pbmF0aW9ucyI6CiAgZXhpc3RzICJNb25pdG9yaW5nIGV4YW1pbmF0aW9ucyBPYnNlcnZhdGlvbiIKZGVmaW5lICJNb25pdG9yaW5nIGV4YW1pbmF0aW9ucyBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIk1vbml0b3JpbmcgZXhhbWluYXRpb25zIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgTW9uaXRvcmluZyBleGFtaW5hdGlvbnMgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREU0MDAgLSBIYWVtb2dsb2JpbiBIYgpAYWN0aXZpdHk6IEhJVi5EMjAgRGlhZ25vc3RpY3MKQGRlc2NyaXB0aW9uOiBQcm92aWRlciBvcmRlcmVkIGEgSGFlbW9nbG9iaW4gKEhiKSB0ZXN0LCBudW1iZXIgaW4gZy9kTCB0ZXN0CiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJIYWVtb2dsb2JpbiBIYiI6CiAgZXhpc3RzICJIYWVtb2dsb2JpbiBIYiBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIkhhZW1vZ2xvYmluIEhiIE9ic2VydmF0aW9uIgpkZWZpbmUgIkhhZW1vZ2xvYmluIEhiIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIkhhZW1vZ2xvYmluIEhiIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiSGFlbW9nbG9iaW4gSGIgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJIYWVtb2dsb2JpbiBIYiBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIEhhZW1vZ2xvYmluIEhiICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFNDAxIC0gUHJlZ25hbmN5IHRlc3QKQGFjdGl2aXR5OiBISVYuRDIwIERpYWdub3N0aWNzCkBkZXNjcmlwdGlvbjogUHJvdmlkZXIgb3JkZXJlZCBhIHByZWduYW5jeSB0ZXN0IGZvciBjbGllbnQKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIlByZWduYW5jeSB0ZXN0IjoKICBleGlzdHMgIlByZWduYW5jeSB0ZXN0IENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiUHJlZ25hbmN5IHRlc3QgT2JzZXJ2YXRpb24iCmRlZmluZSAiUHJlZ25hbmN5IHRlc3QgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iUHJlZ25hbmN5IHRlc3QgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJQcmVnbmFuY3kgdGVzdCBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIlByZWduYW5jeSB0ZXN0IE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgUHJlZ25hbmN5IHRlc3QgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREU0MDIgLSBTeXBoaWxpcyB0ZXN0CkBhY3Rpdml0eTogSElWLkQyMCBEaWFnbm9zdGljcwpAZGVzY3JpcHRpb246IFByb3ZpZGVyIG9yZGVyZWQgYSBzeXBoaWxpcyB0ZXN0CiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJTeXBoaWxpcyB0ZXN0IjoKICBleGlzdHMgIlN5cGhpbGlzIHRlc3QgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJTeXBoaWxpcyB0ZXN0IE9ic2VydmF0aW9uIgpkZWZpbmUgIlN5cGhpbGlzIHRlc3QgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iU3lwaGlsaXMgdGVzdCBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIlN5cGhpbGlzIHRlc3QgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJTeXBoaWxpcyB0ZXN0IE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgU3lwaGlsaXMgdGVzdCAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTQwMyAtIENoZXN0IFgtcmF5IENYUgpAYWN0aXZpdHk6IEhJVi5EMjAgRGlhZ25vc3RpY3MKQGRlc2NyaXB0aW9uOiBQcm92aWRlciBvcmRlcmVkIGEgY2hlc3QgWC1yYXkgKENYUikKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkNoZXN0IFgtcmF5IENYUiI6CiAgZXhpc3RzICJDaGVzdCBYLXJheSBDWFIgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJDaGVzdCBYLXJheSBDWFIgT2JzZXJ2YXRpb24iCmRlZmluZSAiQ2hlc3QgWC1yYXkgQ1hSIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIkNoZXN0IFgtcmF5IENYUiBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIkNoZXN0IFgtcmF5IENYUiBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkNoZXN0IFgtcmF5IENYUiBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIENoZXN0IFgtcmF5IENYUiAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTQwNCAtIFNwdXR1bSBvciBjdWx0dXJlIGZvciBUQgpAYWN0aXZpdHk6IEhJVi5EMjAgRGlhZ25vc3RpY3MKQGRlc2NyaXB0aW9uOiBQcm92aWRlciBvcmRlcmVkIHNwdXR1bSBvciBjdWx0dXJlIGZvciBUQgoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiU3B1dHVtIG9yIGN1bHR1cmUgZm9yIFRCIjoKICBleGlzdHMgIlNwdXR1bSBvciBjdWx0dXJlIGZvciBUQiBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIlNwdXR1bSBvciBjdWx0dXJlIGZvciBUQiBPYnNlcnZhdGlvbiIKZGVmaW5lICJTcHV0dW0gb3IgY3VsdHVyZSBmb3IgVEIgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iU3B1dHVtIG9yIGN1bHR1cmUgZm9yIFRCIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiU3B1dHVtIG9yIGN1bHR1cmUgZm9yIFRCIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iU3B1dHVtIG9yIGN1bHR1cmUgZm9yIFRCIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgU3B1dHVtIG9yIGN1bHR1cmUgZm9yIFRCICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFNDA1IC0gSEJzQWcgdGVzdCBIQlYKQGFjdGl2aXR5OiBISVYuRDIwIERpYWdub3N0aWNzCkBkZXNjcmlwdGlvbjogUHJvdmlkZXIgb3JkZXJlZCBhbiBIQnNBZyB0ZXN0IChIQlYpIHRlc3QKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkhCc0FnIHRlc3QgSEJWIjoKICBleGlzdHMgIkhCc0FnIHRlc3QgSEJWIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiSEJzQWcgdGVzdCBIQlYgT2JzZXJ2YXRpb24iCmRlZmluZSAiSEJzQWcgdGVzdCBIQlYgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iSEJzQWcgdGVzdCBIQlYgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJIQnNBZyB0ZXN0IEhCViBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkhCc0FnIHRlc3QgSEJWIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgSEJzQWcgdGVzdCBIQlYgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREU0MDYgLSBISVYgdmlyYWwgbG9hZCB0ZXN0IG9yZGVyZWQKQGFjdGl2aXR5OiBISVYuRDIwIERpYWdub3N0aWNzCkBkZXNjcmlwdGlvbjogUHJvdmlkZXIgb3JkZXJlZCBhbiBISVYgdmlyYWwgbG9hZCB0ZXN0CiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJISVYgdmlyYWwgbG9hZCB0ZXN0IG9yZGVyZWQiOgogIGV4aXN0cyAiSElWIHZpcmFsIGxvYWQgdGVzdCBvcmRlcmVkIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiSElWIHZpcmFsIGxvYWQgdGVzdCBvcmRlcmVkIE9ic2VydmF0aW9uIgpkZWZpbmUgIkhJViB2aXJhbCBsb2FkIHRlc3Qgb3JkZXJlZCBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJISVYgdmlyYWwgbG9hZCB0ZXN0IG9yZGVyZWQgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJISVYgdmlyYWwgbG9hZCB0ZXN0IG9yZGVyZWQgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJISVYgdmlyYWwgbG9hZCB0ZXN0IG9yZGVyZWQgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBISVYgdmlyYWwgbG9hZCB0ZXN0IG9yZGVyZWQgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREU0MDcgLSBISVYgdmlyYWwgbG9hZCB0ZXN0IHNjaGVkdWxlZApAYWN0aXZpdHk6IEhJVi5EMjAgRGlhZ25vc3RpY3MKQGRlc2NyaXB0aW9uOiBTY2hlZHVsZWQgYW4gSElWIHZpcmFsIGxvYWQgdGVzdCB3aXRoIGNsaWVudAoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiSElWIHZpcmFsIGxvYWQgdGVzdCBzY2hlZHVsZWQiOgogIGV4aXN0cyAiSElWIHZpcmFsIGxvYWQgdGVzdCBzY2hlZHVsZWQgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJISVYgdmlyYWwgbG9hZCB0ZXN0IHNjaGVkdWxlZCBPYnNlcnZhdGlvbiIKZGVmaW5lICJISVYgdmlyYWwgbG9hZCB0ZXN0IHNjaGVkdWxlZCBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJISVYgdmlyYWwgbG9hZCB0ZXN0IHNjaGVkdWxlZCBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIkhJViB2aXJhbCBsb2FkIHRlc3Qgc2NoZWR1bGVkIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iSElWIHZpcmFsIGxvYWQgdGVzdCBzY2hlZHVsZWQgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBISVYgdmlyYWwgbG9hZCB0ZXN0IHNjaGVkdWxlZCAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTQwOCAtIENENCBjb3VudCBvcmRlcmVkCkBhY3Rpdml0eTogSElWLkQyMCBEaWFnbm9zdGljcwpAZGVzY3JpcHRpb246IFByb3ZpZGVyIG9yZGVyZWQgYSBDRDQgY2VsbCBjb3VudAoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiQ0Q0IGNvdW50IG9yZGVyZWQiOgogIGV4aXN0cyAiQ0Q0IGNvdW50IG9yZGVyZWQgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJDRDQgY291bnQgb3JkZXJlZCBPYnNlcnZhdGlvbiIKZGVmaW5lICJDRDQgY291bnQgb3JkZXJlZCBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJDRDQgY291bnQgb3JkZXJlZCBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIkNENCBjb3VudCBvcmRlcmVkIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iQ0Q0IGNvdW50IG9yZGVyZWQgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBDRDQgY291bnQgb3JkZXJlZCAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTQwOSAtIENENCBjb3VudCB0ZXN0IHNjaGVkdWxlZApAYWN0aXZpdHk6IEhJVi5EMjAgRGlhZ25vc3RpY3MKQGRlc2NyaXB0aW9uOiBTY2hlZHVsZWQgYSBDRDQgdGVzdCB3aXRoIGNsaWVudAoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiQ0Q0IGNvdW50IHRlc3Qgc2NoZWR1bGVkIjoKICBleGlzdHMgIkNENCBjb3VudCB0ZXN0IHNjaGVkdWxlZCBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIkNENCBjb3VudCB0ZXN0IHNjaGVkdWxlZCBPYnNlcnZhdGlvbiIKZGVmaW5lICJDRDQgY291bnQgdGVzdCBzY2hlZHVsZWQgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iQ0Q0IGNvdW50IHRlc3Qgc2NoZWR1bGVkIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiQ0Q0IGNvdW50IHRlc3Qgc2NoZWR1bGVkIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iQ0Q0IGNvdW50IHRlc3Qgc2NoZWR1bGVkIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgQ0Q0IGNvdW50IHRlc3Qgc2NoZWR1bGVkICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFNDEwIC0gQ3J5cHRvY29jY2FsIGFudGlnZW4gdGVzdApAYWN0aXZpdHk6IEhJVi5EMjAgRGlhZ25vc3RpY3MKQGRlc2NyaXB0aW9uOiBQcm92aWRlciBvcmRlcmVkIGEgY3J5cHRvY29jY2FsIGFudGlnZW4gdGVzdAoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiQ3J5cHRvY29jY2FsIGFudGlnZW4gdGVzdCI6CiAgZXhpc3RzICJDcnlwdG9jb2NjYWwgYW50aWdlbiB0ZXN0IENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiQ3J5cHRvY29jY2FsIGFudGlnZW4gdGVzdCBPYnNlcnZhdGlvbiIKZGVmaW5lICJDcnlwdG9jb2NjYWwgYW50aWdlbiB0ZXN0IENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIkNyeXB0b2NvY2NhbCBhbnRpZ2VuIHRlc3QgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJDcnlwdG9jb2NjYWwgYW50aWdlbiB0ZXN0IE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iQ3J5cHRvY29jY2FsIGFudGlnZW4gdGVzdCBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIENyeXB0b2NvY2NhbCBhbnRpZ2VuIHRlc3QgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREU0MTEgLSBIaXN0b3BsYXNtb3NpcyBhbnRpZ2VuIHRlc3QKQGFjdGl2aXR5OiBISVYuRDIwIERpYWdub3N0aWNzCkBkZXNjcmlwdGlvbjogUHJvdmlkZXIgb3JkZXJlZCBhIGhpc3RvcGxhc21vc2lzIGFudGlnZW4gdGVzdAoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiSGlzdG9wbGFzbW9zaXMgYW50aWdlbiB0ZXN0IjoKICBleGlzdHMgIkhpc3RvcGxhc21vc2lzIGFudGlnZW4gdGVzdCBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIkhpc3RvcGxhc21vc2lzIGFudGlnZW4gdGVzdCBPYnNlcnZhdGlvbiIKZGVmaW5lICJIaXN0b3BsYXNtb3NpcyBhbnRpZ2VuIHRlc3QgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iSGlzdG9wbGFzbW9zaXMgYW50aWdlbiB0ZXN0IENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiSGlzdG9wbGFzbW9zaXMgYW50aWdlbiB0ZXN0IE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iSGlzdG9wbGFzbW9zaXMgYW50aWdlbiB0ZXN0IE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgSGlzdG9wbGFzbW9zaXMgYW50aWdlbiB0ZXN0ICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFNDEyIC0gQ2VydmljYWwgY2FuY2VyIHNjcmVlbmluZyBzY2hlZHVsZWQKQGFjdGl2aXR5OiBISVYuRDI4IE9mZmVyIG90aGVyIHNlcnZpY2VzCkBkZXNjcmlwdGlvbjogU2NoZWR1bGVkIGNlcnZpY2FsIGNhbmNlciBzY3JlZW5pbmcgd2l0aCBjbGllbnQKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkNlcnZpY2FsIGNhbmNlciBzY3JlZW5pbmcgc2NoZWR1bGVkIjoKICBleGlzdHMgIkNlcnZpY2FsIGNhbmNlciBzY3JlZW5pbmcgc2NoZWR1bGVkIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiQ2VydmljYWwgY2FuY2VyIHNjcmVlbmluZyBzY2hlZHVsZWQgT2JzZXJ2YXRpb24iCmRlZmluZSAiQ2VydmljYWwgY2FuY2VyIHNjcmVlbmluZyBzY2hlZHVsZWQgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iQ2VydmljYWwgY2FuY2VyIHNjcmVlbmluZyBzY2hlZHVsZWQgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJDZXJ2aWNhbCBjYW5jZXIgc2NyZWVuaW5nIHNjaGVkdWxlZCBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkNlcnZpY2FsIGNhbmNlciBzY3JlZW5pbmcgc2NoZWR1bGVkIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgQ2VydmljYWwgY2FuY2VyIHNjcmVlbmluZyBzY2hlZHVsZWQgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREU0MTMgLSBEYXRlIG9mIHNjaGVkdWxlZCBtb25pdG9yaW5nIGV4YW1pbmF0aW9uCkBhY3Rpdml0eTogSElWLkQyOCBPZmZlciBvdGhlciBzZXJ2aWNlcwpAZGVzY3JpcHRpb246IERhdGUgb2Ygc2NoZWR1bGVkIG1vbml0b3JpbmcgZXhhbWluYXRpb24KKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkRhdGUgb2Ygc2NoZWR1bGVkIG1vbml0b3JpbmcgZXhhbWluYXRpb24iOgogIEVsZW1lbnRzLiJEYXRlIG9mIHNjaGVkdWxlZCBtb25pdG9yaW5nIGV4YW1pbmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIkRhdGUgb2Ygc2NoZWR1bGVkIG1vbml0b3JpbmcgZXhhbWluYXRpb24gVmFsdWUiOgogICJEYXRlIG9mIHNjaGVkdWxlZCBtb25pdG9yaW5nIGV4YW1pbmF0aW9uIiBPCiAgcmV0dXJuIE8udmFsdWUKLyogRW5kIG9mIERhdGUgb2Ygc2NoZWR1bGVkIG1vbml0b3JpbmcgZXhhbWluYXRpb24gKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREU0MjcgLSBTd2l0Y2ggdG8gc2Vjb25kLWxpbmUgQVJUIHJlZ2ltZW4gcmVjb21tZW5kZWQKQGFjdGl2aXR5OiBISVYuRDIxIERldGVybWluZSByZWdpbWVuIGFuZCB0cmVhdG1lbnQgb3B0aW9ucwpAZGVzY3JpcHRpb246IEEgc3dpdGNoIHRvIHNlY29uZC1saW5lIEFSVCByZWdpbWVuIGlzIHJlY29tbWVuZGVkCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJTd2l0Y2ggdG8gc2Vjb25kLWxpbmUgQVJUIHJlZ2ltZW4gcmVjb21tZW5kZWQiOgogIGV4aXN0cyAiU3dpdGNoIHRvIHNlY29uZC1saW5lIEFSVCByZWdpbWVuIHJlY29tbWVuZGVkIE9ic2VydmF0aW9uIgpkZWZpbmUgIlN3aXRjaCB0byBzZWNvbmQtbGluZSBBUlQgcmVnaW1lbiByZWNvbW1lbmRlZCBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIlN3aXRjaCB0byBzZWNvbmQtbGluZSBBUlQgcmVnaW1lbiByZWNvbW1lbmRlZCBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIFN3aXRjaCB0byBzZWNvbmQtbGluZSBBUlQgcmVnaW1lbiByZWNvbW1lbmRlZCAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTQzNiAtIFJlZ2ltZW4gc3Vic3RpdHV0aW9uIHJlY29tbWVuZGVkCkBhY3Rpdml0eTogSElWLkQyMyBQcmVzY3JpYmUKQGRlc2NyaXB0aW9uOiBBIGRydWcgc3Vic3RpdHV0aW9uIGlzIHJlY29tbWVuZGVkCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJSZWdpbWVuIHN1YnN0aXR1dGlvbiByZWNvbW1lbmRlZCI6CiAgZXhpc3RzICJSZWdpbWVuIHN1YnN0aXR1dGlvbiByZWNvbW1lbmRlZCBPYnNlcnZhdGlvbiIKZGVmaW5lICJSZWdpbWVuIHN1YnN0aXR1dGlvbiByZWNvbW1lbmRlZCBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIlJlZ2ltZW4gc3Vic3RpdHV0aW9uIHJlY29tbWVuZGVkIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgUmVnaW1lbiBzdWJzdGl0dXRpb24gcmVjb21tZW5kZWQgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREU0MzcgLSBEb3NlIGFkanVzdG1lbnQgcmVjb21tZW5kZWQKQGFjdGl2aXR5OiBISVYuRDIzIFByZXNjcmliZQpAZGVzY3JpcHRpb246IEEgZG9zYWdlIGNoYW5nZSBpcyByZWNvbW1lbmRlZAoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiRG9zZSBhZGp1c3RtZW50IHJlY29tbWVuZGVkIjoKICBleGlzdHMgIkRvc2UgYWRqdXN0bWVudCByZWNvbW1lbmRlZCBPYnNlcnZhdGlvbiIKZGVmaW5lICJEb3NlIGFkanVzdG1lbnQgcmVjb21tZW5kZWQgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJEb3NlIGFkanVzdG1lbnQgcmVjb21tZW5kZWQgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBEb3NlIGFkanVzdG1lbnQgcmVjb21tZW5kZWQgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREU0NDMgLSBTdXNwaWNpb24gb2YgdHJlYXRtZW50IGZhaWx1cmUgb3IgaW50ZXJydXB0aW9uCkBhY3Rpdml0eTogSElWLkQyMyBQcmVzY3JpYmUKQGRlc2NyaXB0aW9uOiBDbGllbnQgaGFzIGJlZW4gb24gQVJULCBidXQgaGFzIHN0b3BwZWQgdGFraW5nIGl0IG9yIGEgdHJlYXRtZW50IGZhaWx1cmUgaXMgc3VzcGVjdGVkCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJTdXNwaWNpb24gb2YgdHJlYXRtZW50IGZhaWx1cmUgb3IgaW50ZXJydXB0aW9uIjoKICBleGlzdHMgIlN1c3BpY2lvbiBvZiB0cmVhdG1lbnQgZmFpbHVyZSBvciBpbnRlcnJ1cHRpb24gT2JzZXJ2YXRpb24iCmRlZmluZSAiU3VzcGljaW9uIG9mIHRyZWF0bWVudCBmYWlsdXJlIG9yIGludGVycnVwdGlvbiBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIlN1c3BpY2lvbiBvZiB0cmVhdG1lbnQgZmFpbHVyZSBvciBpbnRlcnJ1cHRpb24gT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBTdXNwaWNpb24gb2YgdHJlYXRtZW50IGZhaWx1cmUgb3IgaW50ZXJydXB0aW9uICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFNDY1IC0gQWRoZXJlbmNlIGNvdW5zZWxsaW5nIHByb3ZpZGVkCkBhY3Rpdml0eTogSElWLkQyNCBDb3Vuc2VsCkBkZXNjcmlwdGlvbjogQ291bnNlbGxpbmcgd2FzIGNhcnJpZWQgb3V0IGR1cmluZyB2aXNpdAoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiQWRoZXJlbmNlIGNvdW5zZWxsaW5nIHByb3ZpZGVkIEQuREU0NjUiOgogIGV4aXN0cyAiQWRoZXJlbmNlIGNvdW5zZWxsaW5nIHByb3ZpZGVkIEQuREU0NjUgT2JzZXJ2YXRpb24iCmRlZmluZSAiQWRoZXJlbmNlIGNvdW5zZWxsaW5nIHByb3ZpZGVkIEQuREU0NjUgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJBZGhlcmVuY2UgY291bnNlbGxpbmcgcHJvdmlkZWQgRC5ERTQ2NSBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIEFkaGVyZW5jZSBjb3Vuc2VsbGluZyBwcm92aWRlZCBELkRFNDY1ICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFNDk2IC0gRW5oYW5jZWQgYWRoZXJlbmNlIGNvdW5zZWxsaW5nIHByb3ZpZGVkCkBhY3Rpdml0eTogSElWLkQyNCBDb3Vuc2VsCkBkZXNjcmlwdGlvbjogRW5oYW5jZWQgYWRoZXJlbmNlIGNvdW5zZWxsaW5nIHdhcyBwcm92aWRlZCB0byB0aGUgY2xpZW50IGR1cmluZyB0aGUgdmlzaXQKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkVuaGFuY2VkIGFkaGVyZW5jZSBjb3Vuc2VsbGluZyBwcm92aWRlZCI6CiAgZXhpc3RzICJFbmhhbmNlZCBhZGhlcmVuY2UgY291bnNlbGxpbmcgcHJvdmlkZWQgT2JzZXJ2YXRpb24iCmRlZmluZSAiRW5oYW5jZWQgYWRoZXJlbmNlIGNvdW5zZWxsaW5nIHByb3ZpZGVkIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iRW5oYW5jZWQgYWRoZXJlbmNlIGNvdW5zZWxsaW5nIHByb3ZpZGVkIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgRW5oYW5jZWQgYWRoZXJlbmNlIGNvdW5zZWxsaW5nIHByb3ZpZGVkICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFNTA3IC0gQ291bnNlbGxpbmcgcHJvdmlkZWQgb24gZGlhZ25vc2VzCkBhY3Rpdml0eTogSElWLkQyNCBDb3Vuc2VsCkBkZXNjcmlwdGlvbjogQ291bnNlbGxpbmcgcHJvdmlkZWQgb24gZGlhZ25vc2VzCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJDb3Vuc2VsbGluZyBwcm92aWRlZCBvbiBkaWFnbm9zZXMiOgogIGV4aXN0cyAiQ291bnNlbGxpbmcgcHJvdmlkZWQgb24gZGlhZ25vc2VzIE9ic2VydmF0aW9uIgpkZWZpbmUgIkNvdW5zZWxsaW5nIHByb3ZpZGVkIG9uIGRpYWdub3NlcyBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkNvdW5zZWxsaW5nIHByb3ZpZGVkIG9uIGRpYWdub3NlcyBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIENvdW5zZWxsaW5nIHByb3ZpZGVkIG9uIGRpYWdub3NlcyAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTUxMCAtIFN5cGhpbGlzIGNvdW5zZWxsaW5nIGFuZCB0cmVhdG1lbnQKQGFjdGl2aXR5OiBISVYuRDI0IENvdW5zZWwKQGRlc2NyaXB0aW9uOiBXaGV0aGVyIGNvdW5zZWxsaW5nIGFuZCB0cmVhdG1lbnQgd2FzIHByb3ZpZGVkIHRvIGEgY2xpZW50IHdobyBoYXMgYmVlbiBkaWFnbm9zZWQgd2l0aCBzeXBoaWxpcwoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiU3lwaGlsaXMgY291bnNlbGxpbmcgYW5kIHRyZWF0bWVudCI6CiAgZXhpc3RzICJTeXBoaWxpcyBjb3Vuc2VsbGluZyBhbmQgdHJlYXRtZW50IE9ic2VydmF0aW9uIgpkZWZpbmUgIlN5cGhpbGlzIGNvdW5zZWxsaW5nIGFuZCB0cmVhdG1lbnQgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJTeXBoaWxpcyBjb3Vuc2VsbGluZyBhbmQgdHJlYXRtZW50IE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgU3lwaGlsaXMgY291bnNlbGxpbmcgYW5kIHRyZWF0bWVudCAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTUxOSAtIE90aGVyIHN1cHBvcnQgc2VydmljZXMKQGFjdGl2aXR5OiBISVYuRDI4IE9mZmVyIG90aGVyIHNlcnZpY2VzCkBkZXNjcmlwdGlvbjogT2ZmZXIgb3IgcmVmZXIgZm9yIG90aGVyIHN1cHBvcnQgc2VydmljZXMKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIk90aGVyIHN1cHBvcnQgc2VydmljZXMgRC5ERTUxOSI6CiAgZXhpc3RzICJPdGhlciBzdXBwb3J0IHNlcnZpY2VzIEQuREU1MTkgT2JzZXJ2YXRpb24iCmRlZmluZSAiT3RoZXIgc3VwcG9ydCBzZXJ2aWNlcyBELkRFNTE5IE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iT3RoZXIgc3VwcG9ydCBzZXJ2aWNlcyBELkRFNTE5IE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgT3RoZXIgc3VwcG9ydCBzZXJ2aWNlcyBELkRFNTE5ICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFNTIwIC0gTWVudGFsIGhlYWx0aCBzZXJ2aWNlcwpAYWN0aXZpdHk6IEhJVi5EMjggT2ZmZXIgb3RoZXIgc2VydmljZXMKQGRlc2NyaXB0aW9uOiBPZmZlciBvciByZWZlciBmb3IgbWVudGFsIGhlYWx0aCBzZXJ2aWNlcwoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiTWVudGFsIGhlYWx0aCBzZXJ2aWNlcyBELkRFNTIwIjoKICBleGlzdHMgIk1lbnRhbCBoZWFsdGggc2VydmljZXMgRC5ERTUyMCBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIk1lbnRhbCBoZWFsdGggc2VydmljZXMgRC5ERTUyMCBPYnNlcnZhdGlvbiIKZGVmaW5lICJNZW50YWwgaGVhbHRoIHNlcnZpY2VzIEQuREU1MjAgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iTWVudGFsIGhlYWx0aCBzZXJ2aWNlcyBELkRFNTIwIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiTWVudGFsIGhlYWx0aCBzZXJ2aWNlcyBELkRFNTIwIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iTWVudGFsIGhlYWx0aCBzZXJ2aWNlcyBELkRFNTIwIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgTWVudGFsIGhlYWx0aCBzZXJ2aWNlcyBELkRFNTIwICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFNTIxIC0gUHN5Y2hvc29jaWFsIGNvdW5zZWxsaW5nLCBzdXBwb3J0IGFuZCB0cmVhdG1lbnQgYWRoZXJlbmNlIGNvdW5zZWxsaW5nCkBhY3Rpdml0eTogSElWLkQyOCBPZmZlciBvdGhlciBzZXJ2aWNlcwpAZGVzY3JpcHRpb246IE9mZmVyIG9yIHJlZmVyIGZvciBwc3ljaG9zb2NpYWwgY291bnNlbGxpbmcsIHN1cHBvcnQgYW5kIHRyZWF0bWVudCBhZGhlcmVuY2UgY291bnNlbGxpbmcKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIlBzeWNob3NvY2lhbCBjb3Vuc2VsbGluZywgc3VwcG9ydCBhbmQgdHJlYXRtZW50IGFkaGVyZW5jZSBjb3Vuc2VsbGluZyBELkRFNTIxIjoKICBleGlzdHMgIlBzeWNob3NvY2lhbCBjb3Vuc2VsbGluZywgc3VwcG9ydCBhbmQgdHJlYXRtZW50IGFkaGVyZW5jZSBjb3Vuc2VsbGluZyBELkRFNTIxIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiUHN5Y2hvc29jaWFsIGNvdW5zZWxsaW5nLCBzdXBwb3J0IGFuZCB0cmVhdG1lbnQgYWRoZXJlbmNlIGNvdW5zZWxsaW5nIEQuREU1MjEgT2JzZXJ2YXRpb24iCmRlZmluZSAiUHN5Y2hvc29jaWFsIGNvdW5zZWxsaW5nLCBzdXBwb3J0IGFuZCB0cmVhdG1lbnQgYWRoZXJlbmNlIGNvdW5zZWxsaW5nIEQuREU1MjEgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iUHN5Y2hvc29jaWFsIGNvdW5zZWxsaW5nLCBzdXBwb3J0IGFuZCB0cmVhdG1lbnQgYWRoZXJlbmNlIGNvdW5zZWxsaW5nIEQuREU1MjEgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJQc3ljaG9zb2NpYWwgY291bnNlbGxpbmcsIHN1cHBvcnQgYW5kIHRyZWF0bWVudCBhZGhlcmVuY2UgY291bnNlbGxpbmcgRC5ERTUyMSBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIlBzeWNob3NvY2lhbCBjb3Vuc2VsbGluZywgc3VwcG9ydCBhbmQgdHJlYXRtZW50IGFkaGVyZW5jZSBjb3Vuc2VsbGluZyBELkRFNTIxIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgUHN5Y2hvc29jaWFsIGNvdW5zZWxsaW5nLCBzdXBwb3J0IGFuZCB0cmVhdG1lbnQgYWRoZXJlbmNlIGNvdW5zZWxsaW5nIEQuREU1MjEgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREU1MjIgLSBMZWdhbCBhbmQgc29jaWFsIHNlcnZpY2VzCkBhY3Rpdml0eTogSElWLkQyOCBPZmZlciBvdGhlciBzZXJ2aWNlcwpAZGVzY3JpcHRpb246IE9mZmVyIG9yIHJlZmVyIGZvciBsZWdhbCBhbmQgc29jaWFsIHNlcnZpY2VzCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJMZWdhbCBhbmQgc29jaWFsIHNlcnZpY2VzIEQuREU1MjIiOgogIGV4aXN0cyAiTGVnYWwgYW5kIHNvY2lhbCBzZXJ2aWNlcyBELkRFNTIyIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiTGVnYWwgYW5kIHNvY2lhbCBzZXJ2aWNlcyBELkRFNTIyIE9ic2VydmF0aW9uIgpkZWZpbmUgIkxlZ2FsIGFuZCBzb2NpYWwgc2VydmljZXMgRC5ERTUyMiBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJMZWdhbCBhbmQgc29jaWFsIHNlcnZpY2VzIEQuREU1MjIgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJMZWdhbCBhbmQgc29jaWFsIHNlcnZpY2VzIEQuREU1MjIgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJMZWdhbCBhbmQgc29jaWFsIHNlcnZpY2VzIEQuREU1MjIgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBMZWdhbCBhbmQgc29jaWFsIHNlcnZpY2VzIEQuREU1MjIgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREU1MjMgLSBTZXJ2aWNlcyBmb3IgcmVzcG9uZGluZyB0byB2aW9sZW5jZSBhZ2FpbnN0IHdvbWVuCkBhY3Rpdml0eTogSElWLkQyOCBPZmZlciBvdGhlciBzZXJ2aWNlcwpAZGVzY3JpcHRpb246IE9mZmVyIG9yIHJlZmVyIGZvciBzZXJ2aWNlcyBmb3IgcmVzcG9uZGluZyB0byB2aW9sZW5jZSBhZ2FpbnN0IHdvbWVuLCBpbmNsdWRpbmcgZmlyc3QtbGluZSBzdXBwb3J0IGFuZCBwc3ljaG9zb2NpYWwgc3VwcG9ydCwgcG9zdC1yYXBlIGNhcmUgYW5kIG90aGVyIHN1cHBvcnQgc2VydmljZXMgaW5jbHVkaW5nIHNoZWx0ZXJzLCBsZWdhbCBzZXJ2aWNlcyBhbmQgd29tZW4gYW5kIGNoaWxkIHByb3RlY3Rpb24gc2VydmljZXMKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIlNlcnZpY2VzIGZvciByZXNwb25kaW5nIHRvIHZpb2xlbmNlIGFnYWluc3Qgd29tZW4gRC5ERTUyMyI6CiAgZXhpc3RzICJTZXJ2aWNlcyBmb3IgcmVzcG9uZGluZyB0byB2aW9sZW5jZSBhZ2FpbnN0IHdvbWVuIEQuREU1MjMgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJTZXJ2aWNlcyBmb3IgcmVzcG9uZGluZyB0byB2aW9sZW5jZSBhZ2FpbnN0IHdvbWVuIEQuREU1MjMgT2JzZXJ2YXRpb24iCmRlZmluZSAiU2VydmljZXMgZm9yIHJlc3BvbmRpbmcgdG8gdmlvbGVuY2UgYWdhaW5zdCB3b21lbiBELkRFNTIzIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIlNlcnZpY2VzIGZvciByZXNwb25kaW5nIHRvIHZpb2xlbmNlIGFnYWluc3Qgd29tZW4gRC5ERTUyMyBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIlNlcnZpY2VzIGZvciByZXNwb25kaW5nIHRvIHZpb2xlbmNlIGFnYWluc3Qgd29tZW4gRC5ERTUyMyBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIlNlcnZpY2VzIGZvciByZXNwb25kaW5nIHRvIHZpb2xlbmNlIGFnYWluc3Qgd29tZW4gRC5ERTUyMyBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIFNlcnZpY2VzIGZvciByZXNwb25kaW5nIHRvIHZpb2xlbmNlIGFnYWluc3Qgd29tZW4gRC5ERTUyMyAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTUyNCAtIERhdGUvdGltZSBvZiBmb2xsb3ctdXAgYXBwb2ludG1lbnQKQGFjdGl2aXR5OiBISVYuRDI5IFNjaGVkdWxlIGZvbGxvdy11cApAZGVzY3JpcHRpb246IERhdGUgdGhlIGNsaWVudCBpcyB0byByZXR1cm4gZm9yIG1vbml0b3JpbmcsIHJlLXN1cHBseSBvciBhbnkgb3RoZXIgcmVhc29uCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJEYXRlL3RpbWUgb2YgZm9sbG93LXVwIGFwcG9pbnRtZW50IEQuREU1MjQiOgogIEVsZW1lbnRzLiJEYXRlL3RpbWUgb2YgZm9sbG93LXVwIGFwcG9pbnRtZW50IEQuREU1MjQiIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiRGF0ZS90aW1lIG9mIGZvbGxvdy11cCBhcHBvaW50bWVudCBELkRFNTI0IFZhbHVlIjoKICAiRGF0ZS90aW1lIG9mIGZvbGxvdy11cCBhcHBvaW50bWVudCBELkRFNTI0IiBPCiAgcmV0dXJuIE8udmFsdWUKLyogRW5kIG9mIERhdGUvdGltZSBvZiBmb2xsb3ctdXAgYXBwb2ludG1lbnQgRC5ERTUyNCAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTUyNSAtIFR5cGUgb2YgZm9sbG93LXVwIGFwcG9pbnRtZW50CkBhY3Rpdml0eTogSElWLkQyOSBTY2hlZHVsZSBmb2xsb3ctdXAKQGRlc2NyaXB0aW9uOiBXaGV0aGVyIHRoZSB2aXNpdCB3aWxsIGJlIGNsaW5pY2FsIG9ubHksIEFSViBkcnVnIHBpY2stdXAgb3Igb3RoZXIuIENsaWVudCBtYXkgaGF2ZSBtdWx0aXBsZSBmb2xsb3ctdXBzIHNjaGVkdWxlZC4KKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIlR5cGUgb2YgZm9sbG93LXVwIGFwcG9pbnRtZW50IEQuREU1MjUiOgogIGV4aXN0cyAiVHlwZSBvZiBmb2xsb3ctdXAgYXBwb2ludG1lbnQgRC5ERTUyNSBPYnNlcnZhdGlvbiIKZGVmaW5lICJUeXBlIG9mIGZvbGxvdy11cCBhcHBvaW50bWVudCBELkRFNTI1IE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iVHlwZSBvZiBmb2xsb3ctdXAgYXBwb2ludG1lbnQgRC5ERTUyNSBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIFR5cGUgb2YgZm9sbG93LXVwIGFwcG9pbnRtZW50IEQuREU1MjUgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREU1MjYgLSBDbGluaWNhbCB2aXNpdApAYWN0aXZpdHk6IEhJVi5EMjkgU2NoZWR1bGUgZm9sbG93LXVwCkBkZXNjcmlwdGlvbjogQXBwb2ludG1lbnQgZm9yIGNsaW5pY2FsIGNhcmUgYnkgYSBwcm92aWRlcgoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiQ2xpbmljYWwgdmlzaXQgRC5ERTUyNiI6CiAgZXhpc3RzICJDbGluaWNhbCB2aXNpdCBELkRFNTI2IENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiQ2xpbmljYWwgdmlzaXQgRC5ERTUyNiBPYnNlcnZhdGlvbiIKZGVmaW5lICJDbGluaWNhbCB2aXNpdCBELkRFNTI2IENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIkNsaW5pY2FsIHZpc2l0IEQuREU1MjYgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJDbGluaWNhbCB2aXNpdCBELkRFNTI2IE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iQ2xpbmljYWwgdmlzaXQgRC5ERTUyNiBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIENsaW5pY2FsIHZpc2l0IEQuREU1MjYgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREU1MjcgLSBBbnRpcmV0cm92aXJhbCBkcnVnIHBpY2sgdXAKQGFjdGl2aXR5OiBISVYuRDI5IFNjaGVkdWxlIGZvbGxvdy11cApAZGVzY3JpcHRpb246IEFwcG9pbnRtZW50IGZvciBhIGRydWcgcGljayB1cAoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiQW50aXJldHJvdmlyYWwgZHJ1ZyBwaWNrIHVwIjoKICBleGlzdHMgIkFudGlyZXRyb3ZpcmFsIGRydWcgcGljayB1cCBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIkFudGlyZXRyb3ZpcmFsIGRydWcgcGljayB1cCBPYnNlcnZhdGlvbiIKZGVmaW5lICJBbnRpcmV0cm92aXJhbCBkcnVnIHBpY2sgdXAgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iQW50aXJldHJvdmlyYWwgZHJ1ZyBwaWNrIHVwIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiQW50aXJldHJvdmlyYWwgZHJ1ZyBwaWNrIHVwIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iQW50aXJldHJvdmlyYWwgZHJ1ZyBwaWNrIHVwIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgQW50aXJldHJvdmlyYWwgZHJ1ZyBwaWNrIHVwICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFNTI4IC0gUG9zdC10cmVhdG1lbnQgZm9sbG93LXVwIHZpc2l0IGZvciBjZXJ2aWNhbCBwcmVjYW5jZXIgbGVzaW9ucyBvciBpbnZhc2l2ZSBjZXJ2aWNhbCBjYW5jZXIKQGFjdGl2aXR5OiBISVYuRDI5IFNjaGVkdWxlIGZvbGxvdy11cApAZGVzY3JpcHRpb246IEFwcG9pbnRtZW50IGZvciBhIHBvc3QtdHJlYXRtZW50IGZvbGxvdy11cCB2aXNpdCBmb3IgY2VydmljYWwgcHJlY2FuY2VyIGxlc2lvbnMgb3IgaW52YXNpdmUgY2VydmljYWwgY2FuY2VyCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJQb3N0LXRyZWF0bWVudCBmb2xsb3ctdXAgdmlzaXQgZm9yIGNlcnZpY2FsIHByZWNhbmNlciBsZXNpb25zIG9yIGludmFzaXZlIGNlcnZpY2FsIGNhbmNlciBELkRFNTI4IjoKICBleGlzdHMgIlBvc3QtdHJlYXRtZW50IGZvbGxvdy11cCB2aXNpdCBmb3IgY2VydmljYWwgcHJlY2FuY2VyIGxlc2lvbnMgb3IgaW52YXNpdmUgY2VydmljYWwgY2FuY2VyIEQuREU1MjggQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJQb3N0LXRyZWF0bWVudCBmb2xsb3ctdXAgdmlzaXQgZm9yIGNlcnZpY2FsIHByZWNhbmNlciBsZXNpb25zIG9yIGludmFzaXZlIGNlcnZpY2FsIGNhbmNlciBELkRFNTI4IE9ic2VydmF0aW9uIgpkZWZpbmUgIlBvc3QtdHJlYXRtZW50IGZvbGxvdy11cCB2aXNpdCBmb3IgY2VydmljYWwgcHJlY2FuY2VyIGxlc2lvbnMgb3IgaW52YXNpdmUgY2VydmljYWwgY2FuY2VyIEQuREU1MjggQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iUG9zdC10cmVhdG1lbnQgZm9sbG93LXVwIHZpc2l0IGZvciBjZXJ2aWNhbCBwcmVjYW5jZXIgbGVzaW9ucyBvciBpbnZhc2l2ZSBjZXJ2aWNhbCBjYW5jZXIgRC5ERTUyOCBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIlBvc3QtdHJlYXRtZW50IGZvbGxvdy11cCB2aXNpdCBmb3IgY2VydmljYWwgcHJlY2FuY2VyIGxlc2lvbnMgb3IgaW52YXNpdmUgY2VydmljYWwgY2FuY2VyIEQuREU1MjggT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJQb3N0LXRyZWF0bWVudCBmb2xsb3ctdXAgdmlzaXQgZm9yIGNlcnZpY2FsIHByZWNhbmNlciBsZXNpb25zIG9yIGludmFzaXZlIGNlcnZpY2FsIGNhbmNlciBELkRFNTI4IE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgUG9zdC10cmVhdG1lbnQgZm9sbG93LXVwIHZpc2l0IGZvciBjZXJ2aWNhbCBwcmVjYW5jZXIgbGVzaW9ucyBvciBpbnZhc2l2ZSBjZXJ2aWNhbCBjYW5jZXIgRC5ERTUyOCAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTUyOSAtIE90aGVyCkBhY3Rpdml0eTogSElWLkQyOSBTY2hlZHVsZSBmb2xsb3ctdXAKQGRlc2NyaXB0aW9uOiBPdGhlciByZWFzb24gZm9yIHRoZSBmb2xsb3ctdXAgYXBwb2ludG1lbnQKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIk90aGVyIEQuREU1MjkiOgogIGV4aXN0cyAiT3RoZXIgRC5ERTUyOSBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIk90aGVyIEQuREU1MjkgT2JzZXJ2YXRpb24iCmRlZmluZSAiT3RoZXIgRC5ERTUyOSBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJPdGhlciBELkRFNTI5IENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiT3RoZXIgRC5ERTUyOSBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIk90aGVyIEQuREU1MjkgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBPdGhlciBELkRFNTI5ICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFNTMxIC0gRm9sbG93LXVwIHRlc3QgcmVjb21tZW5kZWQgZGF0ZQpAYWN0aXZpdHk6IEhJVi5EMjkgU2NoZWR1bGUgZm9sbG93LXVwCkBkZXNjcmlwdGlvbjogQSB0ZXN0IG9yIHNjcmVlbmluZyByZWNvbW1lbmRlZCBmb3IgdGhlIGNsaWVudCdzIGNhcmUgcGxhbiBhdCBhIGZ1dHVyZSBkYXRlCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJGb2xsb3ctdXAgdGVzdCByZWNvbW1lbmRlZCBkYXRlIjoKICBFbGVtZW50cy4iRm9sbG93LXVwIHRlc3QgcmVjb21tZW5kZWQgZGF0ZSIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJGb2xsb3ctdXAgdGVzdCByZWNvbW1lbmRlZCBkYXRlIFZhbHVlIjoKICAiRm9sbG93LXVwIHRlc3QgcmVjb21tZW5kZWQgZGF0ZSIgTwogIHJldHVybiBPLnZhbHVlCi8qIEVuZCBvZiBGb2xsb3ctdXAgdGVzdCByZWNvbW1lbmRlZCBkYXRlICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFNTM3IC0gQ3VycmVudCBtZWRpY2F0aW9ucwpAYWN0aXZpdHk6IEhJVi5EOCBDYXB0dXJlIG9yIHVwZGF0ZSBjbGllbnQgaGlzdG9yeQpAZGVzY3JpcHRpb246IExpc3Qgb2YgYWxsIG9mIHRoZSBtZWRpY2F0aW9ucyB0aGUgY2xpZW50IGlzIGN1cnJlbnRseSB0YWtpbmcKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkN1cnJlbnQgbWVkaWNhdGlvbnMiOgogIGV4aXN0cyAiQ3VycmVudCBtZWRpY2F0aW9ucyBPYnNlcnZhdGlvbiIKZGVmaW5lICJDdXJyZW50IG1lZGljYXRpb25zIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iQ3VycmVudCBtZWRpY2F0aW9ucyBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIEN1cnJlbnQgbWVkaWNhdGlvbnMgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREU1MzggLSBObyBtZWRpY2F0aW9ucwpAYWN0aXZpdHk6IEhJVi5EOCBDYXB0dXJlIG9yIHVwZGF0ZSBjbGllbnQgaGlzdG9yeQpAZGVzY3JpcHRpb246IFRoZSBjbGllbnQgaXMgY3VycmVudGx5IG5vdCBvbiBhbnkgbWVkaWNhdGlvbnMKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIk5vIG1lZGljYXRpb25zIjoKICBleGlzdHMgIk5vIG1lZGljYXRpb25zIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiTm8gbWVkaWNhdGlvbnMgT2JzZXJ2YXRpb24iCmRlZmluZSAiTm8gbWVkaWNhdGlvbnMgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iTm8gbWVkaWNhdGlvbnMgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJObyBtZWRpY2F0aW9ucyBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIk5vIG1lZGljYXRpb25zIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgTm8gbWVkaWNhdGlvbnMgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREU1MzkgLSBEb250IGtub3cgb2YgYW55IGN1cnJlbnQgbWVkaWNhdGlvbnMKQGFjdGl2aXR5OiBISVYuRDggQ2FwdHVyZSBvciB1cGRhdGUgY2xpZW50IGhpc3RvcnkKQGRlc2NyaXB0aW9uOiBUaGUgY2xpZW50IGRvZXMgbm90IGtub3cgaWYgc2hlIGlzIG9uIGFueSBtZWRpY2F0aW9ucwoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiRG9udCBrbm93IG9mIGFueSBjdXJyZW50IG1lZGljYXRpb25zIjoKICBleGlzdHMgIkRvbnQga25vdyBvZiBhbnkgY3VycmVudCBtZWRpY2F0aW9ucyBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIkRvbnQga25vdyBvZiBhbnkgY3VycmVudCBtZWRpY2F0aW9ucyBPYnNlcnZhdGlvbiIKZGVmaW5lICJEb250IGtub3cgb2YgYW55IGN1cnJlbnQgbWVkaWNhdGlvbnMgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iRG9udCBrbm93IG9mIGFueSBjdXJyZW50IG1lZGljYXRpb25zIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiRG9udCBrbm93IG9mIGFueSBjdXJyZW50IG1lZGljYXRpb25zIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iRG9udCBrbm93IG9mIGFueSBjdXJyZW50IG1lZGljYXRpb25zIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgRG9udCBrbm93IG9mIGFueSBjdXJyZW50IG1lZGljYXRpb25zICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFNTQwIC0gQW5hbGdlc2ljCkBhY3Rpdml0eTogSElWLkQ4IENhcHR1cmUgb3IgdXBkYXRlIGNsaWVudCBoaXN0b3J5CkBkZXNjcmlwdGlvbjogQW5hbGdlc2ljIG1lZGljYXRpb24gKHBhaW5raWxsZXIpCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJBbmFsZ2VzaWMiOgogIGV4aXN0cyAiQW5hbGdlc2ljIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiQW5hbGdlc2ljIE9ic2VydmF0aW9uIgpkZWZpbmUgIkFuYWxnZXNpYyBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJBbmFsZ2VzaWMgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJBbmFsZ2VzaWMgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJBbmFsZ2VzaWMgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBBbmFsZ2VzaWMgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREU1NDEgLSBBbnRhY2lkcwpAYWN0aXZpdHk6IEhJVi5EOCBDYXB0dXJlIG9yIHVwZGF0ZSBjbGllbnQgaGlzdG9yeQpAZGVzY3JpcHRpb246IEFudGFjaWRzCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJBbnRhY2lkcyI6CiAgZXhpc3RzICJBbnRhY2lkcyBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIkFudGFjaWRzIE9ic2VydmF0aW9uIgpkZWZpbmUgIkFudGFjaWRzIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIkFudGFjaWRzIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiQW50YWNpZHMgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJBbnRhY2lkcyBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIEFudGFjaWRzICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFNTQyIC0gQW50aWJpb3RpY3MgYnJvYWQtc3BlY3RydW0KQGFjdGl2aXR5OiBISVYuRDggQ2FwdHVyZSBvciB1cGRhdGUgY2xpZW50IGhpc3RvcnkKQGRlc2NyaXB0aW9uOiBDbGllbnQgaXMgY3VycmVudGx5IHRha2luZyBicm9hZC1zcGVjdHJ1bSBhbnRpYmlvdGljcwoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiQW50aWJpb3RpY3MgYnJvYWQtc3BlY3RydW0iOgogIGV4aXN0cyAiQW50aWJpb3RpY3MgYnJvYWQtc3BlY3RydW0gQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJBbnRpYmlvdGljcyBicm9hZC1zcGVjdHJ1bSBPYnNlcnZhdGlvbiIKZGVmaW5lICJBbnRpYmlvdGljcyBicm9hZC1zcGVjdHJ1bSBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJBbnRpYmlvdGljcyBicm9hZC1zcGVjdHJ1bSBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIkFudGliaW90aWNzIGJyb2FkLXNwZWN0cnVtIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iQW50aWJpb3RpY3MgYnJvYWQtc3BlY3RydW0gT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBBbnRpYmlvdGljcyBicm9hZC1zcGVjdHJ1bSAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTU0MyAtIEFudGljb252dWxzaXZlCkBhY3Rpdml0eTogSElWLkQ4IENhcHR1cmUgb3IgdXBkYXRlIGNsaWVudCBoaXN0b3J5CkBkZXNjcmlwdGlvbjogQW50aWNvbnZ1bHNpdmUgbWVkaWNhdGlvbgoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiQW50aWNvbnZ1bHNpdmUiOgogIGV4aXN0cyAiQW50aWNvbnZ1bHNpdmUgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJBbnRpY29udnVsc2l2ZSBPYnNlcnZhdGlvbiIKZGVmaW5lICJBbnRpY29udnVsc2l2ZSBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJBbnRpY29udnVsc2l2ZSBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIkFudGljb252dWxzaXZlIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iQW50aWNvbnZ1bHNpdmUgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBBbnRpY29udnVsc2l2ZSAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTU0NCAtIEFudGlkaWFiZXRpYwpAYWN0aXZpdHk6IEhJVi5EOCBDYXB0dXJlIG9yIHVwZGF0ZSBjbGllbnQgaGlzdG9yeQpAZGVzY3JpcHRpb246IEFudGlkaWFiZXRpYyBtZWRpY2F0aW9uCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJBbnRpZGlhYmV0aWMiOgogIGV4aXN0cyAiQW50aWRpYWJldGljIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiQW50aWRpYWJldGljIE9ic2VydmF0aW9uIgpkZWZpbmUgIkFudGlkaWFiZXRpYyBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJBbnRpZGlhYmV0aWMgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJBbnRpZGlhYmV0aWMgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJBbnRpZGlhYmV0aWMgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBBbnRpZGlhYmV0aWMgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREU1NDUgLSBBbnRpZnVuZ2FscwpAYWN0aXZpdHk6IEhJVi5EOCBDYXB0dXJlIG9yIHVwZGF0ZSBjbGllbnQgaGlzdG9yeQpAZGVzY3JpcHRpb246IENsaWVudCBpcyBjdXJyZW50bHkgdGFraW5nIGFudGlmdW5nYWxzCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJBbnRpZnVuZ2FscyI6CiAgZXhpc3RzICJBbnRpZnVuZ2FscyBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIkFudGlmdW5nYWxzIE9ic2VydmF0aW9uIgpkZWZpbmUgIkFudGlmdW5nYWxzIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIkFudGlmdW5nYWxzIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiQW50aWZ1bmdhbHMgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJBbnRpZnVuZ2FscyBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIEFudGlmdW5nYWxzICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFNTQ2IC0gQW50aWhlbG1pbnRpYwpAYWN0aXZpdHk6IEhJVi5EOCBDYXB0dXJlIG9yIHVwZGF0ZSBjbGllbnQgaGlzdG9yeQpAZGVzY3JpcHRpb246IEFudGloZWxtaW50aWMgb3IgYW50aXBhcmFzaXRpYyBtZWRpY2F0aW9uCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJBbnRpaGVsbWludGljIjoKICBleGlzdHMgIkFudGloZWxtaW50aWMgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJBbnRpaGVsbWludGljIE9ic2VydmF0aW9uIgpkZWZpbmUgIkFudGloZWxtaW50aWMgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iQW50aWhlbG1pbnRpYyBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIkFudGloZWxtaW50aWMgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJBbnRpaGVsbWludGljIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgQW50aWhlbG1pbnRpYyAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTU0NyAtIEFudGloeXBlcnRlbnNpdmUKQGFjdGl2aXR5OiBISVYuRDggQ2FwdHVyZSBvciB1cGRhdGUgY2xpZW50IGhpc3RvcnkKQGRlc2NyaXB0aW9uOiBBbnRpaHlwZXJ0ZW5zaXZlIG1lZGljYXRpb24KKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkFudGloeXBlcnRlbnNpdmUiOgogIGV4aXN0cyAiQW50aWh5cGVydGVuc2l2ZSBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIkFudGloeXBlcnRlbnNpdmUgT2JzZXJ2YXRpb24iCmRlZmluZSAiQW50aWh5cGVydGVuc2l2ZSBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJBbnRpaHlwZXJ0ZW5zaXZlIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiQW50aWh5cGVydGVuc2l2ZSBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkFudGloeXBlcnRlbnNpdmUgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBBbnRpaHlwZXJ0ZW5zaXZlICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFNTQ4IC0gQW50aW1hbGFyaWFscwpAYWN0aXZpdHk6IEhJVi5EOCBDYXB0dXJlIG9yIHVwZGF0ZSBjbGllbnQgaGlzdG9yeQpAZGVzY3JpcHRpb246IEFudGltYWxhcmlhbCBtZWRpY2F0aW9uCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJBbnRpbWFsYXJpYWxzIjoKICBleGlzdHMgIkFudGltYWxhcmlhbHMgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJBbnRpbWFsYXJpYWxzIE9ic2VydmF0aW9uIgpkZWZpbmUgIkFudGltYWxhcmlhbHMgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iQW50aW1hbGFyaWFscyBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIkFudGltYWxhcmlhbHMgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJBbnRpbWFsYXJpYWxzIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgQW50aW1hbGFyaWFscyAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTU0OSAtIEFudGlyZXRyb3ZpcmFscyBBUlZzCkBhY3Rpdml0eTogSElWLkQ4IENhcHR1cmUgb3IgdXBkYXRlIGNsaWVudCBoaXN0b3J5CkBkZXNjcmlwdGlvbjogQW50aXJldHJvdmlyYWxzIChBUlZzKQoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiQW50aXJldHJvdmlyYWxzIEFSVnMiOgogIGV4aXN0cyAiQW50aXJldHJvdmlyYWxzIEFSVnMgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJBbnRpcmV0cm92aXJhbHMgQVJWcyBPYnNlcnZhdGlvbiIKZGVmaW5lICJBbnRpcmV0cm92aXJhbHMgQVJWcyBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJBbnRpcmV0cm92aXJhbHMgQVJWcyBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIkFudGlyZXRyb3ZpcmFscyBBUlZzIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iQW50aXJldHJvdmlyYWxzIEFSVnMgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBBbnRpcmV0cm92aXJhbHMgQVJWcyAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTU1MCAtIEFudGlwYXJhc2l0aWNzCkBhY3Rpdml0eTogSElWLkQ4IENhcHR1cmUgb3IgdXBkYXRlIGNsaWVudCBoaXN0b3J5CkBkZXNjcmlwdGlvbjogQ2xpZW50IGlzIGN1cnJlbnRseSB0YWtpbmcgYW50aXBhcmFzaXRpY3MKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkFudGlwYXJhc2l0aWNzIjoKICBleGlzdHMgIkFudGlwYXJhc2l0aWNzIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiQW50aXBhcmFzaXRpY3MgT2JzZXJ2YXRpb24iCmRlZmluZSAiQW50aXBhcmFzaXRpY3MgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iQW50aXBhcmFzaXRpY3MgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJBbnRpcGFyYXNpdGljcyBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkFudGlwYXJhc2l0aWNzIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgQW50aXBhcmFzaXRpY3MgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREU1NTEgLSBBbnRpdmlyYWxzCkBhY3Rpdml0eTogSElWLkQ4IENhcHR1cmUgb3IgdXBkYXRlIGNsaWVudCBoaXN0b3J5CkBkZXNjcmlwdGlvbjogQW50aXZpcmFsIG1lZGljYXRpb24KKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkFudGl2aXJhbHMiOgogIGV4aXN0cyAiQW50aXZpcmFscyBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIkFudGl2aXJhbHMgT2JzZXJ2YXRpb24iCmRlZmluZSAiQW50aXZpcmFscyBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJBbnRpdmlyYWxzIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiQW50aXZpcmFscyBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkFudGl2aXJhbHMgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBBbnRpdmlyYWxzICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFNTUyIC0gQnVwcmVub3JwaGluZQpAYWN0aXZpdHk6IEhJVi5EOCBDYXB0dXJlIG9yIHVwZGF0ZSBjbGllbnQgaGlzdG9yeQpAZGVzY3JpcHRpb246IE9waW9pZCBzdWJzdGl0dXRpb24gdG8gdHJlYXQgb3Bpb2lkIGRlcGVuZGVuY2UKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkJ1cHJlbm9ycGhpbmUgRC5ERTU1MiI6CiAgZXhpc3RzICJCdXByZW5vcnBoaW5lIEQuREU1NTIgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJCdXByZW5vcnBoaW5lIEQuREU1NTIgT2JzZXJ2YXRpb24iCmRlZmluZSAiQnVwcmVub3JwaGluZSBELkRFNTUyIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIkJ1cHJlbm9ycGhpbmUgRC5ERTU1MiBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIkJ1cHJlbm9ycGhpbmUgRC5ERTU1MiBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkJ1cHJlbm9ycGhpbmUgRC5ERTU1MiBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIEJ1cHJlbm9ycGhpbmUgRC5ERTU1MiAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTU1MyAtIENvLXRyaW1veGF6b2xlIHByZXZlbnRpdmUgdGhlcmFweSBDUFQKQGFjdGl2aXR5OiBISVYuRDggQ2FwdHVyZSBvciB1cGRhdGUgY2xpZW50IGhpc3RvcnkKQGRlc2NyaXB0aW9uOiBDb21iaW5hdGlvbiBvZiB0d28gYW50aW1pY3JvYmlhbCBkcnVncyAoc3VsZmFtZXRob3hhem9sZSBhbmQgdHJpbWV0aG9wcmltKSB0aGF0IGNvdmVycyBhIHZhcmlldHkgb2YgYmFjdGVyaWFsLCBmdW5nYWwgYW5kIHByb3Rvem9hbiBpbmZlY3Rpb25zCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJDby10cmltb3hhem9sZSBwcmV2ZW50aXZlIHRoZXJhcHkgQ1BUIjoKICBleGlzdHMgIkNvLXRyaW1veGF6b2xlIHByZXZlbnRpdmUgdGhlcmFweSBDUFQgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJDby10cmltb3hhem9sZSBwcmV2ZW50aXZlIHRoZXJhcHkgQ1BUIE9ic2VydmF0aW9uIgpkZWZpbmUgIkNvLXRyaW1veGF6b2xlIHByZXZlbnRpdmUgdGhlcmFweSBDUFQgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iQ28tdHJpbW94YXpvbGUgcHJldmVudGl2ZSB0aGVyYXB5IENQVCBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIkNvLXRyaW1veGF6b2xlIHByZXZlbnRpdmUgdGhlcmFweSBDUFQgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJDby10cmltb3hhem9sZSBwcmV2ZW50aXZlIHRoZXJhcHkgQ1BUIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgQ28tdHJpbW94YXpvbGUgcHJldmVudGl2ZSB0aGVyYXB5IENQVCAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTU1NCAtIEhvcm1vbmFsIGZhbWlseSBwbGFubmluZyBtZXRob2QKQGFjdGl2aXR5OiBISVYuRDggQ2FwdHVyZSBvciB1cGRhdGUgY2xpZW50IGhpc3RvcnkKQGRlc2NyaXB0aW9uOiBIb3Jtb25hbCBmYW1pbHkgcGxhbm5pbmcgbWV0aG9kCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJIb3Jtb25hbCBmYW1pbHkgcGxhbm5pbmcgbWV0aG9kIjoKICBleGlzdHMgIkhvcm1vbmFsIGZhbWlseSBwbGFubmluZyBtZXRob2QgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJIb3Jtb25hbCBmYW1pbHkgcGxhbm5pbmcgbWV0aG9kIE9ic2VydmF0aW9uIgpkZWZpbmUgIkhvcm1vbmFsIGZhbWlseSBwbGFubmluZyBtZXRob2QgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iSG9ybW9uYWwgZmFtaWx5IHBsYW5uaW5nIG1ldGhvZCBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIkhvcm1vbmFsIGZhbWlseSBwbGFubmluZyBtZXRob2QgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJIb3Jtb25hbCBmYW1pbHkgcGxhbm5pbmcgbWV0aG9kIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgSG9ybW9uYWwgZmFtaWx5IHBsYW5uaW5nIG1ldGhvZCAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTU1NSAtIE1ldGhhZG9uZQpAYWN0aXZpdHk6IEhJVi5EOCBDYXB0dXJlIG9yIHVwZGF0ZSBjbGllbnQgaGlzdG9yeQpAZGVzY3JpcHRpb246IE9waW9pZCBzdWJzdGl0dXRpb24gdG8gdHJlYXQgb3Bpb2lkIGRlcGVuZGVuY2UKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIk1ldGhhZG9uZSBELkRFNTU1IjoKICBleGlzdHMgIk1ldGhhZG9uZSBELkRFNTU1IENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiTWV0aGFkb25lIEQuREU1NTUgT2JzZXJ2YXRpb24iCmRlZmluZSAiTWV0aGFkb25lIEQuREU1NTUgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iTWV0aGFkb25lIEQuREU1NTUgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJNZXRoYWRvbmUgRC5ERTU1NSBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIk1ldGhhZG9uZSBELkRFNTU1IE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgTWV0aGFkb25lIEQuREU1NTUgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREU1NTYgLSBQckVQIHRvIHByZXZlbnQgSElWCkBhY3Rpdml0eTogSElWLkQ4IENhcHR1cmUgb3IgdXBkYXRlIGNsaWVudCBoaXN0b3J5CkBkZXNjcmlwdGlvbjogUHJlLWV4cG9zdXJlIHByb3BoeWxheGlzIChQckVQKSBtZWRpY2F0aW9uIGZvciBwcmV2ZW50aW5nIHRoZSBhY3F1aXNpdGlvbiBvZiBISVYKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIlByRVAgdG8gcHJldmVudCBISVYiOgogIGV4aXN0cyAiUHJFUCB0byBwcmV2ZW50IEhJViBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIlByRVAgdG8gcHJldmVudCBISVYgT2JzZXJ2YXRpb24iCmRlZmluZSAiUHJFUCB0byBwcmV2ZW50IEhJViBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJQckVQIHRvIHByZXZlbnQgSElWIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiUHJFUCB0byBwcmV2ZW50IEhJViBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIlByRVAgdG8gcHJldmVudCBISVYgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBQckVQIHRvIHByZXZlbnQgSElWICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFNTU3IC0gT3RoZXIgYW50aWJpb3RpY3MKQGFjdGl2aXR5OiBISVYuRDggQ2FwdHVyZSBvciB1cGRhdGUgY2xpZW50IGhpc3RvcnkKQGRlc2NyaXB0aW9uOiBPdGhlciBhbnRpYmlvdGljcyBub3QgbGlzdGVkIGFib3ZlCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJPdGhlciBhbnRpYmlvdGljcyI6CiAgZXhpc3RzICJPdGhlciBhbnRpYmlvdGljcyBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIk90aGVyIGFudGliaW90aWNzIE9ic2VydmF0aW9uIgpkZWZpbmUgIk90aGVyIGFudGliaW90aWNzIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIk90aGVyIGFudGliaW90aWNzIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiT3RoZXIgYW50aWJpb3RpY3MgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJPdGhlciBhbnRpYmlvdGljcyBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIE90aGVyIGFudGliaW90aWNzICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFNTU4IC0gT3RoZXIgbWVkaWNhdGlvbnMKQGFjdGl2aXR5OiBISVYuRDggQ2FwdHVyZSBvciB1cGRhdGUgY2xpZW50IGhpc3RvcnkKQGRlc2NyaXB0aW9uOiBPdGhlciBtZWRpY2F0aW9ucyBvciBzdXBwbGVtZW50cyB0aGF0IGFyZSBub3QgbGlzdGVkIGFib3ZlCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJPdGhlciBtZWRpY2F0aW9ucyI6CiAgZXhpc3RzICJPdGhlciBtZWRpY2F0aW9ucyBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIk90aGVyIG1lZGljYXRpb25zIE9ic2VydmF0aW9uIgpkZWZpbmUgIk90aGVyIG1lZGljYXRpb25zIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIk90aGVyIG1lZGljYXRpb25zIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiT3RoZXIgbWVkaWNhdGlvbnMgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJPdGhlciBtZWRpY2F0aW9ucyBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIE90aGVyIG1lZGljYXRpb25zICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFNjU2IC0gRGF0ZSBvZiBjZXJ2aWNhbCBjYW5jZXIgc2NyZWVuaW5nIHRlc3QKQGFjdGl2aXR5OiBISVYuRDI4IE9mZmVyIG90aGVyIHNlcnZpY2VzCkBkZXNjcmlwdGlvbjogRGF0ZSBvZiBjZXJ2aWNhbCBjYW5jZXIgc2NyZWVuaW5nIHRlc3QKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkRhdGUgb2YgY2VydmljYWwgY2FuY2VyIHNjcmVlbmluZyB0ZXN0IjoKICBFbGVtZW50cy4iRGF0ZSBvZiBjZXJ2aWNhbCBjYW5jZXIgc2NyZWVuaW5nIHRlc3QiIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiRGF0ZSBvZiBjZXJ2aWNhbCBjYW5jZXIgc2NyZWVuaW5nIHRlc3QgVmFsdWUiOgogICJEYXRlIG9mIGNlcnZpY2FsIGNhbmNlciBzY3JlZW5pbmcgdGVzdCIgTwogIHJldHVybiBPLnZhbHVlCi8qIEVuZCBvZiBEYXRlIG9mIGNlcnZpY2FsIGNhbmNlciBzY3JlZW5pbmcgdGVzdCAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTY1NyAtIExpZmV0aW1lIHNjcmVlbmluZyB0ZXN0IG51bWJlcgpAYWN0aXZpdHk6IEhJVi5EMjggT2ZmZXIgb3RoZXIgc2VydmljZXMKQGRlc2NyaXB0aW9uOiBDbGllbnQncyBsaWZldGltZSBudW1iZXIgb2Ygc2NyZWVuaW5ncyBmb3IgY2VydmljYWwgY2FuY2VyCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJMaWZldGltZSBzY3JlZW5pbmcgdGVzdCBudW1iZXIiOgogIEVsZW1lbnRzLiJMaWZldGltZSBzY3JlZW5pbmcgdGVzdCBudW1iZXIiIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiTGlmZXRpbWUgc2NyZWVuaW5nIHRlc3QgbnVtYmVyIFZhbHVlIjoKICAiTGlmZXRpbWUgc2NyZWVuaW5nIHRlc3QgbnVtYmVyIiBPCiAgcmV0dXJuIE8udmFsdWUKLyogRW5kIG9mIExpZmV0aW1lIHNjcmVlbmluZyB0ZXN0IG51bWJlciAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTY1OCAtIENlcnZpY2FsIGNhbmNlciBwcmltYXJ5IHNjcmVlbmluZyB0ZXN0IHR5cGUKQGFjdGl2aXR5OiBISVYuRDI4IE9mZmVyIG90aGVyIHNlcnZpY2VzCkBkZXNjcmlwdGlvbjogVHlwZSBvZiBjZXJ2aWNhbCBjYW5jZXIgc2NyZWVuaW5nIHRlc3QgdXNlZCBpbiBwcmltYXJ5IHNjcmVlbmluZwoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiQ2VydmljYWwgY2FuY2VyIHByaW1hcnkgc2NyZWVuaW5nIHRlc3QgdHlwZSI6CiAgZXhpc3RzICJDZXJ2aWNhbCBjYW5jZXIgcHJpbWFyeSBzY3JlZW5pbmcgdGVzdCB0eXBlIE9ic2VydmF0aW9uIgpkZWZpbmUgIkNlcnZpY2FsIGNhbmNlciBwcmltYXJ5IHNjcmVlbmluZyB0ZXN0IHR5cGUgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJDZXJ2aWNhbCBjYW5jZXIgcHJpbWFyeSBzY3JlZW5pbmcgdGVzdCB0eXBlIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgQ2VydmljYWwgY2FuY2VyIHByaW1hcnkgc2NyZWVuaW5nIHRlc3QgdHlwZSAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTY1OSAtIEhQVi1ETkEKQGFjdGl2aXR5OiBISVYuRDI4IE9mZmVyIG90aGVyIHNlcnZpY2VzCkBkZXNjcmlwdGlvbjogU2NyZWVuZWQgZm9yIGNlcnZpY2FsIGNhbmNlciB1c2luZyBIUFYtRE5BIHRlc3QKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkhQVi1ETkEiOgogIGV4aXN0cyAiSFBWLUROQSBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIkhQVi1ETkEgT2JzZXJ2YXRpb24iCmRlZmluZSAiSFBWLUROQSBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJIUFYtRE5BIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiSFBWLUROQSBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkhQVi1ETkEgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBIUFYtRE5BICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFNjYwIC0gVklBCkBhY3Rpdml0eTogSElWLkQyOCBPZmZlciBvdGhlciBzZXJ2aWNlcwpAZGVzY3JpcHRpb246IFNjcmVlbmVkIGZvciBjZXJ2aWNhbCBjYW5jZXIgdXNpbmcgdmlzdWFsIGluc3BlY3Rpb24gd2l0aCBhY2V0aWMgYWNpZCAoVklBKQoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiVklBIjoKICBleGlzdHMgIlZJQSBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIlZJQSBPYnNlcnZhdGlvbiIKZGVmaW5lICJWSUEgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iVklBIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiVklBIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iVklBIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgVklBICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFNjYxIC0gQ2VydmljYWwgY3l0b2xvZ3kKQGFjdGl2aXR5OiBISVYuRDI4IE9mZmVyIG90aGVyIHNlcnZpY2VzCkBkZXNjcmlwdGlvbjogU2NyZWVuZWQgZm9yIGNlcnZpY2FsIGNhbmNlciB1c2luZyBjZXJ2aWNhbCBjeXRvbG9neQoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiQ2VydmljYWwgY3l0b2xvZ3kiOgogIGV4aXN0cyAiQ2VydmljYWwgY3l0b2xvZ3kgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJDZXJ2aWNhbCBjeXRvbG9neSBPYnNlcnZhdGlvbiIKZGVmaW5lICJDZXJ2aWNhbCBjeXRvbG9neSBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJDZXJ2aWNhbCBjeXRvbG9neSBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIkNlcnZpY2FsIGN5dG9sb2d5IE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iQ2VydmljYWwgY3l0b2xvZ3kgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBDZXJ2aWNhbCBjeXRvbG9neSAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTY2MiAtIE90aGVyCkBhY3Rpdml0eTogSElWLkQyOCBPZmZlciBvdGhlciBzZXJ2aWNlcwpAZGVzY3JpcHRpb246IFNjcmVlbmVkIGZvciBjZXJ2aWNhbCBjYW5jZXIgdXNpbmcgb3RoZXIgbWV0aG9kCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJPdGhlciBELkRFNjYyIjoKICBleGlzdHMgIk90aGVyIEQuREU2NjIgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJPdGhlciBELkRFNjYyIE9ic2VydmF0aW9uIgpkZWZpbmUgIk90aGVyIEQuREU2NjIgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iT3RoZXIgRC5ERTY2MiBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIk90aGVyIEQuREU2NjIgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJPdGhlciBELkRFNjYyIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgT3RoZXIgRC5ERTY2MiAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTc0NSAtIENlcnZpY2FsIGNhbmNlciBzY3JlZW5pbmcgaW50ZXJ2YWwgYW1vbmdzdCBXTEhJVgpAYWN0aXZpdHk6IEhJVi5EMjggT2ZmZXIgb3RoZXIgc2VydmljZXMKQGRlc2NyaXB0aW9uOiBDb3VudHJ5LXNwZWNpZmljIGludGVydmFsIGJldHdlZW4gY2FuY2VyIHNjcmVlbmluZ3MgYW1vbmdzdCB3b21lbiBsaXZpbmcgd2l0aCBISVYgKHR5cGljYWxseSAzIG9yIDUgeWVhcnMpCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJDZXJ2aWNhbCBjYW5jZXIgc2NyZWVuaW5nIGludGVydmFsIGFtb25nc3QgV0xISVYiOgogIEVsZW1lbnRzLiJDZXJ2aWNhbCBjYW5jZXIgc2NyZWVuaW5nIGludGVydmFsIGFtb25nc3QgV0xISVYiIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiQ2VydmljYWwgY2FuY2VyIHNjcmVlbmluZyBpbnRlcnZhbCBhbW9uZ3N0IFdMSElWIFZhbHVlIjoKICAiQ2VydmljYWwgY2FuY2VyIHNjcmVlbmluZyBpbnRlcnZhbCBhbW9uZ3N0IFdMSElWIiBPCiAgcmV0dXJuIE8udmFsdWUKLyogRW5kIG9mIENlcnZpY2FsIGNhbmNlciBzY3JlZW5pbmcgaW50ZXJ2YWwgYW1vbmdzdCBXTEhJViAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTc1MyAtIE9mZmVyIG90aGVyIGNsaW5pY2FsIHNlcnZpY2VzCkBhY3Rpdml0eTogSElWLkQyOCBPZmZlciBvdGhlciBzZXJ2aWNlcwpAZGVzY3JpcHRpb246IE90aGVyIGNsaW5pY2FsIHNlcnZpY2VzIG9mZmVyZWQgb3IgcmVmZXJyYWxzIGdpdmVuIHRvIHRoZSBjbGllbnQKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIk9mZmVyIG90aGVyIGNsaW5pY2FsIHNlcnZpY2VzIEQuREU3NTMiOgogIGV4aXN0cyAiT2ZmZXIgb3RoZXIgY2xpbmljYWwgc2VydmljZXMgRC5ERTc1MyBPYnNlcnZhdGlvbiIKZGVmaW5lICJPZmZlciBvdGhlciBjbGluaWNhbCBzZXJ2aWNlcyBELkRFNzUzIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iT2ZmZXIgb3RoZXIgY2xpbmljYWwgc2VydmljZXMgRC5ERTc1MyBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIE9mZmVyIG90aGVyIGNsaW5pY2FsIHNlcnZpY2VzIEQuREU3NTMgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREU3NTQgLSBBc3Nlc3NtZW50IGFuZCBwcm92aXNpb24gb2YgdmFjY2luYXRpb25zCkBhY3Rpdml0eTogSElWLkQyOCBPZmZlciBvdGhlciBzZXJ2aWNlcwpAZGVzY3JpcHRpb246IEFzc2Vzc21lbnQgYW5kIHByb3Zpc2lvbiBvZiB2YWNjaW5hdGlvbnMsIHN1Y2ggYXMgZm9yIHBlb3BsZSBmcm9tIEtleSBwb3B1bGF0aW9uIG1lbWJlciB0eXBlLCBwcmVnbmFudCB3b21lbiBhbmQgaW5mYW50czsgYW5kLCB3aGVyZSBhcHByb3ByaWF0ZSwgdGV0YW51cyB2YWNjaW5hdGlvbiBmb3IgYWRvbGVzY2VudCBib3lzIGFuZCBtZW4gcmVjZWl2aW5nIFZNTUMKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkFzc2Vzc21lbnQgYW5kIHByb3Zpc2lvbiBvZiB2YWNjaW5hdGlvbnMgRC5ERTc1NCI6CiAgZXhpc3RzICJBc3Nlc3NtZW50IGFuZCBwcm92aXNpb24gb2YgdmFjY2luYXRpb25zIEQuREU3NTQgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJBc3Nlc3NtZW50IGFuZCBwcm92aXNpb24gb2YgdmFjY2luYXRpb25zIEQuREU3NTQgT2JzZXJ2YXRpb24iCmRlZmluZSAiQXNzZXNzbWVudCBhbmQgcHJvdmlzaW9uIG9mIHZhY2NpbmF0aW9ucyBELkRFNzU0IENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIkFzc2Vzc21lbnQgYW5kIHByb3Zpc2lvbiBvZiB2YWNjaW5hdGlvbnMgRC5ERTc1NCBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIkFzc2Vzc21lbnQgYW5kIHByb3Zpc2lvbiBvZiB2YWNjaW5hdGlvbnMgRC5ERTc1NCBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkFzc2Vzc21lbnQgYW5kIHByb3Zpc2lvbiBvZiB2YWNjaW5hdGlvbnMgRC5ERTc1NCBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIEFzc2Vzc21lbnQgYW5kIHByb3Zpc2lvbiBvZiB2YWNjaW5hdGlvbnMgRC5ERTc1NCAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTc1NSAtIEhlcGF0aXRpcyBCIEhCViBhbmQgaGVwYXRpdGlzIEMgdmlydXMgSENWIHRlc3RpbmcgYW5kIHRyZWF0bWVudApAYWN0aXZpdHk6IEhJVi5EMjggT2ZmZXIgb3RoZXIgc2VydmljZXMKQGRlc2NyaXB0aW9uOiBPZmZlciBvciByZWZlciBmb3IgSEJWIGFuZC9vciBIQ1YgdGVzdGluZyBhbmQgdHJlYXRtZW50CiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJIZXBhdGl0aXMgQiBIQlYgYW5kIGhlcGF0aXRpcyBDIHZpcnVzIEhDViB0ZXN0aW5nIGFuZCB0cmVhdG1lbnQiOgogIGV4aXN0cyAiSGVwYXRpdGlzIEIgSEJWIGFuZCBoZXBhdGl0aXMgQyB2aXJ1cyBIQ1YgdGVzdGluZyBhbmQgdHJlYXRtZW50IENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiSGVwYXRpdGlzIEIgSEJWIGFuZCBoZXBhdGl0aXMgQyB2aXJ1cyBIQ1YgdGVzdGluZyBhbmQgdHJlYXRtZW50IE9ic2VydmF0aW9uIgpkZWZpbmUgIkhlcGF0aXRpcyBCIEhCViBhbmQgaGVwYXRpdGlzIEMgdmlydXMgSENWIHRlc3RpbmcgYW5kIHRyZWF0bWVudCBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJIZXBhdGl0aXMgQiBIQlYgYW5kIGhlcGF0aXRpcyBDIHZpcnVzIEhDViB0ZXN0aW5nIGFuZCB0cmVhdG1lbnQgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJIZXBhdGl0aXMgQiBIQlYgYW5kIGhlcGF0aXRpcyBDIHZpcnVzIEhDViB0ZXN0aW5nIGFuZCB0cmVhdG1lbnQgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJIZXBhdGl0aXMgQiBIQlYgYW5kIGhlcGF0aXRpcyBDIHZpcnVzIEhDViB0ZXN0aW5nIGFuZCB0cmVhdG1lbnQgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBIZXBhdGl0aXMgQiBIQlYgYW5kIGhlcGF0aXRpcyBDIHZpcnVzIEhDViB0ZXN0aW5nIGFuZCB0cmVhdG1lbnQgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREU3NTYgLSBDby10cmltb3hhem9sZSBjaGVtb3Byb3BoeWxheGlzIHRvIHByZXZlbnQgcG5ldW1vY3lzdGlzIGNhcmluaWkgcG5ldW1vbmlhCkBhY3Rpdml0eTogSElWLkQyOCBPZmZlciBvdGhlciBzZXJ2aWNlcwpAZGVzY3JpcHRpb246IE9mZmVyIG9yIHJlZmVyIGZvciBjby10cmltb3hhem9sZSBjaGVtb3Byb3BoeWxheGlzIHRvIHByZXZlbnQgcG5ldW1vY3lzdGlzIGNhcmluaWkgcG5ldW1vbmlhCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJDby10cmltb3hhem9sZSBjaGVtb3Byb3BoeWxheGlzIHRvIHByZXZlbnQgcG5ldW1vY3lzdGlzIGNhcmluaWkgcG5ldW1vbmlhIEQuREU3NTYiOgogIGV4aXN0cyAiQ28tdHJpbW94YXpvbGUgY2hlbW9wcm9waHlsYXhpcyB0byBwcmV2ZW50IHBuZXVtb2N5c3RpcyBjYXJpbmlpIHBuZXVtb25pYSBELkRFNzU2IENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiQ28tdHJpbW94YXpvbGUgY2hlbW9wcm9waHlsYXhpcyB0byBwcmV2ZW50IHBuZXVtb2N5c3RpcyBjYXJpbmlpIHBuZXVtb25pYSBELkRFNzU2IE9ic2VydmF0aW9uIgpkZWZpbmUgIkNvLXRyaW1veGF6b2xlIGNoZW1vcHJvcGh5bGF4aXMgdG8gcHJldmVudCBwbmV1bW9jeXN0aXMgY2FyaW5paSBwbmV1bW9uaWEgRC5ERTc1NiBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJDby10cmltb3hhem9sZSBjaGVtb3Byb3BoeWxheGlzIHRvIHByZXZlbnQgcG5ldW1vY3lzdGlzIGNhcmluaWkgcG5ldW1vbmlhIEQuREU3NTYgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJDby10cmltb3hhem9sZSBjaGVtb3Byb3BoeWxheGlzIHRvIHByZXZlbnQgcG5ldW1vY3lzdGlzIGNhcmluaWkgcG5ldW1vbmlhIEQuREU3NTYgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJDby10cmltb3hhem9sZSBjaGVtb3Byb3BoeWxheGlzIHRvIHByZXZlbnQgcG5ldW1vY3lzdGlzIGNhcmluaWkgcG5ldW1vbmlhIEQuREU3NTYgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBDby10cmltb3hhem9sZSBjaGVtb3Byb3BoeWxheGlzIHRvIHByZXZlbnQgcG5ldW1vY3lzdGlzIGNhcmluaWkgcG5ldW1vbmlhIEQuREU3NTYgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREU3NTcgLSBJbnRlbnNpZmllZCBUQiBjYXNlIGZpbmRpbmcgYW5kIGxpbmthZ2UgdG8gVEIgdHJlYXRtZW50CkBhY3Rpdml0eTogSElWLkQyOCBPZmZlciBvdGhlciBzZXJ2aWNlcwpAZGVzY3JpcHRpb246IE9mZmVyIG9yIHJlZmVyIGZvciBpbnRlbnNpZmllZCBUQiBjYXNlIGZpbmRpbmcgYW5kIGxpbmthZ2UgdG8gVEIgdHJlYXRtZW50CiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJJbnRlbnNpZmllZCBUQiBjYXNlIGZpbmRpbmcgYW5kIGxpbmthZ2UgdG8gVEIgdHJlYXRtZW50IEQuREU3NTciOgogIGV4aXN0cyAiSW50ZW5zaWZpZWQgVEIgY2FzZSBmaW5kaW5nIGFuZCBsaW5rYWdlIHRvIFRCIHRyZWF0bWVudCBELkRFNzU3IENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiSW50ZW5zaWZpZWQgVEIgY2FzZSBmaW5kaW5nIGFuZCBsaW5rYWdlIHRvIFRCIHRyZWF0bWVudCBELkRFNzU3IE9ic2VydmF0aW9uIgpkZWZpbmUgIkludGVuc2lmaWVkIFRCIGNhc2UgZmluZGluZyBhbmQgbGlua2FnZSB0byBUQiB0cmVhdG1lbnQgRC5ERTc1NyBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJJbnRlbnNpZmllZCBUQiBjYXNlIGZpbmRpbmcgYW5kIGxpbmthZ2UgdG8gVEIgdHJlYXRtZW50IEQuREU3NTcgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJJbnRlbnNpZmllZCBUQiBjYXNlIGZpbmRpbmcgYW5kIGxpbmthZ2UgdG8gVEIgdHJlYXRtZW50IEQuREU3NTcgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJJbnRlbnNpZmllZCBUQiBjYXNlIGZpbmRpbmcgYW5kIGxpbmthZ2UgdG8gVEIgdHJlYXRtZW50IEQuREU3NTcgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBJbnRlbnNpZmllZCBUQiBjYXNlIGZpbmRpbmcgYW5kIGxpbmthZ2UgdG8gVEIgdHJlYXRtZW50IEQuREU3NTcgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREU3NTggLSBQcm92aXNpb24gb2YgaXNvbmlhemlkIHByZXZlbnRpdmUgdGhlcmFweSBpZiBwZXJzb24gZG9lcyBub3QgaGF2ZSBUQgpAYWN0aXZpdHk6IEhJVi5EMjggT2ZmZXIgb3RoZXIgc2VydmljZXMKQGRlc2NyaXB0aW9uOiBPZmZlciBvciByZWZlciBmb3IgcHJvdmlzaW9uIG9mIGlzb25pYXppZCBwcmV2ZW50aXZlIHRoZXJhcHkgaWYgcGVyc29uIGRvZXMgbm90IGhhdmUgVEIKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIlByb3Zpc2lvbiBvZiBpc29uaWF6aWQgcHJldmVudGl2ZSB0aGVyYXB5IGlmIHBlcnNvbiBkb2VzIG5vdCBoYXZlIFRCIEQuREU3NTgiOgogIGV4aXN0cyAiUHJvdmlzaW9uIG9mIGlzb25pYXppZCBwcmV2ZW50aXZlIHRoZXJhcHkgaWYgcGVyc29uIGRvZXMgbm90IGhhdmUgVEIgRC5ERTc1OCBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIlByb3Zpc2lvbiBvZiBpc29uaWF6aWQgcHJldmVudGl2ZSB0aGVyYXB5IGlmIHBlcnNvbiBkb2VzIG5vdCBoYXZlIFRCIEQuREU3NTggT2JzZXJ2YXRpb24iCmRlZmluZSAiUHJvdmlzaW9uIG9mIGlzb25pYXppZCBwcmV2ZW50aXZlIHRoZXJhcHkgaWYgcGVyc29uIGRvZXMgbm90IGhhdmUgVEIgRC5ERTc1OCBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJQcm92aXNpb24gb2YgaXNvbmlhemlkIHByZXZlbnRpdmUgdGhlcmFweSBpZiBwZXJzb24gZG9lcyBub3QgaGF2ZSBUQiBELkRFNzU4IENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiUHJvdmlzaW9uIG9mIGlzb25pYXppZCBwcmV2ZW50aXZlIHRoZXJhcHkgaWYgcGVyc29uIGRvZXMgbm90IGhhdmUgVEIgRC5ERTc1OCBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIlByb3Zpc2lvbiBvZiBpc29uaWF6aWQgcHJldmVudGl2ZSB0aGVyYXB5IGlmIHBlcnNvbiBkb2VzIG5vdCBoYXZlIFRCIEQuREU3NTggT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBQcm92aXNpb24gb2YgaXNvbmlhemlkIHByZXZlbnRpdmUgdGhlcmFweSBpZiBwZXJzb24gZG9lcyBub3QgaGF2ZSBUQiBELkRFNzU4ICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFNzU5IC0gTWFsYXJpYSBwcmV2ZW50aW9uIHN1Y2ggYXMgYmVkIG5ldHMgYW5kIHByb3BoeWxheGlzLCBkZXBlbmRpbmcgb24gZXBpZGVtaW9sb2d5CkBhY3Rpdml0eTogSElWLkQyOCBPZmZlciBvdGhlciBzZXJ2aWNlcwpAZGVzY3JpcHRpb246IE9mZmVyIG9yIHJlZmVyIGZvciBtYWxhcmlhIHByZXZlbnRpb24gKHN1Y2ggYXMgYmVkIG5ldHMgYW5kIHByb3BoeWxheGlzKSwgZGVwZW5kaW5nIG9uIGVwaWRlbWlvbG9neQoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiTWFsYXJpYSBwcmV2ZW50aW9uIHN1Y2ggYXMgYmVkIG5ldHMgYW5kIHByb3BoeWxheGlzLCBkZXBlbmRpbmcgb24gZXBpZGVtaW9sb2d5IEQuREU3NTkiOgogIGV4aXN0cyAiTWFsYXJpYSBwcmV2ZW50aW9uIHN1Y2ggYXMgYmVkIG5ldHMgYW5kIHByb3BoeWxheGlzLCBkZXBlbmRpbmcgb24gZXBpZGVtaW9sb2d5IEQuREU3NTkgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJNYWxhcmlhIHByZXZlbnRpb24gc3VjaCBhcyBiZWQgbmV0cyBhbmQgcHJvcGh5bGF4aXMsIGRlcGVuZGluZyBvbiBlcGlkZW1pb2xvZ3kgRC5ERTc1OSBPYnNlcnZhdGlvbiIKZGVmaW5lICJNYWxhcmlhIHByZXZlbnRpb24gc3VjaCBhcyBiZWQgbmV0cyBhbmQgcHJvcGh5bGF4aXMsIGRlcGVuZGluZyBvbiBlcGlkZW1pb2xvZ3kgRC5ERTc1OSBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJNYWxhcmlhIHByZXZlbnRpb24gc3VjaCBhcyBiZWQgbmV0cyBhbmQgcHJvcGh5bGF4aXMsIGRlcGVuZGluZyBvbiBlcGlkZW1pb2xvZ3kgRC5ERTc1OSBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIk1hbGFyaWEgcHJldmVudGlvbiBzdWNoIGFzIGJlZCBuZXRzIGFuZCBwcm9waHlsYXhpcywgZGVwZW5kaW5nIG9uIGVwaWRlbWlvbG9neSBELkRFNzU5IE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iTWFsYXJpYSBwcmV2ZW50aW9uIHN1Y2ggYXMgYmVkIG5ldHMgYW5kIHByb3BoeWxheGlzLCBkZXBlbmRpbmcgb24gZXBpZGVtaW9sb2d5IEQuREU3NTkgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBNYWxhcmlhIHByZXZlbnRpb24gc3VjaCBhcyBiZWQgbmV0cyBhbmQgcHJvcGh5bGF4aXMsIGRlcGVuZGluZyBvbiBlcGlkZW1pb2xvZ3kgRC5ERTc1OSAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTgwMiAtIFN5cGhpbGlzIHRlc3QgcmVzdWx0CkBhY3Rpdml0eTogSElWLkQyNiBPZmZlciBzZXh1YWwgYW5kIHJlcHJvZHVjdGl2ZSBoZWFsdGggc2VydmljZXMKQGRlc2NyaXB0aW9uOiBSZXN1bHQgZnJvbSBzeXBoaWxpcyB0ZXN0CiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJTeXBoaWxpcyB0ZXN0IHJlc3VsdCBELkRFODAyIjoKICBleGlzdHMgIlN5cGhpbGlzIHRlc3QgcmVzdWx0IEQuREU4MDIgT2JzZXJ2YXRpb24iCmRlZmluZSAiU3lwaGlsaXMgdGVzdCByZXN1bHQgRC5ERTgwMiBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIlN5cGhpbGlzIHRlc3QgcmVzdWx0IEQuREU4MDIgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBTeXBoaWxpcyB0ZXN0IHJlc3VsdCBELkRFODAyICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFODAzIC0gUG9zaXRpdmUKQGFjdGl2aXR5OiBISVYuRDI2IE9mZmVyIHNleHVhbCBhbmQgcmVwcm9kdWN0aXZlIGhlYWx0aCBzZXJ2aWNlcwpAZGVzY3JpcHRpb246IFRlc3QgcmVzdWx0IGlzIHBvc2l0aXZlIGZvciBzeXBoaWxpcwoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiUG9zaXRpdmUgRC5ERTgwMyI6CiAgZXhpc3RzICJQb3NpdGl2ZSBELkRFODAzIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiUG9zaXRpdmUgRC5ERTgwMyBPYnNlcnZhdGlvbiIKZGVmaW5lICJQb3NpdGl2ZSBELkRFODAzIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIlBvc2l0aXZlIEQuREU4MDMgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJQb3NpdGl2ZSBELkRFODAzIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iUG9zaXRpdmUgRC5ERTgwMyBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIFBvc2l0aXZlIEQuREU4MDMgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREU4MDQgLSBOZWdhdGl2ZQpAYWN0aXZpdHk6IEhJVi5EMjYgT2ZmZXIgc2V4dWFsIGFuZCByZXByb2R1Y3RpdmUgaGVhbHRoIHNlcnZpY2VzCkBkZXNjcmlwdGlvbjogVGVzdCByZXN1bHQgaXMgbmVnYXRpdmUgZm9yIHN5cGhpbGlzCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJOZWdhdGl2ZSBELkRFODA0IjoKICBleGlzdHMgIk5lZ2F0aXZlIEQuREU4MDQgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJOZWdhdGl2ZSBELkRFODA0IE9ic2VydmF0aW9uIgpkZWZpbmUgIk5lZ2F0aXZlIEQuREU4MDQgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iTmVnYXRpdmUgRC5ERTgwNCBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIk5lZ2F0aXZlIEQuREU4MDQgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJOZWdhdGl2ZSBELkRFODA0IE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgTmVnYXRpdmUgRC5ERTgwNCAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTgwNSAtIEluY29uY2x1c2l2ZQpAYWN0aXZpdHk6IEhJVi5EMjYgT2ZmZXIgc2V4dWFsIGFuZCByZXByb2R1Y3RpdmUgaGVhbHRoIHNlcnZpY2VzCkBkZXNjcmlwdGlvbjogVGVzdCByZXN1bHQgaXMgaW5jb25jbHVzaXZlCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJJbmNvbmNsdXNpdmUgRC5ERTgwNSI6CiAgZXhpc3RzICJJbmNvbmNsdXNpdmUgRC5ERTgwNSBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIkluY29uY2x1c2l2ZSBELkRFODA1IE9ic2VydmF0aW9uIgpkZWZpbmUgIkluY29uY2x1c2l2ZSBELkRFODA1IENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIkluY29uY2x1c2l2ZSBELkRFODA1IENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiSW5jb25jbHVzaXZlIEQuREU4MDUgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJJbmNvbmNsdXNpdmUgRC5ERTgwNSBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIEluY29uY2x1c2l2ZSBELkRFODA1ICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFOTAzIC0gTWVkaWNhdGlvbi9kcnVnCkBhY3Rpdml0eTogSElWLkQyMSBEZXRlcm1pbmUgcmVnaW1lbiBhbmQgdHJlYXRtZW50IG9wdGlvbnMKQGRlc2NyaXB0aW9uOiBDdXJyZW50IG9yIGNvbnNpZGVyZWQgbWVkaWNhdGlvbi9kcnVnLCBmb3IgdGhlIHB1cnBvc2Ugb2YgZGV0ZXJtaW5pbmcgZHJ1ZyBpbnRlcmFjdGlvbnMKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIk1lZGljYXRpb24vZHJ1ZyI6CiAgZXhpc3RzICJNZWRpY2F0aW9uL2RydWcgT2JzZXJ2YXRpb24iCmRlZmluZSAiTWVkaWNhdGlvbi9kcnVnIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iTWVkaWNhdGlvbi9kcnVnIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgTWVkaWNhdGlvbi9kcnVnICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFOTA0IC0gUmlmYW1waWNpbgpAYWN0aXZpdHk6IEhJVi5EMjEgRGV0ZXJtaW5lIHJlZ2ltZW4gYW5kIHRyZWF0bWVudCBvcHRpb25zCkBkZXNjcmlwdGlvbjogUmlmYW1waWNpbiBjdXJyZW50bHkgYmVpbmcgdGFrZW4gYnksIG9yIGNvbnNpZGVyZWQgZm9yLCBjbGllbnQKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIlJpZmFtcGljaW4iOgogIGV4aXN0cyAiUmlmYW1waWNpbiBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIlJpZmFtcGljaW4gT2JzZXJ2YXRpb24iCmRlZmluZSAiUmlmYW1waWNpbiBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJSaWZhbXBpY2luIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiUmlmYW1waWNpbiBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIlJpZmFtcGljaW4gT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBSaWZhbXBpY2luICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFOTA1IC0gSGFsb2ZhbnRyaW5lCkBhY3Rpdml0eTogSElWLkQyMSBEZXRlcm1pbmUgcmVnaW1lbiBhbmQgdHJlYXRtZW50IG9wdGlvbnMKQGRlc2NyaXB0aW9uOiBIYWxvZmFudHJpbmUgY3VycmVudGx5IGJlaW5nIHRha2VuIGJ5LCBvciBjb25zaWRlcmVkIGZvciwgY2xpZW50CiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJIYWxvZmFudHJpbmUiOgogIGV4aXN0cyAiSGFsb2ZhbnRyaW5lIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiSGFsb2ZhbnRyaW5lIE9ic2VydmF0aW9uIgpkZWZpbmUgIkhhbG9mYW50cmluZSBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJIYWxvZmFudHJpbmUgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJIYWxvZmFudHJpbmUgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJIYWxvZmFudHJpbmUgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBIYWxvZmFudHJpbmUgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREU5MDYgLSBMb3Zhc3RhdGluCkBhY3Rpdml0eTogSElWLkQyMSBEZXRlcm1pbmUgcmVnaW1lbiBhbmQgdHJlYXRtZW50IG9wdGlvbnMKQGRlc2NyaXB0aW9uOiBMb3Zhc3RhdGluIGN1cnJlbnRseSBiZWluZyB0YWtlbiBieSwgb3IgY29uc2lkZXJlZCBmb3IsIGNsaWVudAoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiTG92YXN0YXRpbiI6CiAgZXhpc3RzICJMb3Zhc3RhdGluIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiTG92YXN0YXRpbiBPYnNlcnZhdGlvbiIKZGVmaW5lICJMb3Zhc3RhdGluIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIkxvdmFzdGF0aW4gQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJMb3Zhc3RhdGluIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iTG92YXN0YXRpbiBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIExvdmFzdGF0aW4gKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREU5MDcgLSBTaW12YXN0YXRpbgpAYWN0aXZpdHk6IEhJVi5EMjEgRGV0ZXJtaW5lIHJlZ2ltZW4gYW5kIHRyZWF0bWVudCBvcHRpb25zCkBkZXNjcmlwdGlvbjogU2ltdmFzdGF0aW4gY3VycmVudGx5IGJlaW5nIHRha2VuIGJ5LCBvciBjb25zaWRlcmVkIGZvciwgY2xpZW50CiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJTaW12YXN0YXRpbiI6CiAgZXhpc3RzICJTaW12YXN0YXRpbiBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIlNpbXZhc3RhdGluIE9ic2VydmF0aW9uIgpkZWZpbmUgIlNpbXZhc3RhdGluIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIlNpbXZhc3RhdGluIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiU2ltdmFzdGF0aW4gT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJTaW12YXN0YXRpbiBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIFNpbXZhc3RhdGluICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFOTA4IC0gSG9ybW9uYWwgY29udHJhY2VwdGlvbgpAYWN0aXZpdHk6IEhJVi5EMjEgRGV0ZXJtaW5lIHJlZ2ltZW4gYW5kIHRyZWF0bWVudCBvcHRpb25zCkBkZXNjcmlwdGlvbjogSG9ybW9uYWwgY29udHJhY2VwdGlvbiBjdXJyZW50bHkgYmVpbmcgdGFrZW4gYnksIG9yIGNvbnNpZGVyZWQgZm9yLCBjbGllbnQKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkhvcm1vbmFsIGNvbnRyYWNlcHRpb24iOgogIGV4aXN0cyAiSG9ybW9uYWwgY29udHJhY2VwdGlvbiBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIkhvcm1vbmFsIGNvbnRyYWNlcHRpb24gT2JzZXJ2YXRpb24iCmRlZmluZSAiSG9ybW9uYWwgY29udHJhY2VwdGlvbiBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJIb3Jtb25hbCBjb250cmFjZXB0aW9uIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiSG9ybW9uYWwgY29udHJhY2VwdGlvbiBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkhvcm1vbmFsIGNvbnRyYWNlcHRpb24gT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBIb3Jtb25hbCBjb250cmFjZXB0aW9uICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFOTA5IC0gTWV0Zm9ybWluCkBhY3Rpdml0eTogSElWLkQyMSBEZXRlcm1pbmUgcmVnaW1lbiBhbmQgdHJlYXRtZW50IG9wdGlvbnMKQGRlc2NyaXB0aW9uOiBNZXRmb3JtaW4gY3VycmVudGx5IGJlaW5nIHRha2VuIGJ5LCBvciBjb25zaWRlcmVkIGZvciwgY2xpZW50CiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJNZXRmb3JtaW4iOgogIGV4aXN0cyAiTWV0Zm9ybWluIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiTWV0Zm9ybWluIE9ic2VydmF0aW9uIgpkZWZpbmUgIk1ldGZvcm1pbiBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJNZXRmb3JtaW4gQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJNZXRmb3JtaW4gT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJNZXRmb3JtaW4gT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBNZXRmb3JtaW4gKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREU5MTAgLSBBc3RlbWl6b2xlCkBhY3Rpdml0eTogSElWLkQyMSBEZXRlcm1pbmUgcmVnaW1lbiBhbmQgdHJlYXRtZW50IG9wdGlvbnMKQGRlc2NyaXB0aW9uOiBBc3RlbWl6b2xlIGN1cnJlbnRseSBiZWluZyB0YWtlbiBieSwgb3IgY29uc2lkZXJlZCBmb3IsIGNsaWVudAoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiQXN0ZW1pem9sZSI6CiAgZXhpc3RzICJBc3RlbWl6b2xlIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiQXN0ZW1pem9sZSBPYnNlcnZhdGlvbiIKZGVmaW5lICJBc3RlbWl6b2xlIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIkFzdGVtaXpvbGUgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJBc3RlbWl6b2xlIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iQXN0ZW1pem9sZSBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIEFzdGVtaXpvbGUgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREU5MTEgLSBUZXJmZW5hZGluZQpAYWN0aXZpdHk6IEhJVi5EMjEgRGV0ZXJtaW5lIHJlZ2ltZW4gYW5kIHRyZWF0bWVudCBvcHRpb25zCkBkZXNjcmlwdGlvbjogVGVyZmVuYWRpbmUgY3VycmVudGx5IGJlaW5nIHRha2VuIGJ5LCBvciBjb25zaWRlcmVkIGZvciwgY2xpZW50CiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJUZXJmZW5hZGluZSI6CiAgZXhpc3RzICJUZXJmZW5hZGluZSBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIlRlcmZlbmFkaW5lIE9ic2VydmF0aW9uIgpkZWZpbmUgIlRlcmZlbmFkaW5lIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIlRlcmZlbmFkaW5lIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiVGVyZmVuYWRpbmUgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJUZXJmZW5hZGluZSBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIFRlcmZlbmFkaW5lICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFOTEyIC0gVERGCkBhY3Rpdml0eTogSElWLkQyMSBEZXRlcm1pbmUgcmVnaW1lbiBhbmQgdHJlYXRtZW50IG9wdGlvbnMKQGRlc2NyaXB0aW9uOiBUREYgY3VycmVudGx5IGJlaW5nIHRha2VuIGJ5LCBvciBjb25zaWRlcmVkIGZvciwgY2xpZW50CiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJUREYgRC5ERTkxMiI6CiAgZXhpc3RzICJUREYgRC5ERTkxMiBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIlRERiBELkRFOTEyIE9ic2VydmF0aW9uIgpkZWZpbmUgIlRERiBELkRFOTEyIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIlRERiBELkRFOTEyIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiVERGIEQuREU5MTIgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJUREYgRC5ERTkxMiBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIFRERiBELkRFOTEyICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFOTEzIC0gU2ltZXByZXZpcgpAYWN0aXZpdHk6IEhJVi5EMjEgRGV0ZXJtaW5lIHJlZ2ltZW4gYW5kIHRyZWF0bWVudCBvcHRpb25zCkBkZXNjcmlwdGlvbjogU2ltZXByZXZpciBjdXJyZW50bHkgYmVpbmcgdGFrZW4gYnksIG9yIGNvbnNpZGVyZWQgZm9yLCBjbGllbnQKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIlNpbWVwcmV2aXIiOgogIGV4aXN0cyAiU2ltZXByZXZpciBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIlNpbWVwcmV2aXIgT2JzZXJ2YXRpb24iCmRlZmluZSAiU2ltZXByZXZpciBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJTaW1lcHJldmlyIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiU2ltZXByZXZpciBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIlNpbWVwcmV2aXIgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBTaW1lcHJldmlyICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFOTE0IC0gT21iaXRhc3ZpciArIHBhcml0YXByZXZpci9yaXRvbmF2aXIgKyBkYXNhYnV2aXIKQGFjdGl2aXR5OiBISVYuRDIxIERldGVybWluZSByZWdpbWVuIGFuZCB0cmVhdG1lbnQgb3B0aW9ucwpAZGVzY3JpcHRpb246IE9tYml0YXN2aXIgKyBwYXJpdGFwcmV2aXIvcml0b25hdmlyICsgZGFzYWJ1dmlyIGN1cnJlbnRseSBiZWluZyB0YWtlbiBieSwgb3IgY29uc2lkZXJlZCBmb3IsIGNsaWVudAoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiT21iaXRhc3ZpciArIHBhcml0YXByZXZpci9yaXRvbmF2aXIgKyBkYXNhYnV2aXIiOgogIGV4aXN0cyAiT21iaXRhc3ZpciArIHBhcml0YXByZXZpci9yaXRvbmF2aXIgKyBkYXNhYnV2aXIgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJPbWJpdGFzdmlyICsgcGFyaXRhcHJldmlyL3JpdG9uYXZpciArIGRhc2FidXZpciBPYnNlcnZhdGlvbiIKZGVmaW5lICJPbWJpdGFzdmlyICsgcGFyaXRhcHJldmlyL3JpdG9uYXZpciArIGRhc2FidXZpciBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJPbWJpdGFzdmlyICsgcGFyaXRhcHJldmlyL3JpdG9uYXZpciArIGRhc2FidXZpciBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIk9tYml0YXN2aXIgKyBwYXJpdGFwcmV2aXIvcml0b25hdmlyICsgZGFzYWJ1dmlyIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iT21iaXRhc3ZpciArIHBhcml0YXByZXZpci9yaXRvbmF2aXIgKyBkYXNhYnV2aXIgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBPbWJpdGFzdmlyICsgcGFyaXRhcHJldmlyL3JpdG9uYXZpciArIGRhc2FidXZpciAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTkxNSAtIE1ldGhhZG9uZQpAYWN0aXZpdHk6IEhJVi5EMjEgRGV0ZXJtaW5lIHJlZ2ltZW4gYW5kIHRyZWF0bWVudCBvcHRpb25zCkBkZXNjcmlwdGlvbjogTWV0aGFkb25lIGN1cnJlbnRseSBiZWluZyB0YWtlbiBieSwgb3IgY29uc2lkZXJlZCBmb3IsIGNsaWVudAoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiTWV0aGFkb25lIEQuREU5MTUiOgogIGV4aXN0cyAiTWV0aGFkb25lIEQuREU5MTUgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJNZXRoYWRvbmUgRC5ERTkxNSBPYnNlcnZhdGlvbiIKZGVmaW5lICJNZXRoYWRvbmUgRC5ERTkxNSBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJNZXRoYWRvbmUgRC5ERTkxNSBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIk1ldGhhZG9uZSBELkRFOTE1IE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iTWV0aGFkb25lIEQuREU5MTUgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBNZXRoYWRvbmUgRC5ERTkxNSAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTkxNiAtIEJ1cHJlbm9ycGhpbmUKQGFjdGl2aXR5OiBISVYuRDIxIERldGVybWluZSByZWdpbWVuIGFuZCB0cmVhdG1lbnQgb3B0aW9ucwpAZGVzY3JpcHRpb246IEJ1cHJlbm9ycGhpbmUgY3VycmVudGx5IGJlaW5nIHRha2VuIGJ5LCBvciBjb25zaWRlcmVkIGZvciwgY2xpZW50CiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJCdXByZW5vcnBoaW5lIEQuREU5MTYiOgogIGV4aXN0cyAiQnVwcmVub3JwaGluZSBELkRFOTE2IENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiQnVwcmVub3JwaGluZSBELkRFOTE2IE9ic2VydmF0aW9uIgpkZWZpbmUgIkJ1cHJlbm9ycGhpbmUgRC5ERTkxNiBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJCdXByZW5vcnBoaW5lIEQuREU5MTYgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJCdXByZW5vcnBoaW5lIEQuREU5MTYgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJCdXByZW5vcnBoaW5lIEQuREU5MTYgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBCdXByZW5vcnBoaW5lIEQuREU5MTYgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREU5MTcgLSBEb2ZldGlsaWRlCkBhY3Rpdml0eTogSElWLkQyMSBEZXRlcm1pbmUgcmVnaW1lbiBhbmQgdHJlYXRtZW50IG9wdGlvbnMKQGRlc2NyaXB0aW9uOiBEb2ZldGlsaWRlIGN1cnJlbnRseSBiZWluZyB0YWtlbiBieSwgb3IgY29uc2lkZXJlZCBmb3IsIGNsaWVudAoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiRG9mZXRpbGlkZSI6CiAgZXhpc3RzICJEb2ZldGlsaWRlIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiRG9mZXRpbGlkZSBPYnNlcnZhdGlvbiIKZGVmaW5lICJEb2ZldGlsaWRlIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIkRvZmV0aWxpZGUgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJEb2ZldGlsaWRlIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iRG9mZXRpbGlkZSBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIERvZmV0aWxpZGUgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREU5MTggLSBDYXJiYW1hemVwaW5lCkBhY3Rpdml0eTogSElWLkQyMSBEZXRlcm1pbmUgcmVnaW1lbiBhbmQgdHJlYXRtZW50IG9wdGlvbnMKQGRlc2NyaXB0aW9uOiBDYXJiYW1hemVwaW5lIGN1cnJlbnRseSBiZWluZyB0YWtlbiBieSwgb3IgY29uc2lkZXJlZCBmb3IsIGNsaWVudAoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiQ2FyYmFtYXplcGluZSI6CiAgZXhpc3RzICJDYXJiYW1hemVwaW5lIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiQ2FyYmFtYXplcGluZSBPYnNlcnZhdGlvbiIKZGVmaW5lICJDYXJiYW1hemVwaW5lIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIkNhcmJhbWF6ZXBpbmUgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJDYXJiYW1hemVwaW5lIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iQ2FyYmFtYXplcGluZSBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIENhcmJhbWF6ZXBpbmUgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREU5MTkgLSBQaGVub2JhcmJpdGFsCkBhY3Rpdml0eTogSElWLkQyMSBEZXRlcm1pbmUgcmVnaW1lbiBhbmQgdHJlYXRtZW50IG9wdGlvbnMKQGRlc2NyaXB0aW9uOiBQaGVub2JhcmJpdGFsIGN1cnJlbnRseSBiZWluZyB0YWtlbiBieSwgb3IgY29uc2lkZXJlZCBmb3IsIGNsaWVudAoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiUGhlbm9iYXJiaXRhbCI6CiAgZXhpc3RzICJQaGVub2JhcmJpdGFsIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiUGhlbm9iYXJiaXRhbCBPYnNlcnZhdGlvbiIKZGVmaW5lICJQaGVub2JhcmJpdGFsIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIlBoZW5vYmFyYml0YWwgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJQaGVub2JhcmJpdGFsIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iUGhlbm9iYXJiaXRhbCBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIFBoZW5vYmFyYml0YWwgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREU5MjAgLSBQaGVueXRvaW4KQGFjdGl2aXR5OiBISVYuRDIxIERldGVybWluZSByZWdpbWVuIGFuZCB0cmVhdG1lbnQgb3B0aW9ucwpAZGVzY3JpcHRpb246IFBoZW55dG9pbiBjdXJyZW50bHkgYmVpbmcgdGFrZW4gYnksIG9yIGNvbnNpZGVyZWQgZm9yLCBjbGllbnQKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIlBoZW55dG9pbiI6CiAgZXhpc3RzICJQaGVueXRvaW4gQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJQaGVueXRvaW4gT2JzZXJ2YXRpb24iCmRlZmluZSAiUGhlbnl0b2luIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIlBoZW55dG9pbiBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIlBoZW55dG9pbiBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIlBoZW55dG9pbiBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIFBoZW55dG9pbiAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTkyMSAtIFBvbHl2YWxlbnQgY2F0aW9uIHByb2R1Y3RzIGNvbnRhaW5pbmcgTWcsIEFsLCBGZSwgQ2EgYW5kIFpuCkBhY3Rpdml0eTogSElWLkQyMSBEZXRlcm1pbmUgcmVnaW1lbiBhbmQgdHJlYXRtZW50IG9wdGlvbnMKQGRlc2NyaXB0aW9uOiBQb2x5dmFsZW50IGNhdGlvbiBwcm9kdWN0cyBjb250YWluaW5nIE1nLCBBbCwgRmUsIENhIGFuZCBabiBjdXJyZW50bHkgYmVpbmcgdGFrZW4gYnksIG9yIGNvbnNpZGVyZWQgZm9yLCBjbGllbnQKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIlBvbHl2YWxlbnQgY2F0aW9uIHByb2R1Y3RzIGNvbnRhaW5pbmcgTWcsIEFsLCBGZSwgQ2EgYW5kIFpuIjoKICBleGlzdHMgIlBvbHl2YWxlbnQgY2F0aW9uIHByb2R1Y3RzIGNvbnRhaW5pbmcgTWcsIEFsLCBGZSwgQ2EgYW5kIFpuIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiUG9seXZhbGVudCBjYXRpb24gcHJvZHVjdHMgY29udGFpbmluZyBNZywgQWwsIEZlLCBDYSBhbmQgWm4gT2JzZXJ2YXRpb24iCmRlZmluZSAiUG9seXZhbGVudCBjYXRpb24gcHJvZHVjdHMgY29udGFpbmluZyBNZywgQWwsIEZlLCBDYSBhbmQgWm4gQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iUG9seXZhbGVudCBjYXRpb24gcHJvZHVjdHMgY29udGFpbmluZyBNZywgQWwsIEZlLCBDYSBhbmQgWm4gQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJQb2x5dmFsZW50IGNhdGlvbiBwcm9kdWN0cyBjb250YWluaW5nIE1nLCBBbCwgRmUsIENhIGFuZCBabiBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIlBvbHl2YWxlbnQgY2F0aW9uIHByb2R1Y3RzIGNvbnRhaW5pbmcgTWcsIEFsLCBGZSwgQ2EgYW5kIFpuIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgUG9seXZhbGVudCBjYXRpb24gcHJvZHVjdHMgY29udGFpbmluZyBNZywgQWwsIEZlLCBDYSBhbmQgWm4gKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREU5MjIgLSBBbW9kaWFxdWluZQpAYWN0aXZpdHk6IEhJVi5EMjEgRGV0ZXJtaW5lIHJlZ2ltZW4gYW5kIHRyZWF0bWVudCBvcHRpb25zCkBkZXNjcmlwdGlvbjogQW1vZGlhcXVpbmUgY3VycmVudGx5IGJlaW5nIHRha2VuIGJ5LCBvciBjb25zaWRlcmVkIGZvciwgY2xpZW50CiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJBbW9kaWFxdWluZSI6CiAgZXhpc3RzICJBbW9kaWFxdWluZSBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIkFtb2RpYXF1aW5lIE9ic2VydmF0aW9uIgpkZWZpbmUgIkFtb2RpYXF1aW5lIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIkFtb2RpYXF1aW5lIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiQW1vZGlhcXVpbmUgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJBbW9kaWFxdWluZSBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIEFtb2RpYXF1aW5lICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFOTIzIC0gQ2lzYXByaWRlCkBhY3Rpdml0eTogSElWLkQyMSBEZXRlcm1pbmUgcmVnaW1lbiBhbmQgdHJlYXRtZW50IG9wdGlvbnMKQGRlc2NyaXB0aW9uOiBDaXNhcHJpZGUgY3VycmVudGx5IGJlaW5nIHRha2VuIGJ5LCBvciBjb25zaWRlcmVkIGZvciwgY2xpZW50CiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJDaXNhcHJpZGUiOgogIGV4aXN0cyAiQ2lzYXByaWRlIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiQ2lzYXByaWRlIE9ic2VydmF0aW9uIgpkZWZpbmUgIkNpc2FwcmlkZSBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJDaXNhcHJpZGUgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJDaXNhcHJpZGUgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJDaXNhcHJpZGUgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBDaXNhcHJpZGUgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREU5MjQgLSBFcmdvdGFtaW5lCkBhY3Rpdml0eTogSElWLkQyMSBEZXRlcm1pbmUgcmVnaW1lbiBhbmQgdHJlYXRtZW50IG9wdGlvbnMKQGRlc2NyaXB0aW9uOiBFcmdvdGFtaW5lIGN1cnJlbnRseSBiZWluZyB0YWtlbiBieSwgb3IgY29uc2lkZXJlZCBmb3IsIGNsaWVudAoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiRXJnb3RhbWluZSI6CiAgZXhpc3RzICJFcmdvdGFtaW5lIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiRXJnb3RhbWluZSBPYnNlcnZhdGlvbiIKZGVmaW5lICJFcmdvdGFtaW5lIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIkVyZ290YW1pbmUgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJFcmdvdGFtaW5lIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iRXJnb3RhbWluZSBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIEVyZ290YW1pbmUgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREU5MjUgLSBEaWh5ZHJvZXJnb3RhbWluZQpAYWN0aXZpdHk6IEhJVi5EMjEgRGV0ZXJtaW5lIHJlZ2ltZW4gYW5kIHRyZWF0bWVudCBvcHRpb25zCkBkZXNjcmlwdGlvbjogRGloeWRyb2VyZ290YW1pbmUgY3VycmVudGx5IGJlaW5nIHRha2VuIGJ5LCBvciBjb25zaWRlcmVkIGZvciwgY2xpZW50CiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJEaWh5ZHJvZXJnb3RhbWluZSI6CiAgZXhpc3RzICJEaWh5ZHJvZXJnb3RhbWluZSBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIkRpaHlkcm9lcmdvdGFtaW5lIE9ic2VydmF0aW9uIgpkZWZpbmUgIkRpaHlkcm9lcmdvdGFtaW5lIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIkRpaHlkcm9lcmdvdGFtaW5lIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiRGloeWRyb2VyZ290YW1pbmUgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJEaWh5ZHJvZXJnb3RhbWluZSBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIERpaHlkcm9lcmdvdGFtaW5lICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFOTI2IC0gTWlkYXpvbGFtCkBhY3Rpdml0eTogSElWLkQyMSBEZXRlcm1pbmUgcmVnaW1lbiBhbmQgdHJlYXRtZW50IG9wdGlvbnMKQGRlc2NyaXB0aW9uOiBNaWRhem9sYW0gY3VycmVudGx5IGJlaW5nIHRha2VuIGJ5LCBvciBjb25zaWRlcmVkIGZvciwgY2xpZW50CiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJNaWRhem9sYW0iOgogIGV4aXN0cyAiTWlkYXpvbGFtIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiTWlkYXpvbGFtIE9ic2VydmF0aW9uIgpkZWZpbmUgIk1pZGF6b2xhbSBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJNaWRhem9sYW0gQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJNaWRhem9sYW0gT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJNaWRhem9sYW0gT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBNaWRhem9sYW0gKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREU5MjcgLSBUcmlhem9sYW0KQGFjdGl2aXR5OiBISVYuRDIxIERldGVybWluZSByZWdpbWVuIGFuZCB0cmVhdG1lbnQgb3B0aW9ucwpAZGVzY3JpcHRpb246IFRyaWF6b2xhbSBjdXJyZW50bHkgYmVpbmcgdGFrZW4gYnksIG9yIGNvbnNpZGVyZWQgZm9yLCBjbGllbnQKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIlRyaWF6b2xhbSI6CiAgZXhpc3RzICJUcmlhem9sYW0gQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJUcmlhem9sYW0gT2JzZXJ2YXRpb24iCmRlZmluZSAiVHJpYXpvbGFtIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIlRyaWF6b2xhbSBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIlRyaWF6b2xhbSBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIlRyaWF6b2xhbSBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIFRyaWF6b2xhbSAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTkyOCAtIEVzdHJvZ2VuLWJhc2VkIGhvcm1vbmFsIGNvbnRyYWNlcHRpb24KQGFjdGl2aXR5OiBISVYuRDIxIERldGVybWluZSByZWdpbWVuIGFuZCB0cmVhdG1lbnQgb3B0aW9ucwpAZGVzY3JpcHRpb246IEVzdHJvZ2VuLWJhc2VkIGhvcm1vbmFsIGNvbnRyYWNlcHRpb24gY3VycmVudGx5IGJlaW5nIHRha2VuIGJ5LCBvciBjb25zaWRlcmVkIGZvciwgY2xpZW50CiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJFc3Ryb2dlbi1iYXNlZCBob3Jtb25hbCBjb250cmFjZXB0aW9uIjoKICBleGlzdHMgIkVzdHJvZ2VuLWJhc2VkIGhvcm1vbmFsIGNvbnRyYWNlcHRpb24gQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJFc3Ryb2dlbi1iYXNlZCBob3Jtb25hbCBjb250cmFjZXB0aW9uIE9ic2VydmF0aW9uIgpkZWZpbmUgIkVzdHJvZ2VuLWJhc2VkIGhvcm1vbmFsIGNvbnRyYWNlcHRpb24gQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iRXN0cm9nZW4tYmFzZWQgaG9ybW9uYWwgY29udHJhY2VwdGlvbiBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIkVzdHJvZ2VuLWJhc2VkIGhvcm1vbmFsIGNvbnRyYWNlcHRpb24gT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJFc3Ryb2dlbi1iYXNlZCBob3Jtb25hbCBjb250cmFjZXB0aW9uIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgRXN0cm9nZW4tYmFzZWQgaG9ybW9uYWwgY29udHJhY2VwdGlvbiAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTkyOSAtIFJpYmF2aXJpbgpAYWN0aXZpdHk6IEhJVi5EMjEgRGV0ZXJtaW5lIHJlZ2ltZW4gYW5kIHRyZWF0bWVudCBvcHRpb25zCkBkZXNjcmlwdGlvbjogUmliYXZpcmluIGN1cnJlbnRseSBiZWluZyB0YWtlbiBieSwgb3IgY29uc2lkZXJlZCBmb3IsIGNsaWVudAoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiUmliYXZpcmluIjoKICBleGlzdHMgIlJpYmF2aXJpbiBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIlJpYmF2aXJpbiBPYnNlcnZhdGlvbiIKZGVmaW5lICJSaWJhdmlyaW4gQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iUmliYXZpcmluIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiUmliYXZpcmluIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iUmliYXZpcmluIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgUmliYXZpcmluICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFOTMwIC0gUGVnaW50ZXJmZXJvbiBhbGZhLTJhCkBhY3Rpdml0eTogSElWLkQyMSBEZXRlcm1pbmUgcmVnaW1lbiBhbmQgdHJlYXRtZW50IG9wdGlvbnMKQGRlc2NyaXB0aW9uOiBQZWdpbnRlcmZlcm9uIGFsZmEtMmEgY3VycmVudGx5IGJlaW5nIHRha2VuIGJ5LCBvciBjb25zaWRlcmVkIGZvciwgY2xpZW50CiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJQZWdpbnRlcmZlcm9uIGFsZmEtMmEiOgogIGV4aXN0cyAiUGVnaW50ZXJmZXJvbiBhbGZhLTJhIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiUGVnaW50ZXJmZXJvbiBhbGZhLTJhIE9ic2VydmF0aW9uIgpkZWZpbmUgIlBlZ2ludGVyZmVyb24gYWxmYS0yYSBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJQZWdpbnRlcmZlcm9uIGFsZmEtMmEgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJQZWdpbnRlcmZlcm9uIGFsZmEtMmEgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJQZWdpbnRlcmZlcm9uIGFsZmEtMmEgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBQZWdpbnRlcmZlcm9uIGFsZmEtMmEgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREU5MzEgLSBPdGhlcgpAYWN0aXZpdHk6IEhJVi5EMjEgRGV0ZXJtaW5lIHJlZ2ltZW4gYW5kIHRyZWF0bWVudCBvcHRpb25zCkBkZXNjcmlwdGlvbjogT3RoZXIgbWVkaWNhdGlvbiBjdXJyZW50bHkgYmVpbmcgdGFrZW4gYnksIG9yIGNvbnNpZGVyZWQgZm9yLCBjbGllbnQKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIk90aGVyIEQuREU5MzEiOgogIGV4aXN0cyAiT3RoZXIgRC5ERTkzMSBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIk90aGVyIEQuREU5MzEgT2JzZXJ2YXRpb24iCmRlZmluZSAiT3RoZXIgRC5ERTkzMSBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJPdGhlciBELkRFOTMxIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiT3RoZXIgRC5ERTkzMSBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIk90aGVyIEQuREU5MzEgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBPdGhlciBELkRFOTMxICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFOTMzIC0gTWVkaWNhdGlvbiBjaGFuZ2UgcmVjb21tZW5kZWQKQGFjdGl2aXR5OiBISVYuRDIxIERldGVybWluZSByZWdpbWVuIGFuZCB0cmVhdG1lbnQgb3B0aW9ucwpAZGVzY3JpcHRpb246IEEgbWVkaWNhdGlvbiBjaGFuZ2UgaXMgcmVjb21tZW5kZWQgZm9yIHRoZSBjbGllbnQgYmFzZWQgdXBvbiBjdXJyZW50IG9yIGNvbnNpZGVyZWQgbWVkaWNhdGlvbnMKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIk1lZGljYXRpb24gY2hhbmdlIHJlY29tbWVuZGVkIjoKICBleGlzdHMgIk1lZGljYXRpb24gY2hhbmdlIHJlY29tbWVuZGVkIE9ic2VydmF0aW9uIgpkZWZpbmUgIk1lZGljYXRpb24gY2hhbmdlIHJlY29tbWVuZGVkIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iTWVkaWNhdGlvbiBjaGFuZ2UgcmVjb21tZW5kZWQgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBNZWRpY2F0aW9uIGNoYW5nZSByZWNvbW1lbmRlZCAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTkzNCAtIFdITyBISVYgY2xpbmljYWwgc3RhZ2UgY29uZGl0aW9uIG9yIHN5bXB0b20KQGFjdGl2aXR5OiBISVYuRDE1IERldGVybWluZSBjbGluaWNhbCBzdGFnZSBvZiBISVYKQGRlc2NyaXB0aW9uOiBOZXcgb3IgcmVjdXJyZW50IGNsaW5pY2FsIGV2ZW50cyB1c2VkIHRvIGNhdGVnb3JpemUgSElWIGRpc2Vhc2Ugc2V2ZXJpdHkgYmFzZWQgYXQgYmFzZWxpbmUgYW5kIGZvbGxvdyB1cAoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiV0hPIEhJViBjbGluaWNhbCBzdGFnZSBjb25kaXRpb24gb3Igc3ltcHRvbSBELkRFOTM0IjoKICBleGlzdHMgIldITyBISVYgY2xpbmljYWwgc3RhZ2UgY29uZGl0aW9uIG9yIHN5bXB0b20gRC5ERTkzNCBPYnNlcnZhdGlvbiIKZGVmaW5lICJXSE8gSElWIGNsaW5pY2FsIHN0YWdlIGNvbmRpdGlvbiBvciBzeW1wdG9tIEQuREU5MzQgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJXSE8gSElWIGNsaW5pY2FsIHN0YWdlIGNvbmRpdGlvbiBvciBzeW1wdG9tIEQuREU5MzQgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBXSE8gSElWIGNsaW5pY2FsIHN0YWdlIGNvbmRpdGlvbiBvciBzeW1wdG9tIEQuREU5MzQgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREU5MzUgLSBQdWxtb25hcnkgVEIKQGFjdGl2aXR5OiBISVYuRDE1IERldGVybWluZSBjbGluaWNhbCBzdGFnZSBvZiBISVYKQGRlc2NyaXB0aW9uOiBDbGllbnQncyBzeW1wdG9tcyBpbmNsdWRlIHB1bG1vbmFyeSBUQgoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiUHVsbW9uYXJ5IFRCIEQuREU5MzUiOgogIGV4aXN0cyAiUHVsbW9uYXJ5IFRCIEQuREU5MzUgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJQdWxtb25hcnkgVEIgRC5ERTkzNSBPYnNlcnZhdGlvbiIKZGVmaW5lICJQdWxtb25hcnkgVEIgRC5ERTkzNSBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJQdWxtb25hcnkgVEIgRC5ERTkzNSBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIlB1bG1vbmFyeSBUQiBELkRFOTM1IE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iUHVsbW9uYXJ5IFRCIEQuREU5MzUgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBQdWxtb25hcnkgVEIgRC5ERTkzNSAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTkzNiAtIEx5bXBoIG5vZGUgVEIKQGFjdGl2aXR5OiBISVYuRDE1IERldGVybWluZSBjbGluaWNhbCBzdGFnZSBvZiBISVYKQGRlc2NyaXB0aW9uOiBDbGllbnQncyBzeW1wdG9tcyBpbmNsdWRlIGx5bXBoIG5vZGUgVEIKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkx5bXBoIG5vZGUgVEIgRC5ERTkzNiI6CiAgZXhpc3RzICJMeW1waCBub2RlIFRCIEQuREU5MzYgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJMeW1waCBub2RlIFRCIEQuREU5MzYgT2JzZXJ2YXRpb24iCmRlZmluZSAiTHltcGggbm9kZSBUQiBELkRFOTM2IENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIkx5bXBoIG5vZGUgVEIgRC5ERTkzNiBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIkx5bXBoIG5vZGUgVEIgRC5ERTkzNiBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkx5bXBoIG5vZGUgVEIgRC5ERTkzNiBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIEx5bXBoIG5vZGUgVEIgRC5ERTkzNiAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTkzNyAtIEV4dHJhcHVsbW9uYXJ5IFRCCkBhY3Rpdml0eTogSElWLkQxNSBEZXRlcm1pbmUgY2xpbmljYWwgc3RhZ2Ugb2YgSElWCkBkZXNjcmlwdGlvbjogQ2xpZW50J3Mgc3ltcHRvbXMgaW5jbHVkZSBleHRyYXB1bG1vbmFyeSB0dWJlcmN1bG9zaXMgKFRCKQoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiRXh0cmFwdWxtb25hcnkgVEIgRC5ERTkzNyI6CiAgZXhpc3RzICJFeHRyYXB1bG1vbmFyeSBUQiBELkRFOTM3IENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiRXh0cmFwdWxtb25hcnkgVEIgRC5ERTkzNyBPYnNlcnZhdGlvbiIKZGVmaW5lICJFeHRyYXB1bG1vbmFyeSBUQiBELkRFOTM3IENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIkV4dHJhcHVsbW9uYXJ5IFRCIEQuREU5MzcgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJFeHRyYXB1bG1vbmFyeSBUQiBELkRFOTM3IE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iRXh0cmFwdWxtb25hcnkgVEIgRC5ERTkzNyBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIEV4dHJhcHVsbW9uYXJ5IFRCIEQuREU5MzcgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREU5MzkgLSBUQiBkaWFnbm9zaXMgcmVzdWx0CkBhY3Rpdml0eTogSElWLkQ4IENhcHR1cmUgb3IgdXBkYXRlIGNsaWVudCBoaXN0b3J5CkBkZXNjcmlwdGlvbjogRmluYWwgcmVzdWx0IG9mIHRoZSBUQiBpbnZlc3RpZ2F0aW9uIChiYWN0ZXJpb2xvZ2ljYWwgYW5kL29yIGNsaW5pY2FsKQoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiVEIgZGlhZ25vc2lzIHJlc3VsdCI6CiAgZXhpc3RzICJUQiBkaWFnbm9zaXMgcmVzdWx0IE9ic2VydmF0aW9uIgpkZWZpbmUgIlRCIGRpYWdub3NpcyByZXN1bHQgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJUQiBkaWFnbm9zaXMgcmVzdWx0IE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgVEIgZGlhZ25vc2lzIHJlc3VsdCAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTk0MCAtIERpYWdub3NlZCBUQgpAYWN0aXZpdHk6IEhJVi5EOCBDYXB0dXJlIG9yIHVwZGF0ZSBjbGllbnQgaGlzdG9yeQpAZGVzY3JpcHRpb246IENsaWVudCBpcyBkaWFnbm9zZWQgd2l0aCBUQiBkaXNlYXNlCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJEaWFnbm9zZWQgVEIiOgogIGV4aXN0cyAiRGlhZ25vc2VkIFRCIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiRGlhZ25vc2VkIFRCIE9ic2VydmF0aW9uIgpkZWZpbmUgIkRpYWdub3NlZCBUQiBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJEaWFnbm9zZWQgVEIgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJEaWFnbm9zZWQgVEIgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJEaWFnbm9zZWQgVEIgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBEaWFnbm9zZWQgVEIgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREU5NDEgLSBUQiBleGNsdWRlZApAYWN0aXZpdHk6IEhJVi5EOCBDYXB0dXJlIG9yIHVwZGF0ZSBjbGllbnQgaGlzdG9yeQpAZGVzY3JpcHRpb246IENsaWVudCBpcyBub3QgZGlhZ25vc2VkIHdpdGggVEIKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIlRCIGV4Y2x1ZGVkIjoKICBleGlzdHMgIlRCIGV4Y2x1ZGVkIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiVEIgZXhjbHVkZWQgT2JzZXJ2YXRpb24iCmRlZmluZSAiVEIgZXhjbHVkZWQgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iVEIgZXhjbHVkZWQgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJUQiBleGNsdWRlZCBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIlRCIGV4Y2x1ZGVkIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgVEIgZXhjbHVkZWQgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREU5NDUgLSBQcmVzdW1wdGl2ZSBUQgpAYWN0aXZpdHk6IEhJVi5EOCBDYXB0dXJlIG9yIHVwZGF0ZSBjbGllbnQgaGlzdG9yeQpAZGVzY3JpcHRpb246IENsaWVudCBoYXMgc2lnbnMgb3Igc3ltcHRvbXMgb2YgdHViZXJjdWxvc2lzIChUQikgd2l0aG91dCBsYWJvcmF0b3J5IGNvbmZpcm1hdGlvbgoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiUHJlc3VtcHRpdmUgVEIgRC5ERTk0NSI6CiAgZXhpc3RzICJQcmVzdW1wdGl2ZSBUQiBELkRFOTQ1IE9ic2VydmF0aW9uIgpkZWZpbmUgIlByZXN1bXB0aXZlIFRCIEQuREU5NDUgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJQcmVzdW1wdGl2ZSBUQiBELkRFOTQ1IE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgUHJlc3VtcHRpdmUgVEIgRC5ERTk0NSAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTk1NiAtIFRCIHNjcmVlbmluZyBhbGdvcml0aG0KQGFjdGl2aXR5OiBISVYuRDQgU2NyZWVuIGZvciBUQgpAZGVzY3JpcHRpb246IFNjcmVlbmluZyBhbGdvcml0aG0gc2VsZWN0ZWQgZm9yIHNjcmVlbmluZyBhY3Rpdml0aWVzCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJUQiBzY3JlZW5pbmcgYWxnb3JpdGhtIjoKICBleGlzdHMgIlRCIHNjcmVlbmluZyBhbGdvcml0aG0gT2JzZXJ2YXRpb24iCmRlZmluZSAiVEIgc2NyZWVuaW5nIGFsZ29yaXRobSBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIlRCIHNjcmVlbmluZyBhbGdvcml0aG0gT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBUQiBzY3JlZW5pbmcgYWxnb3JpdGhtICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFOTU3IC0gU2NyZWVuaW5nIHdpdGggY291Z2gKQGFjdGl2aXR5OiBISVYuRDQgU2NyZWVuIGZvciBUQgpAZGVzY3JpcHRpb246IENsaWVudCBzY3JlZW5lZCBmb3IgVEIgYmFzZWQgb24gY291Z2ggc3ltcHRvbQoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiU2NyZWVuaW5nIHdpdGggY291Z2giOgogIGV4aXN0cyAiU2NyZWVuaW5nIHdpdGggY291Z2ggQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJTY3JlZW5pbmcgd2l0aCBjb3VnaCBPYnNlcnZhdGlvbiIKZGVmaW5lICJTY3JlZW5pbmcgd2l0aCBjb3VnaCBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJTY3JlZW5pbmcgd2l0aCBjb3VnaCBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIlNjcmVlbmluZyB3aXRoIGNvdWdoIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iU2NyZWVuaW5nIHdpdGggY291Z2ggT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBTY3JlZW5pbmcgd2l0aCBjb3VnaCAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTk1OCAtIFNjcmVlbmluZyB3aXRoIGFueSBUQiBzeW1wdG9tCkBhY3Rpdml0eTogSElWLkQ0IFNjcmVlbiBmb3IgVEIKQGRlc2NyaXB0aW9uOiBDbGllbnQgc2NyZWVuZWQgZm9yIFRCIGJhc2VkIG9uIGFueSBUQiBzeW1wdG9tCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJTY3JlZW5pbmcgd2l0aCBhbnkgVEIgc3ltcHRvbSI6CiAgZXhpc3RzICJTY3JlZW5pbmcgd2l0aCBhbnkgVEIgc3ltcHRvbSBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIlNjcmVlbmluZyB3aXRoIGFueSBUQiBzeW1wdG9tIE9ic2VydmF0aW9uIgpkZWZpbmUgIlNjcmVlbmluZyB3aXRoIGFueSBUQiBzeW1wdG9tIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIlNjcmVlbmluZyB3aXRoIGFueSBUQiBzeW1wdG9tIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiU2NyZWVuaW5nIHdpdGggYW55IFRCIHN5bXB0b20gT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJTY3JlZW5pbmcgd2l0aCBhbnkgVEIgc3ltcHRvbSBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIFNjcmVlbmluZyB3aXRoIGFueSBUQiBzeW1wdG9tICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFOTU5IC0gVzRTUyBzaW5nbGUgc2NyZWVuaW5nIGFsZ29yaXRobQpAYWN0aXZpdHk6IEhJVi5ENCBTY3JlZW4gZm9yIFRCCkBkZXNjcmlwdGlvbjogQ2xpZW50IHNjcmVlbmVkIGZvciBUQiBiYXNlZCBvbiB0aGUgV0hPLXJlY29tbWVuZGVkIGZvdXItc3ltcHRvbSBzY3JlZW4KKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIlc0U1Mgc2luZ2xlIHNjcmVlbmluZyBhbGdvcml0aG0iOgogIGV4aXN0cyAiVzRTUyBzaW5nbGUgc2NyZWVuaW5nIGFsZ29yaXRobSBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIlc0U1Mgc2luZ2xlIHNjcmVlbmluZyBhbGdvcml0aG0gT2JzZXJ2YXRpb24iCmRlZmluZSAiVzRTUyBzaW5nbGUgc2NyZWVuaW5nIGFsZ29yaXRobSBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJXNFNTIHNpbmdsZSBzY3JlZW5pbmcgYWxnb3JpdGhtIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiVzRTUyBzaW5nbGUgc2NyZWVuaW5nIGFsZ29yaXRobSBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIlc0U1Mgc2luZ2xlIHNjcmVlbmluZyBhbGdvcml0aG0gT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBXNFNTIHNpbmdsZSBzY3JlZW5pbmcgYWxnb3JpdGhtICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFOTYwIC0gQ1JQIHNpbmdsZSBzY3JlZW5pbmcgYWxnb3JpdGhtCkBhY3Rpdml0eTogSElWLkQ0IFNjcmVlbiBmb3IgVEIKQGRlc2NyaXB0aW9uOiBDbGllbnQgc2NyZWVuZWQgZm9yIFRCIGJhc2VkIG9uIEMtcmVhY3RpdmUgcHJvdGVpbiAoQ1JQKSB0ZXN0aW5nCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJDUlAgc2luZ2xlIHNjcmVlbmluZyBhbGdvcml0aG0iOgogIGV4aXN0cyAiQ1JQIHNpbmdsZSBzY3JlZW5pbmcgYWxnb3JpdGhtIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiQ1JQIHNpbmdsZSBzY3JlZW5pbmcgYWxnb3JpdGhtIE9ic2VydmF0aW9uIgpkZWZpbmUgIkNSUCBzaW5nbGUgc2NyZWVuaW5nIGFsZ29yaXRobSBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJDUlAgc2luZ2xlIHNjcmVlbmluZyBhbGdvcml0aG0gQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJDUlAgc2luZ2xlIHNjcmVlbmluZyBhbGdvcml0aG0gT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJDUlAgc2luZ2xlIHNjcmVlbmluZyBhbGdvcml0aG0gT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBDUlAgc2luZ2xlIHNjcmVlbmluZyBhbGdvcml0aG0gKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREU5NjEgLSBDWFIgc2luZ2xlIHNjcmVlbmluZyBhbGdvcml0aG0KQGFjdGl2aXR5OiBISVYuRDQgU2NyZWVuIGZvciBUQgpAZGVzY3JpcHRpb246IENsaWVudCBzY3JlZW5lZCBmb3IgVEIgd2l0aCBhIGNoZXN0IHJhZGlvZ3JhcGh5IChDWFIpCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJDWFIgc2luZ2xlIHNjcmVlbmluZyBhbGdvcml0aG0iOgogIGV4aXN0cyAiQ1hSIHNpbmdsZSBzY3JlZW5pbmcgYWxnb3JpdGhtIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiQ1hSIHNpbmdsZSBzY3JlZW5pbmcgYWxnb3JpdGhtIE9ic2VydmF0aW9uIgpkZWZpbmUgIkNYUiBzaW5nbGUgc2NyZWVuaW5nIGFsZ29yaXRobSBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJDWFIgc2luZ2xlIHNjcmVlbmluZyBhbGdvcml0aG0gQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJDWFIgc2luZ2xlIHNjcmVlbmluZyBhbGdvcml0aG0gT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJDWFIgc2luZ2xlIHNjcmVlbmluZyBhbGdvcml0aG0gT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBDWFIgc2luZ2xlIHNjcmVlbmluZyBhbGdvcml0aG0gKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREU5NjIgLSBQYXJhbGxlbCBzY3JlZW5pbmcgYWxnb3JpdGhtIHdpdGggVzRTUyBhbmQgQ1JQCkBhY3Rpdml0eTogSElWLkQ0IFNjcmVlbiBmb3IgVEIKQGRlc2NyaXB0aW9uOiBDbGllbnQgc2NyZWVuZWQgZm9yIFRCIHVzaW5nIHBhcmFsbGVsIHNjcmVlbmluZyB3aXRoIFdITy1yZWNvbW1lbmRlZCBmb3VyLXN5bXB0b20gc2NyZWVuIGFuZCBDLXJlYWN0aXZlIHByb3RlaW4gKENSUCkgdGVzdGluZwoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiUGFyYWxsZWwgc2NyZWVuaW5nIGFsZ29yaXRobSB3aXRoIFc0U1MgYW5kIENSUCI6CiAgZXhpc3RzICJQYXJhbGxlbCBzY3JlZW5pbmcgYWxnb3JpdGhtIHdpdGggVzRTUyBhbmQgQ1JQIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiUGFyYWxsZWwgc2NyZWVuaW5nIGFsZ29yaXRobSB3aXRoIFc0U1MgYW5kIENSUCBPYnNlcnZhdGlvbiIKZGVmaW5lICJQYXJhbGxlbCBzY3JlZW5pbmcgYWxnb3JpdGhtIHdpdGggVzRTUyBhbmQgQ1JQIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIlBhcmFsbGVsIHNjcmVlbmluZyBhbGdvcml0aG0gd2l0aCBXNFNTIGFuZCBDUlAgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJQYXJhbGxlbCBzY3JlZW5pbmcgYWxnb3JpdGhtIHdpdGggVzRTUyBhbmQgQ1JQIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iUGFyYWxsZWwgc2NyZWVuaW5nIGFsZ29yaXRobSB3aXRoIFc0U1MgYW5kIENSUCBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIFBhcmFsbGVsIHNjcmVlbmluZyBhbGdvcml0aG0gd2l0aCBXNFNTIGFuZCBDUlAgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREU5NjMgLSBTZXF1ZW50aWFsIHBvc2l0aXZlIHNjcmVlbmluZyBhbGdvcml0aG0gd2l0aCBXNFNTIGFuZCBDUlAKQGFjdGl2aXR5OiBISVYuRDQgU2NyZWVuIGZvciBUQgpAZGVzY3JpcHRpb246IENsaWVudCBzY3JlZW5lZCBmb3IgVEIgdXNpbmcgc2VxdWVudGlhbCBwb3NpdGl2ZSBzY3JlZW5pbmcgd2l0aCBXSE8tcmVjb21tZW5kZWQgZm91ci1zeW1wdG9tIHNjcmVlbiBhbmQgQy1yZWFjdGl2ZSBwcm90ZWluIChDUlApIHRlc3RpbmcuCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJTZXF1ZW50aWFsIHBvc2l0aXZlIHNjcmVlbmluZyBhbGdvcml0aG0gd2l0aCBXNFNTIGFuZCBDUlAiOgogIGV4aXN0cyAiU2VxdWVudGlhbCBwb3NpdGl2ZSBzY3JlZW5pbmcgYWxnb3JpdGhtIHdpdGggVzRTUyBhbmQgQ1JQIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiU2VxdWVudGlhbCBwb3NpdGl2ZSBzY3JlZW5pbmcgYWxnb3JpdGhtIHdpdGggVzRTUyBhbmQgQ1JQIE9ic2VydmF0aW9uIgpkZWZpbmUgIlNlcXVlbnRpYWwgcG9zaXRpdmUgc2NyZWVuaW5nIGFsZ29yaXRobSB3aXRoIFc0U1MgYW5kIENSUCBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJTZXF1ZW50aWFsIHBvc2l0aXZlIHNjcmVlbmluZyBhbGdvcml0aG0gd2l0aCBXNFNTIGFuZCBDUlAgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJTZXF1ZW50aWFsIHBvc2l0aXZlIHNjcmVlbmluZyBhbGdvcml0aG0gd2l0aCBXNFNTIGFuZCBDUlAgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJTZXF1ZW50aWFsIHBvc2l0aXZlIHNjcmVlbmluZyBhbGdvcml0aG0gd2l0aCBXNFNTIGFuZCBDUlAgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBTZXF1ZW50aWFsIHBvc2l0aXZlIHNjcmVlbmluZyBhbGdvcml0aG0gd2l0aCBXNFNTIGFuZCBDUlAgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREU5NjQgLSBTZXF1ZW50aWFsIG5lZ2F0aXZlIHNjcmVlbmluZyBhbGdvcml0aG0gd2l0aCBXNFNTIGFuZCBDUlAKQGFjdGl2aXR5OiBISVYuRDQgU2NyZWVuIGZvciBUQgpAZGVzY3JpcHRpb246IENsaWVudCBzY3JlZW5lZCBmb3IgVEIgdXNpbmcgc2VxdWVudGlhbCBuZWdhdGl2ZSBzY3JlZW5pbmcgd2l0aCBXSE8tcmVjb21tZW5kZWQgZm91ci1zeW1wdG9tIHNjcmVlbiBhbmQgQy1yZWFjdGl2ZSBwcm90ZWluIChDUlApIHRlc3RpbmcKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIlNlcXVlbnRpYWwgbmVnYXRpdmUgc2NyZWVuaW5nIGFsZ29yaXRobSB3aXRoIFc0U1MgYW5kIENSUCI6CiAgZXhpc3RzICJTZXF1ZW50aWFsIG5lZ2F0aXZlIHNjcmVlbmluZyBhbGdvcml0aG0gd2l0aCBXNFNTIGFuZCBDUlAgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJTZXF1ZW50aWFsIG5lZ2F0aXZlIHNjcmVlbmluZyBhbGdvcml0aG0gd2l0aCBXNFNTIGFuZCBDUlAgT2JzZXJ2YXRpb24iCmRlZmluZSAiU2VxdWVudGlhbCBuZWdhdGl2ZSBzY3JlZW5pbmcgYWxnb3JpdGhtIHdpdGggVzRTUyBhbmQgQ1JQIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIlNlcXVlbnRpYWwgbmVnYXRpdmUgc2NyZWVuaW5nIGFsZ29yaXRobSB3aXRoIFc0U1MgYW5kIENSUCBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIlNlcXVlbnRpYWwgbmVnYXRpdmUgc2NyZWVuaW5nIGFsZ29yaXRobSB3aXRoIFc0U1MgYW5kIENSUCBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIlNlcXVlbnRpYWwgbmVnYXRpdmUgc2NyZWVuaW5nIGFsZ29yaXRobSB3aXRoIFc0U1MgYW5kIENSUCBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIFNlcXVlbnRpYWwgbmVnYXRpdmUgc2NyZWVuaW5nIGFsZ29yaXRobSB3aXRoIFc0U1MgYW5kIENSUCAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTk2NSAtIFBhcmFsbGVsIHNjcmVlbmluZyBhbGdvcml0aG0gd2l0aCBXNFNTIGFuZCBDWFIKQGFjdGl2aXR5OiBISVYuRDQgU2NyZWVuIGZvciBUQgpAZGVzY3JpcHRpb246IENsaWVudCBzY3JlZW5lZCBmb3IgVEIgdXNpbmcgdGhlIHBhcmFsbGVsIHNjcmVlbmluZyBhbGdvcml0aG0gd2l0aCBXNFNTIGFuZCBDWFIKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIlBhcmFsbGVsIHNjcmVlbmluZyBhbGdvcml0aG0gd2l0aCBXNFNTIGFuZCBDWFIiOgogIGV4aXN0cyAiUGFyYWxsZWwgc2NyZWVuaW5nIGFsZ29yaXRobSB3aXRoIFc0U1MgYW5kIENYUiBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIlBhcmFsbGVsIHNjcmVlbmluZyBhbGdvcml0aG0gd2l0aCBXNFNTIGFuZCBDWFIgT2JzZXJ2YXRpb24iCmRlZmluZSAiUGFyYWxsZWwgc2NyZWVuaW5nIGFsZ29yaXRobSB3aXRoIFc0U1MgYW5kIENYUiBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJQYXJhbGxlbCBzY3JlZW5pbmcgYWxnb3JpdGhtIHdpdGggVzRTUyBhbmQgQ1hSIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiUGFyYWxsZWwgc2NyZWVuaW5nIGFsZ29yaXRobSB3aXRoIFc0U1MgYW5kIENYUiBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIlBhcmFsbGVsIHNjcmVlbmluZyBhbGdvcml0aG0gd2l0aCBXNFNTIGFuZCBDWFIgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBQYXJhbGxlbCBzY3JlZW5pbmcgYWxnb3JpdGhtIHdpdGggVzRTUyBhbmQgQ1hSICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFOTY2IC0gU2VxdWVudGlhbCBwb3NpdGl2ZSBzY3JlZW5pbmcgYWxnb3JpdGhtIHdpdGggVzRTUyBhbmQgQ1hSCkBhY3Rpdml0eTogSElWLkQ0IFNjcmVlbiBmb3IgVEIKQGRlc2NyaXB0aW9uOiBDbGllbnQgc2NyZWVuZWQgZm9yIFRCIHVzaW5nIHNlcXVlbnRpYWwgcG9zaXRpdmUgc2NyZWVuaW5nIHdpdGggV0hPLXJlY29tbWVuZGVkIGZvdXItc3ltcHRvbSBzY3JlZW4gYW5kIGNoZXN0IHJhZGlvZ3JhcGh5CiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJTZXF1ZW50aWFsIHBvc2l0aXZlIHNjcmVlbmluZyBhbGdvcml0aG0gd2l0aCBXNFNTIGFuZCBDWFIiOgogIGV4aXN0cyAiU2VxdWVudGlhbCBwb3NpdGl2ZSBzY3JlZW5pbmcgYWxnb3JpdGhtIHdpdGggVzRTUyBhbmQgQ1hSIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiU2VxdWVudGlhbCBwb3NpdGl2ZSBzY3JlZW5pbmcgYWxnb3JpdGhtIHdpdGggVzRTUyBhbmQgQ1hSIE9ic2VydmF0aW9uIgpkZWZpbmUgIlNlcXVlbnRpYWwgcG9zaXRpdmUgc2NyZWVuaW5nIGFsZ29yaXRobSB3aXRoIFc0U1MgYW5kIENYUiBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJTZXF1ZW50aWFsIHBvc2l0aXZlIHNjcmVlbmluZyBhbGdvcml0aG0gd2l0aCBXNFNTIGFuZCBDWFIgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJTZXF1ZW50aWFsIHBvc2l0aXZlIHNjcmVlbmluZyBhbGdvcml0aG0gd2l0aCBXNFNTIGFuZCBDWFIgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJTZXF1ZW50aWFsIHBvc2l0aXZlIHNjcmVlbmluZyBhbGdvcml0aG0gd2l0aCBXNFNTIGFuZCBDWFIgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBTZXF1ZW50aWFsIHBvc2l0aXZlIHNjcmVlbmluZyBhbGdvcml0aG0gd2l0aCBXNFNTIGFuZCBDWFIgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREU5NjcgLSBTZXF1ZW50aWFsIG5lZ2F0aXZlIHNjcmVlbmluZyBhbGdvcml0aG0gd2l0aCBXNFNTIGFuZCBDWFIKQGFjdGl2aXR5OiBISVYuRDQgU2NyZWVuIGZvciBUQgpAZGVzY3JpcHRpb246IENsaWVudCBzY3JlZW5lZCBmb3IgVEIgdXNpbmcgc2VxdWVudGlhbCBuZWdhdGl2ZSBzY3JlZW5pbmcgd2l0aCBXSE8tcmVjb21tZW5kZWQgZm91ci1zeW1wdG9tIHNjcmVlbiBhbmQgY2hlc3QgcmFkaW9ncmFwaHkKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIlNlcXVlbnRpYWwgbmVnYXRpdmUgc2NyZWVuaW5nIGFsZ29yaXRobSB3aXRoIFc0U1MgYW5kIENYUiI6CiAgZXhpc3RzICJTZXF1ZW50aWFsIG5lZ2F0aXZlIHNjcmVlbmluZyBhbGdvcml0aG0gd2l0aCBXNFNTIGFuZCBDWFIgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJTZXF1ZW50aWFsIG5lZ2F0aXZlIHNjcmVlbmluZyBhbGdvcml0aG0gd2l0aCBXNFNTIGFuZCBDWFIgT2JzZXJ2YXRpb24iCmRlZmluZSAiU2VxdWVudGlhbCBuZWdhdGl2ZSBzY3JlZW5pbmcgYWxnb3JpdGhtIHdpdGggVzRTUyBhbmQgQ1hSIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIlNlcXVlbnRpYWwgbmVnYXRpdmUgc2NyZWVuaW5nIGFsZ29yaXRobSB3aXRoIFc0U1MgYW5kIENYUiBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIlNlcXVlbnRpYWwgbmVnYXRpdmUgc2NyZWVuaW5nIGFsZ29yaXRobSB3aXRoIFc0U1MgYW5kIENYUiBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIlNlcXVlbnRpYWwgbmVnYXRpdmUgc2NyZWVuaW5nIGFsZ29yaXRobSB3aXRoIFc0U1MgYW5kIENYUiBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIFNlcXVlbnRpYWwgbmVnYXRpdmUgc2NyZWVuaW5nIGFsZ29yaXRobSB3aXRoIFc0U1MgYW5kIENYUiAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTk2OCAtIFNjcmVlbmluZyB3aXRoIG1XUkQKQGFjdGl2aXR5OiBISVYuRDQgU2NyZWVuIGZvciBUQgpAZGVzY3JpcHRpb246IENsaWVudCBzY3JlZW5lZCBmb3IgVEIgd2l0aCBhIG1vbGVjdWxhciBXSE8tcmVjb21tZW5kZWQgcmFwaWQgZGlhZ25vc3RpYyB0ZXN0IChtV1JEKSwgc3VjaCBhcyBhbiBYcGVydCBNVEIvUklGIHRlc3QgdG8gZGV0ZWN0IE15Y29iYWN0ZXJpdW0gdHViZXJjdWxvc2lzIChNVEIpCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJTY3JlZW5pbmcgd2l0aCBtV1JEIjoKICBleGlzdHMgIlNjcmVlbmluZyB3aXRoIG1XUkQgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJTY3JlZW5pbmcgd2l0aCBtV1JEIE9ic2VydmF0aW9uIgpkZWZpbmUgIlNjcmVlbmluZyB3aXRoIG1XUkQgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iU2NyZWVuaW5nIHdpdGggbVdSRCBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIlNjcmVlbmluZyB3aXRoIG1XUkQgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJTY3JlZW5pbmcgd2l0aCBtV1JEIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgU2NyZWVuaW5nIHdpdGggbVdSRCAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTk2OSAtIENsaW5pY2FsIGFzc2Vzc21lbnQKQGFjdGl2aXR5OiBISVYuRDQgU2NyZWVuIGZvciBUQgpAZGVzY3JpcHRpb246IENsaWVudCBzY3JlZW5lZCBmb3Igd2l0aCBhIGNsaW5pY2FsIGV2YWx1YXRpb24gZm9yIHR1YmVyY3Vsb3NpcyAoVEIpIGJhc2VkIG9uIG5hdGlvbmFsIGd1aWRlbGluZXMuIENsaW5pY2FsIGFzc2Vzc21lbnQgbWF5IGJlIHVzZWQgYXMgYW4gZWxpZ2liaWxpdHkgZXZhbHVhdGlvbiBmb3IgdGVzdGluZyB3aXRoIExGLUxBTSBvciBmb3IgZW1waXJpYyBUQiB0cmVhdG1lbnQuCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJDbGluaWNhbCBhc3Nlc3NtZW50IjoKICBleGlzdHMgIkNsaW5pY2FsIGFzc2Vzc21lbnQgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJDbGluaWNhbCBhc3Nlc3NtZW50IE9ic2VydmF0aW9uIgpkZWZpbmUgIkNsaW5pY2FsIGFzc2Vzc21lbnQgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iQ2xpbmljYWwgYXNzZXNzbWVudCBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIkNsaW5pY2FsIGFzc2Vzc21lbnQgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJDbGluaWNhbCBhc3Nlc3NtZW50IE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgQ2xpbmljYWwgYXNzZXNzbWVudCAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTk3MCAtIE90aGVyIFRCIHNjcmVlbmluZyBhbGdvcml0aG0KQGFjdGl2aXR5OiBISVYuRDQgU2NyZWVuIGZvciBUQgpAZGVzY3JpcHRpb246IENsaWVudCBzY3JlZW5lZCBmb3IgdHViZXJjdWxvc2lzIChUQikgd2l0aCBhIGRpZmZlcmVudCBzY3JlZW5pbmcgbWV0aG9kIG5vdCBsaXN0ZWQKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIk90aGVyIFRCIHNjcmVlbmluZyBhbGdvcml0aG0iOgogIGV4aXN0cyAiT3RoZXIgVEIgc2NyZWVuaW5nIGFsZ29yaXRobSBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIk90aGVyIFRCIHNjcmVlbmluZyBhbGdvcml0aG0gT2JzZXJ2YXRpb24iCmRlZmluZSAiT3RoZXIgVEIgc2NyZWVuaW5nIGFsZ29yaXRobSBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJPdGhlciBUQiBzY3JlZW5pbmcgYWxnb3JpdGhtIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiT3RoZXIgVEIgc2NyZWVuaW5nIGFsZ29yaXRobSBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIk90aGVyIFRCIHNjcmVlbmluZyBhbGdvcml0aG0gT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBPdGhlciBUQiBzY3JlZW5pbmcgYWxnb3JpdGhtICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFOTczIC0gU3ltcHRvbXMgb2YgVEIKQGFjdGl2aXR5OiBISVYuRDQgU2NyZWVuIGZvciBUQgpAZGVzY3JpcHRpb246IFN5bXB0b21zIHRoYXQgbWF5IGluZGljYXRlIFRCIGRpc2Vhc2UgaW4gY2xpZW50cyBsaXZpbmcgd2l0aCBISVYsIGJhc2VkIG9uIGEgY2xpbmljYWwgYWxnb3JpdGhtCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJTeW1wdG9tcyBvZiBUQiI6CiAgZXhpc3RzICJTeW1wdG9tcyBvZiBUQiBPYnNlcnZhdGlvbiIKZGVmaW5lICJTeW1wdG9tcyBvZiBUQiBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIlN5bXB0b21zIG9mIFRCIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgU3ltcHRvbXMgb2YgVEIgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREU5NzQgLSBDdXJyZW50IGNvdWdoCkBhY3Rpdml0eTogSElWLkQ0IFNjcmVlbiBmb3IgVEIKQGRlc2NyaXB0aW9uOiBDbGllbnQgaGFzIGEgY291Z2ggcmVnYXJkbGVzcyBvZiBkdXJhdGlvbgoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiQ3VycmVudCBjb3VnaCI6CiAgZXhpc3RzICJDdXJyZW50IGNvdWdoIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiQ3VycmVudCBjb3VnaCBPYnNlcnZhdGlvbiIKZGVmaW5lICJDdXJyZW50IGNvdWdoIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIkN1cnJlbnQgY291Z2ggQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJDdXJyZW50IGNvdWdoIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iQ3VycmVudCBjb3VnaCBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIEN1cnJlbnQgY291Z2ggKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREU5NzUgLSBQcm9sb25nZWQgY291Z2ggPj0ydwpAYWN0aXZpdHk6IEhJVi5ENCBTY3JlZW4gZm9yIFRCCkBkZXNjcmlwdGlvbjogQ2xpZW50IGhhcyBhIHByb2xvbmdlZCBjb3VnaCBvZiAyIHdlZWtzIG9yIG1vcmUKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIlByb2xvbmdlZCBjb3VnaCA+PTJ3IjoKICBleGlzdHMgIlByb2xvbmdlZCBjb3VnaCA+PTJ3IENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiUHJvbG9uZ2VkIGNvdWdoID49MncgT2JzZXJ2YXRpb24iCmRlZmluZSAiUHJvbG9uZ2VkIGNvdWdoID49MncgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iUHJvbG9uZ2VkIGNvdWdoID49MncgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJQcm9sb25nZWQgY291Z2ggPj0ydyBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIlByb2xvbmdlZCBjb3VnaCA+PTJ3IE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgUHJvbG9uZ2VkIGNvdWdoID49MncgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREU5NzYgLSBGZXZlciBvZiAzOSDCsEMgb3IgZ3JlYXRlcgpAYWN0aXZpdHk6IEhJVi5ENCBTY3JlZW4gZm9yIFRCCkBkZXNjcmlwdGlvbjogQ2xpZW50IGhhcyBhIGZldmVyIHdpdGggYSBtZWFzdXJlZCB0ZW1wZXJhdHVyZSBvZiAxMDIuMiDCsEYvMzkgwrBDIG9yIGdyZWF0ZXIKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkZldmVyIG9mIDM5IMKwQyBvciBncmVhdGVyIjoKICBleGlzdHMgIkZldmVyIG9mIDM5IMKwQyBvciBncmVhdGVyIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiRmV2ZXIgb2YgMzkgwrBDIG9yIGdyZWF0ZXIgT2JzZXJ2YXRpb24iCmRlZmluZSAiRmV2ZXIgb2YgMzkgwrBDIG9yIGdyZWF0ZXIgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iRmV2ZXIgb2YgMzkgwrBDIG9yIGdyZWF0ZXIgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJGZXZlciBvZiAzOSDCsEMgb3IgZ3JlYXRlciBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkZldmVyIG9mIDM5IMKwQyBvciBncmVhdGVyIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgRmV2ZXIgb2YgMzkgwrBDIG9yIGdyZWF0ZXIgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREU5NzcgLSBXZWlnaHQgbG9zcyByZXBvcnRlZApAYWN0aXZpdHk6IEhJVi5ENCBTY3JlZW4gZm9yIFRCCkBkZXNjcmlwdGlvbjogVW5leHBsYWluZWQgd2VpZ2h0IGxvc3MKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIldlaWdodCBsb3NzIHJlcG9ydGVkIjoKICBleGlzdHMgIldlaWdodCBsb3NzIHJlcG9ydGVkIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiV2VpZ2h0IGxvc3MgcmVwb3J0ZWQgT2JzZXJ2YXRpb24iCmRlZmluZSAiV2VpZ2h0IGxvc3MgcmVwb3J0ZWQgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iV2VpZ2h0IGxvc3MgcmVwb3J0ZWQgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJXZWlnaHQgbG9zcyByZXBvcnRlZCBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIldlaWdodCBsb3NzIHJlcG9ydGVkIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgV2VpZ2h0IGxvc3MgcmVwb3J0ZWQgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREU5NzggLSBOaWdodCBzd2VhdHMKQGFjdGl2aXR5OiBISVYuRDQgU2NyZWVuIGZvciBUQgpAZGVzY3JpcHRpb246IENsaWVudCByZXBvcnRzIGV4cGVyaWVuY2luZyBuaWdodCBzd2VhdHMKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIk5pZ2h0IHN3ZWF0cyI6CiAgZXhpc3RzICJOaWdodCBzd2VhdHMgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJOaWdodCBzd2VhdHMgT2JzZXJ2YXRpb24iCmRlZmluZSAiTmlnaHQgc3dlYXRzIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIk5pZ2h0IHN3ZWF0cyBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIk5pZ2h0IHN3ZWF0cyBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIk5pZ2h0IHN3ZWF0cyBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIE5pZ2h0IHN3ZWF0cyAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTk3OSAtIFBvb3Igd2VpZ2h0IGdhaW4KQGFjdGl2aXR5OiBISVYuRDQgU2NyZWVuIGZvciBUQgpAZGVzY3JpcHRpb246IENsaWVudCByZXBvcnRzIHBvb3Igd2VpZ2h0IGdhaW4gb2YgY2hpbGQgb3IgaW5mYW50IG9yIGdyb3d0aCBjdXJ2ZSBmbGF0dGVuaW5nIG9yIHdlaWdodCBmb3IgYWdlIDwtMiBaLXNjb3Jlcy4KKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIlBvb3Igd2VpZ2h0IGdhaW4iOgogIGV4aXN0cyAiUG9vciB3ZWlnaHQgZ2FpbiBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIlBvb3Igd2VpZ2h0IGdhaW4gT2JzZXJ2YXRpb24iCmRlZmluZSAiUG9vciB3ZWlnaHQgZ2FpbiBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJQb29yIHdlaWdodCBnYWluIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiUG9vciB3ZWlnaHQgZ2FpbiBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIlBvb3Igd2VpZ2h0IGdhaW4gT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBQb29yIHdlaWdodCBnYWluICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFOTgwIC0gUmVkdWNlZCBwbGF5ZnVsbmVzcwpAYWN0aXZpdHk6IEhJVi5ENCBTY3JlZW4gZm9yIFRCCkBkZXNjcmlwdGlvbjogQ2xpZW50IHJlcG9ydHMgcmVkdWNlZCBwbGF5ZnVsbmVzcyBvZiBjaGlsZAoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiUmVkdWNlZCBwbGF5ZnVsbmVzcyI6CiAgZXhpc3RzICJSZWR1Y2VkIHBsYXlmdWxuZXNzIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiUmVkdWNlZCBwbGF5ZnVsbmVzcyBPYnNlcnZhdGlvbiIKZGVmaW5lICJSZWR1Y2VkIHBsYXlmdWxuZXNzIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIlJlZHVjZWQgcGxheWZ1bG5lc3MgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJSZWR1Y2VkIHBsYXlmdWxuZXNzIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iUmVkdWNlZCBwbGF5ZnVsbmVzcyBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIFJlZHVjZWQgcGxheWZ1bG5lc3MgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREU5ODEgLSBDaGVzdCBwYWluCkBhY3Rpdml0eTogSElWLkQ0IFNjcmVlbiBmb3IgVEIKQGRlc2NyaXB0aW9uOiBDbGllbnQgcmVwb3J0cyBjaGVzdCBwYWluCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJDaGVzdCBwYWluIjoKICBleGlzdHMgIkNoZXN0IHBhaW4gQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJDaGVzdCBwYWluIE9ic2VydmF0aW9uIgpkZWZpbmUgIkNoZXN0IHBhaW4gQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iQ2hlc3QgcGFpbiBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIkNoZXN0IHBhaW4gT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJDaGVzdCBwYWluIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgQ2hlc3QgcGFpbiAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTk4MiAtIEhhZW1vcHR5c2lzCkBhY3Rpdml0eTogSElWLkQ0IFNjcmVlbiBmb3IgVEIKQGRlc2NyaXB0aW9uOiBDbGllbnQgcmVwb3J0cyBleHBlcmllbmNpbmcgaGFlbW9wdHlzaXMKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkhhZW1vcHR5c2lzIjoKICBleGlzdHMgIkhhZW1vcHR5c2lzIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiSGFlbW9wdHlzaXMgT2JzZXJ2YXRpb24iCmRlZmluZSAiSGFlbW9wdHlzaXMgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iSGFlbW9wdHlzaXMgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJIYWVtb3B0eXNpcyBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkhhZW1vcHR5c2lzIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgSGFlbW9wdHlzaXMgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREU5ODMgLSBMZXRoYXJneQpAYWN0aXZpdHk6IEhJVi5ENCBTY3JlZW4gZm9yIFRCCkBkZXNjcmlwdGlvbjogQ2xpZW50IHJlcG9ydHMgbGV0aGFyZ3kKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkxldGhhcmd5IEQuREU5ODMiOgogIGV4aXN0cyAiTGV0aGFyZ3kgRC5ERTk4MyBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIkxldGhhcmd5IEQuREU5ODMgT2JzZXJ2YXRpb24iCmRlZmluZSAiTGV0aGFyZ3kgRC5ERTk4MyBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJMZXRoYXJneSBELkRFOTgzIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiTGV0aGFyZ3kgRC5ERTk4MyBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkxldGhhcmd5IEQuREU5ODMgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBMZXRoYXJneSBELkRFOTgzICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFOTg0IC0gTm9uZQpAYWN0aXZpdHk6IEhJVi5ENCBTY3JlZW4gZm9yIFRCCkBkZXNjcmlwdGlvbjogTm8gc3ltcHRvbXMgb2YgVEIgaWRlbnRpZmllZAoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiTm9uZSI6CiAgZXhpc3RzICJOb25lIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiTm9uZSBPYnNlcnZhdGlvbiIKZGVmaW5lICJOb25lIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIk5vbmUgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJOb25lIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iTm9uZSBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIE5vbmUgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREU5ODUgLSBIaXN0b3J5IG9mIGNvbnRhY3Qgd2l0aCBhIHBlcnNvbiB3aXRoIFRCCkBhY3Rpdml0eTogSElWLkQ0IFNjcmVlbiBmb3IgVEIKQGRlc2NyaXB0aW9uOiBDbGllbnQgaGFkIGEgaGlzdG9yeSBvZiBhIGNvbnRhY3Qgd2l0aCBhIHBlcnNvbiB3aXRoIFRCCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJIaXN0b3J5IG9mIGNvbnRhY3Qgd2l0aCBhIHBlcnNvbiB3aXRoIFRCIjoKICBleGlzdHMgIkhpc3Rvcnkgb2YgY29udGFjdCB3aXRoIGEgcGVyc29uIHdpdGggVEIgT2JzZXJ2YXRpb24iCmRlZmluZSAiSGlzdG9yeSBvZiBjb250YWN0IHdpdGggYSBwZXJzb24gd2l0aCBUQiBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkhpc3Rvcnkgb2YgY29udGFjdCB3aXRoIGEgcGVyc29uIHdpdGggVEIgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBIaXN0b3J5IG9mIGNvbnRhY3Qgd2l0aCBhIHBlcnNvbiB3aXRoIFRCICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFOTg2IC0gVEIgc2NyZWVuaW5nIHJlc3VsdApAYWN0aXZpdHk6IEhJVi5ENCBTY3JlZW4gZm9yIFRCCkBkZXNjcmlwdGlvbjogUmVjb3JkIHRoZSByZXN1bHQgb2YgdGhlIHR1YmVyY3Vsb3NpcyAoVEIpIHNjcmVlbmluZwoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiVEIgc2NyZWVuaW5nIHJlc3VsdCI6CiAgZXhpc3RzICJUQiBzY3JlZW5pbmcgcmVzdWx0IE9ic2VydmF0aW9uIgpkZWZpbmUgIlRCIHNjcmVlbmluZyByZXN1bHQgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJUQiBzY3JlZW5pbmcgcmVzdWx0IE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgVEIgc2NyZWVuaW5nIHJlc3VsdCAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTk4NyAtIFNjcmVlbiBwb3NpdGl2ZSBmb3IgVEIKQGFjdGl2aXR5OiBISVYuRDQgU2NyZWVuIGZvciBUQgpAZGVzY3JpcHRpb246IFNjcmVlbmluZyByZXN1bHQgd2FzIHBvc2l0aXZlIGZvciB0dWJlcmN1bG9zaXMgKFRCKQoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiU2NyZWVuIHBvc2l0aXZlIGZvciBUQiI6CiAgZXhpc3RzICJTY3JlZW4gcG9zaXRpdmUgZm9yIFRCIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiU2NyZWVuIHBvc2l0aXZlIGZvciBUQiBPYnNlcnZhdGlvbiIKZGVmaW5lICJTY3JlZW4gcG9zaXRpdmUgZm9yIFRCIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIlNjcmVlbiBwb3NpdGl2ZSBmb3IgVEIgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJTY3JlZW4gcG9zaXRpdmUgZm9yIFRCIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iU2NyZWVuIHBvc2l0aXZlIGZvciBUQiBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIFNjcmVlbiBwb3NpdGl2ZSBmb3IgVEIgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkQuREU5ODggLSBTY3JlZW4gbmVnYXRpdmUgZm9yIFRCCkBhY3Rpdml0eTogSElWLkQ0IFNjcmVlbiBmb3IgVEIKQGRlc2NyaXB0aW9uOiBTY3JlZW5pbmcgcmVzdWx0IHdhcyBuZWdhdGl2ZSBmb3IgdHViZXJjdWxvc2lzIChUQikKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIlNjcmVlbiBuZWdhdGl2ZSBmb3IgVEIiOgogIGV4aXN0cyAiU2NyZWVuIG5lZ2F0aXZlIGZvciBUQiBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIlNjcmVlbiBuZWdhdGl2ZSBmb3IgVEIgT2JzZXJ2YXRpb24iCmRlZmluZSAiU2NyZWVuIG5lZ2F0aXZlIGZvciBUQiBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJTY3JlZW4gbmVnYXRpdmUgZm9yIFRCIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiU2NyZWVuIG5lZ2F0aXZlIGZvciBUQiBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIlNjcmVlbiBuZWdhdGl2ZSBmb3IgVEIgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBTY3JlZW4gbmVnYXRpdmUgZm9yIFRCICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFOTg5IC0gSW5jb25jbHVzaXZlCkBhY3Rpdml0eTogSElWLkQ0IFNjcmVlbiBmb3IgVEIKQGRlc2NyaXB0aW9uOiBTY3JlZW5pbmcgcmVzdWx0IHdhcyBpbmNvbmNsdXNpdmUgZm9yIHR1YmVyY3Vsb3NpcyAoVEIpCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJJbmNvbmNsdXNpdmUgRC5ERTk4OSI6CiAgZXhpc3RzICJJbmNvbmNsdXNpdmUgRC5ERTk4OSBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIkluY29uY2x1c2l2ZSBELkRFOTg5IE9ic2VydmF0aW9uIgpkZWZpbmUgIkluY29uY2x1c2l2ZSBELkRFOTg5IENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIkluY29uY2x1c2l2ZSBELkRFOTg5IENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiSW5jb25jbHVzaXZlIEQuREU5ODkgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJJbmNvbmNsdXNpdmUgRC5ERTk4OSBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIEluY29uY2x1c2l2ZSBELkRFOTg5ICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ELkRFMTAyMyAtIFRCIHByZXZlbnRpb24gc2VydmljZXMgYWNjZXB0ZWQKQGFjdGl2aXR5OiBISVYuRDIxIERldGVybWluZSByZWdpbWVuIGFuZCB0cmVhdG1lbnQgb3B0aW9ucwpAZGVzY3JpcHRpb246IEluZGljYXRlcyBpZiB0aGUgY2xpZW50IGFjY2VwdHMgdG8gYmUgZXZhbHVhdGVkIGZvciBUQiBpbmZlY3Rpb24gYW5kIHRvIHRha2UgdGhlIHRyZWF0bWVudCBpbiBjYXNlIGhlL3NoZSBpcyBlbGlnaWJsZQoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiVEIgcHJldmVudGlvbiBzZXJ2aWNlcyBhY2NlcHRlZCI6CiAgZXhpc3RzICJUQiBwcmV2ZW50aW9uIHNlcnZpY2VzIGFjY2VwdGVkIE9ic2VydmF0aW9uIgpkZWZpbmUgIlRCIHByZXZlbnRpb24gc2VydmljZXMgYWNjZXB0ZWQgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJUQiBwcmV2ZW50aW9uIHNlcnZpY2VzIGFjY2VwdGVkIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgVEIgcHJldmVudGlvbiBzZXJ2aWNlcyBhY2NlcHRlZCAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRC5ERTEwMjYgLSBDIHJlYWN0aXZlIHByb3RlaW4gdGVzdCByZXN1bHQKQGFjdGl2aXR5OiBISVYuRDQgU2NyZWVuIGZvciBUQgpAZGVzY3JpcHRpb246IFRlc3QgcmVzdWx0IG9mIHRoZSBjbGllbnQncyBDIHJlYWN0aXZlIHByb3RlaW4gdGVzdCByZXN1bHQgaW4gbWcvTAoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiQyByZWFjdGl2ZSBwcm90ZWluIHRlc3QgcmVzdWx0IjoKICBFbGVtZW50cy4iQyByZWFjdGl2ZSBwcm90ZWluIHRlc3QgcmVzdWx0IiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIkMgcmVhY3RpdmUgcHJvdGVpbiB0ZXN0IHJlc3VsdCBWYWx1ZSI6CiAgIkMgcmVhY3RpdmUgcHJvdGVpbiB0ZXN0IHJlc3VsdCIgTwogIHJldHVybiBPLnZhbHVlCi8qIEVuZCBvZiBDIHJlYWN0aXZlIHByb3RlaW4gdGVzdCByZXN1bHQgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkUuREU4NSAtIEFOQyBjb250YWN0IGRhdGUKQGFjdGl2aXR5OiBISVYuRTEgQ2FwdHVyZSBvciB1cGRhdGUgbW90aGVyJ3MgaGlzdG9yeQpAZGVzY3JpcHRpb246IFRoZSBkYXRlIGFuZCB0aW1lIG9mIHRoZSBjbGllbnQncyBBTkMgY29udGFjdCAoaW4gdGhlIEFOQyBEQUsgdGhpcyBpcyBjYWxsZWQgJ0NvbnRhY3QgZGF0ZScpCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJBTkMgY29udGFjdCBkYXRlIEUuREU4NSI6CiAgRWxlbWVudHMuIkFOQyBjb250YWN0IGRhdGUgRS5ERTg1IiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIkFOQyBjb250YWN0IGRhdGUgRS5ERTg1IFZhbHVlIjoKICAiQU5DIGNvbnRhY3QgZGF0ZSBFLkRFODUiIE8KICByZXR1cm4gTy52YWx1ZQovKiBFbmQgb2YgQU5DIGNvbnRhY3QgZGF0ZSBFLkRFODUgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkUuREUxMTMgLSBLZXkgcG9wdWxhdGlvbiBtZW1iZXIKQGFjdGl2aXR5OiBISVYuRTEgQ2FwdHVyZSBvciB1cGRhdGUgbW90aGVyJ3MgaGlzdG9yeQpAZGVzY3JpcHRpb246IE1vdGhlciBpcyBhIG1lbWJlciBvZiBhIGtleSBwb3B1bGF0aW9uIHdoaWNoIGhhcyBhbiBpbmNyZWFzZWQgcmlzayBvZiBISVYKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIktleSBwb3B1bGF0aW9uIG1lbWJlciBFLkRFMTEzIjoKICBleGlzdHMgIktleSBwb3B1bGF0aW9uIG1lbWJlciBFLkRFMTEzIE9ic2VydmF0aW9uIgpkZWZpbmUgIktleSBwb3B1bGF0aW9uIG1lbWJlciBFLkRFMTEzIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iS2V5IHBvcHVsYXRpb24gbWVtYmVyIEUuREUxMTMgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBLZXkgcG9wdWxhdGlvbiBtZW1iZXIgRS5ERTExMyAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRS5ERTExNCAtIEtleSBwb3B1bGF0aW9uIG1lbWJlciB0eXBlCkBhY3Rpdml0eTogSElWLkUxIENhcHR1cmUgb3IgdXBkYXRlIG1vdGhlcidzIGhpc3RvcnkKQGRlc2NyaXB0aW9uOiBUaGUgdHlwZSBvZiBrZXkgcG9wdWxhdGlvbiB0aGF0IHRoZSBpbmZhbnQncyBtb3RoZXIgaXMgaW5jbHVkZWQgaW4KKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIktleSBwb3B1bGF0aW9uIG1lbWJlciB0eXBlIEUuREUxMTQiOgogIGV4aXN0cyAiS2V5IHBvcHVsYXRpb24gbWVtYmVyIHR5cGUgRS5ERTExNCBPYnNlcnZhdGlvbiIKZGVmaW5lICJLZXkgcG9wdWxhdGlvbiBtZW1iZXIgdHlwZSBFLkRFMTE0IE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iS2V5IHBvcHVsYXRpb24gbWVtYmVyIHR5cGUgRS5ERTExNCBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIEtleSBwb3B1bGF0aW9uIG1lbWJlciB0eXBlIEUuREUxMTQgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkUuREUxMTUgLSBTZXggd29ya2VyCkBhY3Rpdml0eTogSElWLkUxIENhcHR1cmUgb3IgdXBkYXRlIG1vdGhlcidzIGhpc3RvcnkKQGRlc2NyaXB0aW9uOiBJbmZhbnQncyBtb3RoZXIgaXMgYSBzZXggd29ya2VyCiovCmRlZmluZSAiU2V4IHdvcmtlciBFLkRFMTE1IjoKICBFbGVtZW50cy4iU2V4IHdvcmtlciBFLkRFMTE1IiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgU2V4IHdvcmtlciBFLkRFMTE1ICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5FLkRFMTE2IC0gUGVvcGxlIHdobyBpbmplY3QgZHJ1Z3MKQGFjdGl2aXR5OiBISVYuRTEgQ2FwdHVyZSBvciB1cGRhdGUgbW90aGVyJ3MgaGlzdG9yeQpAZGVzY3JpcHRpb246IEluZmFudCdzIG1vdGhlciBpcyBhIHBlcnNvbiB3aG8gaW5qZWN0cyBkcnVncwoqLwpkZWZpbmUgIlBlb3BsZSB3aG8gaW5qZWN0IGRydWdzIEUuREUxMTYiOgogIEVsZW1lbnRzLiJQZW9wbGUgd2hvIGluamVjdCBkcnVncyBFLkRFMTE2IiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgUGVvcGxlIHdobyBpbmplY3QgZHJ1Z3MgRS5ERTExNiAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRS5ERTExNyAtIFRyYW5zIGFuZCBnZW5kZXItZGl2ZXJzZSBwZW9wbGUKQGFjdGl2aXR5OiBISVYuRTEgQ2FwdHVyZSBvciB1cGRhdGUgbW90aGVyJ3MgaGlzdG9yeQpAZGVzY3JpcHRpb246IEluZmFudCdzIG1vdGhlciBpZGVudGlmaWVzIGFzIHRyYW5zIGFuZCBnZW5kZXItZGl2ZXJzZQoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiVHJhbnMgYW5kIGdlbmRlci1kaXZlcnNlIHBlb3BsZSBFLkRFMTE3IjoKICBFbGVtZW50cy4iVHJhbnMgYW5kIGdlbmRlci1kaXZlcnNlIHBlb3BsZSBFLkRFMTE3IiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgVHJhbnMgYW5kIGdlbmRlci1kaXZlcnNlIHBlb3BsZSBFLkRFMTE3ICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5FLkRFMTE4IC0gUGVvcGxlIGxpdmluZyBpbiBwcmlzb25zIGFuZCBvdGhlciBjbG9zZWQgc2V0dGluZwpAYWN0aXZpdHk6IEhJVi5FMSBDYXB0dXJlIG9yIHVwZGF0ZSBtb3RoZXIncyBoaXN0b3J5CkBkZXNjcmlwdGlvbjogSW5mYW50J3MgbW90aGVyIGlzIGluIGEgcHJpc29uIG9yIGNsb3NlZCBzZXR0aW5nCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJQZW9wbGUgbGl2aW5nIGluIHByaXNvbnMgYW5kIG90aGVyIGNsb3NlZCBzZXR0aW5nIjoKICBFbGVtZW50cy4iUGVvcGxlIGxpdmluZyBpbiBwcmlzb25zIGFuZCBvdGhlciBjbG9zZWQgc2V0dGluZyIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIFBlb3BsZSBsaXZpbmcgaW4gcHJpc29ucyBhbmQgb3RoZXIgY2xvc2VkIHNldHRpbmcgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkUuREUxNTUgLSBTaWducyBvZiBzdWJzdGFudGlhbCByaXNrIG9mIEhJViBpbmZlY3Rpb24KQGFjdGl2aXR5OiBISVYuRTEgQ2FwdHVyZSBvciB1cGRhdGUgbW90aGVyJ3MgaGlzdG9yeQpAZGVzY3JpcHRpb246IFNpZ25zIHRoZSBjbGllbnQgaXMgYXQgYSBzdWJzdGFudGlhbCByaXNrIG9mIEhJViBpbmZlY3Rpb24KKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIlNpZ25zIG9mIHN1YnN0YW50aWFsIHJpc2sgb2YgSElWIGluZmVjdGlvbiBFLkRFMTU1IjoKICBleGlzdHMgIlNpZ25zIG9mIHN1YnN0YW50aWFsIHJpc2sgb2YgSElWIGluZmVjdGlvbiBFLkRFMTU1IE9ic2VydmF0aW9uIgpkZWZpbmUgIlNpZ25zIG9mIHN1YnN0YW50aWFsIHJpc2sgb2YgSElWIGluZmVjdGlvbiBFLkRFMTU1IE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iU2lnbnMgb2Ygc3Vic3RhbnRpYWwgcmlzayBvZiBISVYgaW5mZWN0aW9uIEUuREUxNTUgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBTaWducyBvZiBzdWJzdGFudGlhbCByaXNrIG9mIEhJViBpbmZlY3Rpb24gRS5ERTE1NSAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRS5ERTE1NiAtIE5vIGNvbmRvbSB1c2UgZHVyaW5nIHNleCB3aXRoIG1vcmUgdGhhbiBvbmUgcGFydG5lciBpbiB0aGUgcGFzdCA2IG1vbnRocwpAYWN0aXZpdHk6IEhJVi5FMSBDYXB0dXJlIG9yIHVwZGF0ZSBtb3RoZXIncyBoaXN0b3J5CkBkZXNjcmlwdGlvbjogUmVjZW50IHZhZ2luYWwgb3IgYW5hbCBzZXh1YWwgaW50ZXJjb3Vyc2Ugd2l0aG91dCBhIGNvbmRvbSB3aXRoIG1vcmUgdGhhbiBvbmUgcGFydG5lcgoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiTm8gY29uZG9tIHVzZSBkdXJpbmcgc2V4IHdpdGggbW9yZSB0aGFuIG9uZSBwYXJ0bmVyIGluIHRoZSBwYXN0IDYgbW9udGhzIEUuREUxNTYiOgogIGV4aXN0cyAiTm8gY29uZG9tIHVzZSBkdXJpbmcgc2V4IHdpdGggbW9yZSB0aGFuIG9uZSBwYXJ0bmVyIGluIHRoZSBwYXN0IDYgbW9udGhzIEUuREUxNTYgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJObyBjb25kb20gdXNlIGR1cmluZyBzZXggd2l0aCBtb3JlIHRoYW4gb25lIHBhcnRuZXIgaW4gdGhlIHBhc3QgNiBtb250aHMgRS5ERTE1NiBPYnNlcnZhdGlvbiIKZGVmaW5lICJObyBjb25kb20gdXNlIGR1cmluZyBzZXggd2l0aCBtb3JlIHRoYW4gb25lIHBhcnRuZXIgaW4gdGhlIHBhc3QgNiBtb250aHMgRS5ERTE1NiBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJObyBjb25kb20gdXNlIGR1cmluZyBzZXggd2l0aCBtb3JlIHRoYW4gb25lIHBhcnRuZXIgaW4gdGhlIHBhc3QgNiBtb250aHMgRS5ERTE1NiBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIk5vIGNvbmRvbSB1c2UgZHVyaW5nIHNleCB3aXRoIG1vcmUgdGhhbiBvbmUgcGFydG5lciBpbiB0aGUgcGFzdCA2IG1vbnRocyBFLkRFMTU2IE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iTm8gY29uZG9tIHVzZSBkdXJpbmcgc2V4IHdpdGggbW9yZSB0aGFuIG9uZSBwYXJ0bmVyIGluIHRoZSBwYXN0IDYgbW9udGhzIEUuREUxNTYgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBObyBjb25kb20gdXNlIGR1cmluZyBzZXggd2l0aCBtb3JlIHRoYW4gb25lIHBhcnRuZXIgaW4gdGhlIHBhc3QgNiBtb250aHMgRS5ERTE1NiAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRS5ERTE1NyAtIFNUSSBpbiB0aGUgcGFzdCA2IG1vbnRocwpAYWN0aXZpdHk6IEhJVi5FMSBDYXB0dXJlIG9yIHVwZGF0ZSBtb3RoZXIncyBoaXN0b3J5CkBkZXNjcmlwdGlvbjogQSByZWNlbnQgaGlzdG9yeSAoaW4gdGhlIGxhc3QgNiBtb250aHMpIG9mIGEgc2V4dWFsbHkgdHJhbnNtaXR0ZWQgaW5mZWN0aW9uIChTVEkpIGJ5IGxhYm9yYXRvcnkgdGVzdGluZyBvciBzZWxmLXJlcG9ydCBvZiBzeW5kcm9taWMgU1RJIHRyZWF0bWVudAoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiU1RJIGluIHRoZSBwYXN0IDYgbW9udGhzIEUuREUxNTciOgogIGV4aXN0cyAiU1RJIGluIHRoZSBwYXN0IDYgbW9udGhzIEUuREUxNTcgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJTVEkgaW4gdGhlIHBhc3QgNiBtb250aHMgRS5ERTE1NyBPYnNlcnZhdGlvbiIKZGVmaW5lICJTVEkgaW4gdGhlIHBhc3QgNiBtb250aHMgRS5ERTE1NyBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJTVEkgaW4gdGhlIHBhc3QgNiBtb250aHMgRS5ERTE1NyBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIlNUSSBpbiB0aGUgcGFzdCA2IG1vbnRocyBFLkRFMTU3IE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iU1RJIGluIHRoZSBwYXN0IDYgbW9udGhzIEUuREUxNTcgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBTVEkgaW4gdGhlIHBhc3QgNiBtb250aHMgRS5ERTE1NyAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRS5ERTE1OCAtIEEgc2V4dWFsIHBhcnRuZXIgaW4gdGhlIHBhc3QgNiBtb250aHMgaGFkIG9uZSBvciBtb3JlIEhJViByaXNrIGZhY3RvcnMKQGFjdGl2aXR5OiBISVYuRTEgQ2FwdHVyZSBvciB1cGRhdGUgbW90aGVyJ3MgaGlzdG9yeQpAZGVzY3JpcHRpb246IEEgcmVjZW50IHNleCBwYXJ0bmVyIG9mIHRoZSBjbGllbnQgaGFkIEhJViByaXNrIGZhY3RvcnMKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkEgc2V4dWFsIHBhcnRuZXIgaW4gdGhlIHBhc3QgNiBtb250aHMgaGFkIG9uZSBvciBtb3JlIEhJViByaXNrIGZhY3RvcnMgRS5ERTE1OCI6CiAgZXhpc3RzICJBIHNleHVhbCBwYXJ0bmVyIGluIHRoZSBwYXN0IDYgbW9udGhzIGhhZCBvbmUgb3IgbW9yZSBISVYgcmlzayBmYWN0b3JzIEUuREUxNTggQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJBIHNleHVhbCBwYXJ0bmVyIGluIHRoZSBwYXN0IDYgbW9udGhzIGhhZCBvbmUgb3IgbW9yZSBISVYgcmlzayBmYWN0b3JzIEUuREUxNTggT2JzZXJ2YXRpb24iCmRlZmluZSAiQSBzZXh1YWwgcGFydG5lciBpbiB0aGUgcGFzdCA2IG1vbnRocyBoYWQgb25lIG9yIG1vcmUgSElWIHJpc2sgZmFjdG9ycyBFLkRFMTU4IENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIkEgc2V4dWFsIHBhcnRuZXIgaW4gdGhlIHBhc3QgNiBtb250aHMgaGFkIG9uZSBvciBtb3JlIEhJViByaXNrIGZhY3RvcnMgRS5ERTE1OCBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIkEgc2V4dWFsIHBhcnRuZXIgaW4gdGhlIHBhc3QgNiBtb250aHMgaGFkIG9uZSBvciBtb3JlIEhJViByaXNrIGZhY3RvcnMgRS5ERTE1OCBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkEgc2V4dWFsIHBhcnRuZXIgaW4gdGhlIHBhc3QgNiBtb250aHMgaGFkIG9uZSBvciBtb3JlIEhJViByaXNrIGZhY3RvcnMgRS5ERTE1OCBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIEEgc2V4dWFsIHBhcnRuZXIgaW4gdGhlIHBhc3QgNiBtb250aHMgaGFkIG9uZSBvciBtb3JlIEhJViByaXNrIGZhY3RvcnMgRS5ERTE1OCAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRS5ERTE1OSAtIFByRVAgcmVxdWVzdGVkIGJ5IGNsaWVudApAYWN0aXZpdHk6IEhJVi5FMSBDYXB0dXJlIG9yIHVwZGF0ZSBtb3RoZXIncyBoaXN0b3J5CkBkZXNjcmlwdGlvbjogQ2xpZW50IGlzIHJlcXVlc3RpbmcgUHJFUCwgcmVmbGVjdGluZyBhIGRlY2lzaW9uLW1ha2luZyBwcm9jZXNzIGhhcyBhbHJlYWR5IHRha2VuIHBsYWNlIGFuZCBzdWdnZXN0aW5nIG9mIHN1YnN0YW50aWFsIHJpc2sgb2YgSElWCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJQckVQIHJlcXVlc3RlZCBieSBjbGllbnQgRS5ERTE1OSI6CiAgZXhpc3RzICJQckVQIHJlcXVlc3RlZCBieSBjbGllbnQgRS5ERTE1OSBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIlByRVAgcmVxdWVzdGVkIGJ5IGNsaWVudCBFLkRFMTU5IE9ic2VydmF0aW9uIgpkZWZpbmUgIlByRVAgcmVxdWVzdGVkIGJ5IGNsaWVudCBFLkRFMTU5IENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIlByRVAgcmVxdWVzdGVkIGJ5IGNsaWVudCBFLkRFMTU5IENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiUHJFUCByZXF1ZXN0ZWQgYnkgY2xpZW50IEUuREUxNTkgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJQckVQIHJlcXVlc3RlZCBieSBjbGllbnQgRS5ERTE1OSBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIFByRVAgcmVxdWVzdGVkIGJ5IGNsaWVudCBFLkRFMTU5ICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5FLkRFMTYwIC0gU2Vyb2Rpc2NvcmRhbnQgcGFydG5lcgpAYWN0aXZpdHk6IEhJVi5FMSBDYXB0dXJlIG9yIHVwZGF0ZSBtb3RoZXIncyBoaXN0b3J5CkBkZXNjcmlwdGlvbjogTW90aGVyJ3MgSElWIHN0YXR1cyBpcyBkaWZmZXJlbnQgZnJvbSBhIGN1cnJlbnQgcGFydG5lcidzIEhJViBzdGF0dXMKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIlNlcm9kaXNjb3JkYW50IHBhcnRuZXIgRS5ERTE2MCI6CiAgZXhpc3RzICJTZXJvZGlzY29yZGFudCBwYXJ0bmVyIEUuREUxNjAgT2JzZXJ2YXRpb24iCmRlZmluZSAiU2Vyb2Rpc2NvcmRhbnQgcGFydG5lciBFLkRFMTYwIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iU2Vyb2Rpc2NvcmRhbnQgcGFydG5lciBFLkRFMTYwIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgU2Vyb2Rpc2NvcmRhbnQgcGFydG5lciBFLkRFMTYwICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5FLkRFMTY4IC0gSElWIHRlc3QgdHlwZQpAYWN0aXZpdHk6IEhJVi5FNCBUZXN0IG1vdGhlciBmb3IgSElWIHVzaW5nIHRlc3RpbmcgYWxnb3JpdGhtCkBkZXNjcmlwdGlvbjogVHlwZSBvZiBISVYgdGVzdAoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiSElWIHRlc3QgdHlwZSBFLkRFMTY4IjoKICBleGlzdHMgIkhJViB0ZXN0IHR5cGUgRS5ERTE2OCBPYnNlcnZhdGlvbiIKZGVmaW5lICJISVYgdGVzdCB0eXBlIEUuREUxNjggT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJISVYgdGVzdCB0eXBlIEUuREUxNjggT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBISVYgdGVzdCB0eXBlIEUuREUxNjggKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkUuREUxNjkgLSBSYXBpZCBkaWFnbm9zdGljIHRlc3QgZm9yIEhJVgpAYWN0aXZpdHk6IEhJVi5FNCBUZXN0IG1vdGhlciBmb3IgSElWIHVzaW5nIHRlc3RpbmcgYWxnb3JpdGhtCkBkZXNjcmlwdGlvbjogQW50aWJvZHkgdGVzdCBmb3IgSElWIHBlcmZvcm1lZCB3aXRoIGEgcmFwaWQgZGlhZ25vc3RpYyAoUkRUKQoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiUmFwaWQgZGlhZ25vc3RpYyB0ZXN0IGZvciBISVYgRS5ERTE2OSI6CiAgZXhpc3RzICJSYXBpZCBkaWFnbm9zdGljIHRlc3QgZm9yIEhJViBFLkRFMTY5IENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiUmFwaWQgZGlhZ25vc3RpYyB0ZXN0IGZvciBISVYgRS5ERTE2OSBPYnNlcnZhdGlvbiIKZGVmaW5lICJSYXBpZCBkaWFnbm9zdGljIHRlc3QgZm9yIEhJViBFLkRFMTY5IENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIlJhcGlkIGRpYWdub3N0aWMgdGVzdCBmb3IgSElWIEUuREUxNjkgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJSYXBpZCBkaWFnbm9zdGljIHRlc3QgZm9yIEhJViBFLkRFMTY5IE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iUmFwaWQgZGlhZ25vc3RpYyB0ZXN0IGZvciBISVYgRS5ERTE2OSBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIFJhcGlkIGRpYWdub3N0aWMgdGVzdCBmb3IgSElWIEUuREUxNjkgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkUuREUxNzAgLSBFbnp5bWUgaW1tdW5vYXNzYXkgZm9yIEhJVgpAYWN0aXZpdHk6IEhJVi5FNCBUZXN0IG1vdGhlciBmb3IgSElWIHVzaW5nIHRlc3RpbmcgYWxnb3JpdGhtCkBkZXNjcmlwdGlvbjogQW50aWJvZHkgdGVzdCBmb3IgSElWIHBlcmZvcm1lZCB3aXRoIGFuIGVuenltZSBpbW11bm9hc3NheSAoRUlBKQoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiRW56eW1lIGltbXVub2Fzc2F5IGZvciBISVYgRS5ERTE3MCI6CiAgZXhpc3RzICJFbnp5bWUgaW1tdW5vYXNzYXkgZm9yIEhJViBFLkRFMTcwIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiRW56eW1lIGltbXVub2Fzc2F5IGZvciBISVYgRS5ERTE3MCBPYnNlcnZhdGlvbiIKZGVmaW5lICJFbnp5bWUgaW1tdW5vYXNzYXkgZm9yIEhJViBFLkRFMTcwIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIkVuenltZSBpbW11bm9hc3NheSBmb3IgSElWIEUuREUxNzAgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJFbnp5bWUgaW1tdW5vYXNzYXkgZm9yIEhJViBFLkRFMTcwIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iRW56eW1lIGltbXVub2Fzc2F5IGZvciBISVYgRS5ERTE3MCBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIEVuenltZSBpbW11bm9hc3NheSBmb3IgSElWIEUuREUxNzAgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkUuREUxNzEgLSBOdWNsZWljIGFjaWQgdGVzdCBmb3IgSElWCkBhY3Rpdml0eTogSElWLkU0IFRlc3QgbW90aGVyIGZvciBISVYgdXNpbmcgdGVzdGluZyBhbGdvcml0aG0KQGRlc2NyaXB0aW9uOiBWaXJvbG9naWNhbCB0ZXN0LCB3aGljaCBpbmNsdWRlcyB0ZXN0aW5nIGZvciBlYXJseSBpbmZhbnQgZGlhZ25vc2lzCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJOdWNsZWljIGFjaWQgdGVzdCBmb3IgSElWIEUuREUxNzEiOgogIGV4aXN0cyAiTnVjbGVpYyBhY2lkIHRlc3QgZm9yIEhJViBFLkRFMTcxIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiTnVjbGVpYyBhY2lkIHRlc3QgZm9yIEhJViBFLkRFMTcxIE9ic2VydmF0aW9uIgpkZWZpbmUgIk51Y2xlaWMgYWNpZCB0ZXN0IGZvciBISVYgRS5ERTE3MSBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJOdWNsZWljIGFjaWQgdGVzdCBmb3IgSElWIEUuREUxNzEgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJOdWNsZWljIGFjaWQgdGVzdCBmb3IgSElWIEUuREUxNzEgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJOdWNsZWljIGFjaWQgdGVzdCBmb3IgSElWIEUuREUxNzEgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBOdWNsZWljIGFjaWQgdGVzdCBmb3IgSElWIEUuREUxNzEgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkUuREUxNzIgLSBEdWFsIEhJVi9zeXBoaWxpcyByYXBpZCBkaWFnbm9zdGljIHRlc3QKQGFjdGl2aXR5OiBISVYuRTQgVGVzdCBtb3RoZXIgZm9yIEhJViB1c2luZyB0ZXN0aW5nIGFsZ29yaXRobQpAZGVzY3JpcHRpb246IEFudGlib2R5IHRlc3QgZm9yIEhJViBhbmQgc3lwaGlsaXMgcGVyZm9ybWVkIHdpdGggYSByYXBpZCBkaWFnbm9zdGljCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJEdWFsIEhJVi9zeXBoaWxpcyByYXBpZCBkaWFnbm9zdGljIHRlc3QgRS5ERTE3MiI6CiAgZXhpc3RzICJEdWFsIEhJVi9zeXBoaWxpcyByYXBpZCBkaWFnbm9zdGljIHRlc3QgRS5ERTE3MiBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIkR1YWwgSElWL3N5cGhpbGlzIHJhcGlkIGRpYWdub3N0aWMgdGVzdCBFLkRFMTcyIE9ic2VydmF0aW9uIgpkZWZpbmUgIkR1YWwgSElWL3N5cGhpbGlzIHJhcGlkIGRpYWdub3N0aWMgdGVzdCBFLkRFMTcyIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIkR1YWwgSElWL3N5cGhpbGlzIHJhcGlkIGRpYWdub3N0aWMgdGVzdCBFLkRFMTcyIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiRHVhbCBISVYvc3lwaGlsaXMgcmFwaWQgZGlhZ25vc3RpYyB0ZXN0IEUuREUxNzIgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJEdWFsIEhJVi9zeXBoaWxpcyByYXBpZCBkaWFnbm9zdGljIHRlc3QgRS5ERTE3MiBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIER1YWwgSElWL3N5cGhpbGlzIHJhcGlkIGRpYWdub3N0aWMgdGVzdCBFLkRFMTcyICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5FLkRFMTgwIC0gRUlEIHNhbXBsZSBudW1iZXIKQGFjdGl2aXR5OiBISVYuRjggVGVzdCBpbmZhbnQvY2hpbGQgZm9yIEhJViB1c2luZyB0ZXN0aW5nIGFsZ29yaXRobQpAZGVzY3JpcHRpb246IEVhcmx5IGluZmFudCBkaWFnbm9zaXMgKEVJRCkgc2FtcGxlIG51bWJlcgoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiRUlEIHNhbXBsZSBudW1iZXIiOgogIGV4aXN0cyAiRUlEIHNhbXBsZSBudW1iZXIgT2JzZXJ2YXRpb24iCmRlZmluZSAiRUlEIHNhbXBsZSBudW1iZXIgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJFSUQgc2FtcGxlIG51bWJlciBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIEVJRCBzYW1wbGUgbnVtYmVyICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5FLkRFMTgxIC0gRUlEIHNhbXBsZSAxCkBhY3Rpdml0eTogSElWLkY4IFRlc3QgaW5mYW50L2NoaWxkIGZvciBISVYgdXNpbmcgdGVzdGluZyBhbGdvcml0aG0KQGRlc2NyaXB0aW9uOiBGaXJzdCBzYW1wbGUgdXNlZCB0byB0ZXN0IGFuIGluZmFudCBmb3IgSElWCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJFSUQgc2FtcGxlIDEiOgogIGV4aXN0cyAiRUlEIHNhbXBsZSAxIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiRUlEIHNhbXBsZSAxIE9ic2VydmF0aW9uIgpkZWZpbmUgIkVJRCBzYW1wbGUgMSBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJFSUQgc2FtcGxlIDEgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJFSUQgc2FtcGxlIDEgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJFSUQgc2FtcGxlIDEgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBFSUQgc2FtcGxlIDEgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkUuREUxODIgLSBFSUQgc2FtcGxlIDIKQGFjdGl2aXR5OiBISVYuRjggVGVzdCBpbmZhbnQvY2hpbGQgZm9yIEhJViB1c2luZyB0ZXN0aW5nIGFsZ29yaXRobQpAZGVzY3JpcHRpb246IFNlY29uZCBzYW1wbGUgdXNlZCB0byB0ZXN0IGFuIGluZmFudCBmb3IgSElWCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJFSUQgc2FtcGxlIDIiOgogIGV4aXN0cyAiRUlEIHNhbXBsZSAyIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiRUlEIHNhbXBsZSAyIE9ic2VydmF0aW9uIgpkZWZpbmUgIkVJRCBzYW1wbGUgMiBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJFSUQgc2FtcGxlIDIgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJFSUQgc2FtcGxlIDIgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJFSUQgc2FtcGxlIDIgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBFSUQgc2FtcGxlIDIgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkUuREUxODMgLSBFSUQgdGVzdCBudW1iZXIKQGFjdGl2aXR5OiBISVYuRjggVGVzdCBpbmZhbnQvY2hpbGQgZm9yIEhJViB1c2luZyB0ZXN0aW5nIGFsZ29yaXRobQpAZGVzY3JpcHRpb246IEVhcmx5IGluZmFudCBkaWFnbm9zaXMgKEVJRCkgSElWIHRlc3QgbnVtYmVyIHVzaW5nIHRoZSBzYW1lIHNhbXBsZQoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiRUlEIHRlc3QgbnVtYmVyIjoKICBleGlzdHMgIkVJRCB0ZXN0IG51bWJlciBPYnNlcnZhdGlvbiIKZGVmaW5lICJFSUQgdGVzdCBudW1iZXIgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJFSUQgdGVzdCBudW1iZXIgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBFSUQgdGVzdCBudW1iZXIgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkUuREUxODQgLSBFSUQgdGVzdCBudW1iZXIgMQpAYWN0aXZpdHk6IEhJVi5GOCBUZXN0IGluZmFudC9jaGlsZCBmb3IgSElWIHVzaW5nIHRlc3RpbmcgYWxnb3JpdGhtCkBkZXNjcmlwdGlvbjogRmlyc3QgdGVzdCBvbiBhIHNhbXBsZSB0byB0ZXN0IGFuIGluZmFudCBmb3IgSElWCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJFSUQgdGVzdCBudW1iZXIgMSI6CiAgZXhpc3RzICJFSUQgdGVzdCBudW1iZXIgMSBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIkVJRCB0ZXN0IG51bWJlciAxIE9ic2VydmF0aW9uIgpkZWZpbmUgIkVJRCB0ZXN0IG51bWJlciAxIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIkVJRCB0ZXN0IG51bWJlciAxIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiRUlEIHRlc3QgbnVtYmVyIDEgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJFSUQgdGVzdCBudW1iZXIgMSBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIEVJRCB0ZXN0IG51bWJlciAxICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5FLkRFMTg1IC0gRUlEIHRlc3QgbnVtYmVyIDIKQGFjdGl2aXR5OiBISVYuRjggVGVzdCBpbmZhbnQvY2hpbGQgZm9yIEhJViB1c2luZyB0ZXN0aW5nIGFsZ29yaXRobQpAZGVzY3JpcHRpb246IFNlY29uZCB0ZXN0IG9uIGEgc2FtcGxlIHRvIHRlc3QgYW4gaW5mYW50IGZvciBISVYKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkVJRCB0ZXN0IG51bWJlciAyIjoKICBleGlzdHMgIkVJRCB0ZXN0IG51bWJlciAyIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiRUlEIHRlc3QgbnVtYmVyIDIgT2JzZXJ2YXRpb24iCmRlZmluZSAiRUlEIHRlc3QgbnVtYmVyIDIgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iRUlEIHRlc3QgbnVtYmVyIDIgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJFSUQgdGVzdCBudW1iZXIgMiBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkVJRCB0ZXN0IG51bWJlciAyIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgRUlEIHRlc3QgbnVtYmVyIDIgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkUuREUxODYgLSBFSUQgdGVzdCBudW1iZXIgMSB0ZXN0IHJlc3VsdApAYWN0aXZpdHk6IEhJVi5GOCBUZXN0IGluZmFudC9jaGlsZCBmb3IgSElWIHVzaW5nIHRlc3RpbmcgYWxnb3JpdGhtCkBkZXNjcmlwdGlvbjogRWFybHkgaW5mYW50IGRpYWdub3NpcyB0ZXN0IG51bWJlciAxIHRlc3QgcmVzdWx0CiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJFSUQgdGVzdCBudW1iZXIgMSB0ZXN0IHJlc3VsdCI6CiAgZXhpc3RzICJFSUQgdGVzdCBudW1iZXIgMSB0ZXN0IHJlc3VsdCBPYnNlcnZhdGlvbiIKZGVmaW5lICJFSUQgdGVzdCBudW1iZXIgMSB0ZXN0IHJlc3VsdCBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkVJRCB0ZXN0IG51bWJlciAxIHRlc3QgcmVzdWx0IE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgRUlEIHRlc3QgbnVtYmVyIDEgdGVzdCByZXN1bHQgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkUuREUxODcgLSBQb3NpdGl2ZQpAYWN0aXZpdHk6IEhJVi5GOCBUZXN0IGluZmFudC9jaGlsZCBmb3IgSElWIHVzaW5nIHRlc3RpbmcgYWxnb3JpdGhtCkBkZXNjcmlwdGlvbjogUG9zaXRpdmUgSElWIHRlc3QgcmVzdWx0IGZyb20gdGhlIG51Y2xlaWMgYWNpZCB0ZXN0CiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJQb3NpdGl2ZSBFLkRFMTg3IjoKICBleGlzdHMgIlBvc2l0aXZlIEUuREUxODcgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJQb3NpdGl2ZSBFLkRFMTg3IE9ic2VydmF0aW9uIgpkZWZpbmUgIlBvc2l0aXZlIEUuREUxODcgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iUG9zaXRpdmUgRS5ERTE4NyBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIlBvc2l0aXZlIEUuREUxODcgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJQb3NpdGl2ZSBFLkRFMTg3IE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgUG9zaXRpdmUgRS5ERTE4NyAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRS5ERTE4OCAtIE5lZ2F0aXZlCkBhY3Rpdml0eTogSElWLkY4IFRlc3QgaW5mYW50L2NoaWxkIGZvciBISVYgdXNpbmcgdGVzdGluZyBhbGdvcml0aG0KQGRlc2NyaXB0aW9uOiBOZWdhdGl2ZSBISVYgdGVzdCByZXN1bHQgZnJvbSB0aGUgbnVjbGVpYyBhY2lkIHRlc3QKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIk5lZ2F0aXZlIEUuREUxODgiOgogIGV4aXN0cyAiTmVnYXRpdmUgRS5ERTE4OCBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIk5lZ2F0aXZlIEUuREUxODggT2JzZXJ2YXRpb24iCmRlZmluZSAiTmVnYXRpdmUgRS5ERTE4OCBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJOZWdhdGl2ZSBFLkRFMTg4IENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiTmVnYXRpdmUgRS5ERTE4OCBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIk5lZ2F0aXZlIEUuREUxODggT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBOZWdhdGl2ZSBFLkRFMTg4ICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5FLkRFMTg5IC0gSW5kZXRlcm1pbmF0ZQpAYWN0aXZpdHk6IEhJVi5GOCBUZXN0IGluZmFudC9jaGlsZCBmb3IgSElWIHVzaW5nIHRlc3RpbmcgYWxnb3JpdGhtCkBkZXNjcmlwdGlvbjogSW5kZXRlcm1pbmF0ZSBISVYgdGVzdCByZXN1bHQgZnJvbSB0aGUgbnVjbGVpYyBhY2lkIHRlc3QKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkluZGV0ZXJtaW5hdGUgRS5ERTE4OSI6CiAgZXhpc3RzICJJbmRldGVybWluYXRlIEUuREUxODkgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJJbmRldGVybWluYXRlIEUuREUxODkgT2JzZXJ2YXRpb24iCmRlZmluZSAiSW5kZXRlcm1pbmF0ZSBFLkRFMTg5IENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIkluZGV0ZXJtaW5hdGUgRS5ERTE4OSBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIkluZGV0ZXJtaW5hdGUgRS5ERTE4OSBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkluZGV0ZXJtaW5hdGUgRS5ERTE4OSBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIEluZGV0ZXJtaW5hdGUgRS5ERTE4OSAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRS5ERTE5MCAtIEVJRCB0ZXN0IG51bWJlciAyIHRlc3QgcmVzdWx0CkBhY3Rpdml0eTogSElWLkY4IFRlc3QgaW5mYW50L2NoaWxkIGZvciBISVYgdXNpbmcgdGVzdGluZyBhbGdvcml0aG0KQGRlc2NyaXB0aW9uOiBFYXJseSBpbmZhbnQgZGlhZ25vc2lzIHRlc3QgbnVtYmVyIDIgdGVzdCByZXN1bHQKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkVJRCB0ZXN0IG51bWJlciAyIHRlc3QgcmVzdWx0IjoKICBleGlzdHMgIkVJRCB0ZXN0IG51bWJlciAyIHRlc3QgcmVzdWx0IE9ic2VydmF0aW9uIgpkZWZpbmUgIkVJRCB0ZXN0IG51bWJlciAyIHRlc3QgcmVzdWx0IE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iRUlEIHRlc3QgbnVtYmVyIDIgdGVzdCByZXN1bHQgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBFSUQgdGVzdCBudW1iZXIgMiB0ZXN0IHJlc3VsdCAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRS5ERTE5MSAtIFBvc2l0aXZlCkBhY3Rpdml0eTogSElWLkY4IFRlc3QgaW5mYW50L2NoaWxkIGZvciBISVYgdXNpbmcgdGVzdGluZyBhbGdvcml0aG0KQGRlc2NyaXB0aW9uOiBQb3NpdGl2ZSBISVYgdGVzdCByZXN1bHQgZnJvbSB0aGUgbnVjbGVpYyBhY2lkIHRlc3QKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIlBvc2l0aXZlIEUuREUxOTEiOgogIGV4aXN0cyAiUG9zaXRpdmUgRS5ERTE5MSBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIlBvc2l0aXZlIEUuREUxOTEgT2JzZXJ2YXRpb24iCmRlZmluZSAiUG9zaXRpdmUgRS5ERTE5MSBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJQb3NpdGl2ZSBFLkRFMTkxIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiUG9zaXRpdmUgRS5ERTE5MSBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIlBvc2l0aXZlIEUuREUxOTEgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBQb3NpdGl2ZSBFLkRFMTkxICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5FLkRFMTkyIC0gTmVnYXRpdmUKQGFjdGl2aXR5OiBISVYuRjggVGVzdCBpbmZhbnQvY2hpbGQgZm9yIEhJViB1c2luZyB0ZXN0aW5nIGFsZ29yaXRobQpAZGVzY3JpcHRpb246IE5lZ2F0aXZlIEhJViB0ZXN0IHJlc3VsdCBmcm9tIHRoZSBudWNsZWljIGFjaWQgdGVzdAoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiTmVnYXRpdmUgRS5ERTE5MiI6CiAgZXhpc3RzICJOZWdhdGl2ZSBFLkRFMTkyIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiTmVnYXRpdmUgRS5ERTE5MiBPYnNlcnZhdGlvbiIKZGVmaW5lICJOZWdhdGl2ZSBFLkRFMTkyIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIk5lZ2F0aXZlIEUuREUxOTIgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJOZWdhdGl2ZSBFLkRFMTkyIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iTmVnYXRpdmUgRS5ERTE5MiBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIE5lZ2F0aXZlIEUuREUxOTIgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkUuREUxOTMgLSBJbmRldGVybWluYXRlCkBhY3Rpdml0eTogSElWLkY4IFRlc3QgaW5mYW50L2NoaWxkIGZvciBISVYgdXNpbmcgdGVzdGluZyBhbGdvcml0aG0KQGRlc2NyaXB0aW9uOiBJbmRldGVybWluYXRlIEhJViB0ZXN0IHJlc3VsdCBmcm9tIHRoZSBudWNsZWljIGFjaWQgdGVzdAoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiSW5kZXRlcm1pbmF0ZSBFLkRFMTkzIjoKICBleGlzdHMgIkluZGV0ZXJtaW5hdGUgRS5ERTE5MyBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIkluZGV0ZXJtaW5hdGUgRS5ERTE5MyBPYnNlcnZhdGlvbiIKZGVmaW5lICJJbmRldGVybWluYXRlIEUuREUxOTMgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iSW5kZXRlcm1pbmF0ZSBFLkRFMTkzIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiSW5kZXRlcm1pbmF0ZSBFLkRFMTkzIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iSW5kZXRlcm1pbmF0ZSBFLkRFMTkzIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgSW5kZXRlcm1pbmF0ZSBFLkRFMTkzICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5FLkRFMTk0IC0gQXNzYXkgbnVtYmVyIGluIHRlc3Rpbmcgc3RyYXRlZ3kKQGFjdGl2aXR5OiBISVYuRTQgVGVzdCBtb3RoZXIgZm9yIEhJViB1c2luZyB0ZXN0aW5nIGFsZ29yaXRobQpAZGVzY3JpcHRpb246IFRoZSBudW1iZXIgb2YgdGhlIGFzc2F5ICh0ZXN0IGtpdCkgaW4gdGhlIEhJViB0ZXN0aW5nIHN0cmF0ZWd5CiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJBc3NheSBudW1iZXIgaW4gdGVzdGluZyBzdHJhdGVneSBFLkRFMTk0IjoKICBleGlzdHMgIkFzc2F5IG51bWJlciBpbiB0ZXN0aW5nIHN0cmF0ZWd5IEUuREUxOTQgT2JzZXJ2YXRpb24iCmRlZmluZSAiQXNzYXkgbnVtYmVyIGluIHRlc3Rpbmcgc3RyYXRlZ3kgRS5ERTE5NCBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkFzc2F5IG51bWJlciBpbiB0ZXN0aW5nIHN0cmF0ZWd5IEUuREUxOTQgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBBc3NheSBudW1iZXIgaW4gdGVzdGluZyBzdHJhdGVneSBFLkRFMTk0ICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5FLkRFMTk1IC0gQXNzYXkgMApAYWN0aXZpdHk6IEhJVi5FNCBUZXN0IG1vdGhlciBmb3IgSElWIHVzaW5nIHRlc3RpbmcgYWxnb3JpdGhtCkBkZXNjcmlwdGlvbjogQSBjb21tdW5pdHkgb3V0cmVhY2ggdGVzdC1mb3ItdHJpYWdlIG9yIHNlbGYtdGVzdCB3aGljaCBpcyBub3QgaW5jbHVkZWQgaW4gdGhlIEhJViB0ZXN0aW5nIHN0cmF0ZWd5CiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJBc3NheSAwIEUuREUxOTUiOgogIGV4aXN0cyAiQXNzYXkgMCBFLkRFMTk1IENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiQXNzYXkgMCBFLkRFMTk1IE9ic2VydmF0aW9uIgpkZWZpbmUgIkFzc2F5IDAgRS5ERTE5NSBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJBc3NheSAwIEUuREUxOTUgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJBc3NheSAwIEUuREUxOTUgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJBc3NheSAwIEUuREUxOTUgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBBc3NheSAwIEUuREUxOTUgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkUuREUxOTYgLSBBc3NheSAxCkBhY3Rpdml0eTogSElWLkU0IFRlc3QgbW90aGVyIGZvciBISVYgdXNpbmcgdGVzdGluZyBhbGdvcml0aG0KQGRlc2NyaXB0aW9uOiBUaGUgZmlyc3QgdGVzdCBpbiB0aGUgSElWIHRlc3Rpbmcgc3RyYXRlZ3kKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkFzc2F5IDEgRS5ERTE5NiI6CiAgZXhpc3RzICJBc3NheSAxIEUuREUxOTYgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJBc3NheSAxIEUuREUxOTYgT2JzZXJ2YXRpb24iCmRlZmluZSAiQXNzYXkgMSBFLkRFMTk2IENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIkFzc2F5IDEgRS5ERTE5NiBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIkFzc2F5IDEgRS5ERTE5NiBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkFzc2F5IDEgRS5ERTE5NiBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIEFzc2F5IDEgRS5ERTE5NiAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRS5ERTE5NyAtIEFzc2F5IDIKQGFjdGl2aXR5OiBISVYuRTQgVGVzdCBtb3RoZXIgZm9yIEhJViB1c2luZyB0ZXN0aW5nIGFsZ29yaXRobQpAZGVzY3JpcHRpb246IFRoZSBzZWNvbmQgdGVzdCBpbiB0aGUgSElWIHRlc3Rpbmcgc3RyYXRlZ3kKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkFzc2F5IDIgRS5ERTE5NyI6CiAgZXhpc3RzICJBc3NheSAyIEUuREUxOTcgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJBc3NheSAyIEUuREUxOTcgT2JzZXJ2YXRpb24iCmRlZmluZSAiQXNzYXkgMiBFLkRFMTk3IENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIkFzc2F5IDIgRS5ERTE5NyBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIkFzc2F5IDIgRS5ERTE5NyBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkFzc2F5IDIgRS5ERTE5NyBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIEFzc2F5IDIgRS5ERTE5NyAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRS5ERTE5OCAtIEFzc2F5IDMKQGFjdGl2aXR5OiBISVYuRTQgVGVzdCBtb3RoZXIgZm9yIEhJViB1c2luZyB0ZXN0aW5nIGFsZ29yaXRobQpAZGVzY3JpcHRpb246IFRoZSB0aGlyZCB0ZXN0IGluIHRoZSBISVYgdGVzdGluZyBzdHJhdGVneQoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiQXNzYXkgMyBFLkRFMTk4IjoKICBleGlzdHMgIkFzc2F5IDMgRS5ERTE5OCBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIkFzc2F5IDMgRS5ERTE5OCBPYnNlcnZhdGlvbiIKZGVmaW5lICJBc3NheSAzIEUuREUxOTggQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iQXNzYXkgMyBFLkRFMTk4IENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiQXNzYXkgMyBFLkRFMTk4IE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iQXNzYXkgMyBFLkRFMTk4IE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgQXNzYXkgMyBFLkRFMTk4ICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5FLkRFMTk5IC0gQXNzYXkgMSByZXBlYXRlZApAYWN0aXZpdHk6IEhJVi5FNCBUZXN0IG1vdGhlciBmb3IgSElWIHVzaW5nIHRlc3RpbmcgYWxnb3JpdGhtCkBkZXNjcmlwdGlvbjogVGhlIGZpcnN0IHRlc3QgaW4gdGhlIEhJViB0ZXN0aW5nIHN0cmF0ZWd5CiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJBc3NheSAxIHJlcGVhdGVkIEUuREUxOTkiOgogIGV4aXN0cyAiQXNzYXkgMSByZXBlYXRlZCBFLkRFMTk5IENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiQXNzYXkgMSByZXBlYXRlZCBFLkRFMTk5IE9ic2VydmF0aW9uIgpkZWZpbmUgIkFzc2F5IDEgcmVwZWF0ZWQgRS5ERTE5OSBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJBc3NheSAxIHJlcGVhdGVkIEUuREUxOTkgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJBc3NheSAxIHJlcGVhdGVkIEUuREUxOTkgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJBc3NheSAxIHJlcGVhdGVkIEUuREUxOTkgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBBc3NheSAxIHJlcGVhdGVkIEUuREUxOTkgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkUuREUyMDAgLSBUZXN0IHJlc3VsdCBvZiBISVYgYXNzYXkgMQpAYWN0aXZpdHk6IEhJVi5FNCBUZXN0IG1vdGhlciBmb3IgSElWIHVzaW5nIHRlc3RpbmcgYWxnb3JpdGhtCkBkZXNjcmlwdGlvbjogVGhlIHJlc3VsdCBvZiB0aGUgZmlyc3QgSElWIGFzc2F5IGluIHRoZSB0ZXN0aW5nIHN0cmF0ZWd5CiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJUZXN0IHJlc3VsdCBvZiBISVYgYXNzYXkgMSBFLkRFMjAwIjoKICBleGlzdHMgIlRlc3QgcmVzdWx0IG9mIEhJViBhc3NheSAxIEUuREUyMDAgT2JzZXJ2YXRpb24iCmRlZmluZSAiVGVzdCByZXN1bHQgb2YgSElWIGFzc2F5IDEgRS5ERTIwMCBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIlRlc3QgcmVzdWx0IG9mIEhJViBhc3NheSAxIEUuREUyMDAgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBUZXN0IHJlc3VsdCBvZiBISVYgYXNzYXkgMSBFLkRFMjAwICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5FLkRFMjAxIC0gUmVhY3RpdmUKQGFjdGl2aXR5OiBISVYuRTQgVGVzdCBtb3RoZXIgZm9yIEhJViB1c2luZyB0ZXN0aW5nIGFsZ29yaXRobQpAZGVzY3JpcHRpb246IFRoZSByZXN1bHQgb2YgdGhlIEhJViBhc3NheSBpbiB0aGUgdGVzdGluZyBzdHJhdGVneSB3YXMgcmVhY3RpdmUKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIlJlYWN0aXZlIEUuREUyMDEiOgogIGV4aXN0cyAiUmVhY3RpdmUgRS5ERTIwMSBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIlJlYWN0aXZlIEUuREUyMDEgT2JzZXJ2YXRpb24iCmRlZmluZSAiUmVhY3RpdmUgRS5ERTIwMSBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJSZWFjdGl2ZSBFLkRFMjAxIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiUmVhY3RpdmUgRS5ERTIwMSBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIlJlYWN0aXZlIEUuREUyMDEgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBSZWFjdGl2ZSBFLkRFMjAxICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5FLkRFMjAyIC0gTm9uLXJlYWN0aXZlCkBhY3Rpdml0eTogSElWLkU0IFRlc3QgbW90aGVyIGZvciBISVYgdXNpbmcgdGVzdGluZyBhbGdvcml0aG0KQGRlc2NyaXB0aW9uOiBUaGUgcmVzdWx0IG9mIHRoZSBISVYgYXNzYXkgaW4gdGhlIHRlc3Rpbmcgc3RyYXRlZ3kgd2FzIG5vbi1yZWFjdGl2ZQoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiTm9uLXJlYWN0aXZlIEUuREUyMDIiOgogIGV4aXN0cyAiTm9uLXJlYWN0aXZlIEUuREUyMDIgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJOb24tcmVhY3RpdmUgRS5ERTIwMiBPYnNlcnZhdGlvbiIKZGVmaW5lICJOb24tcmVhY3RpdmUgRS5ERTIwMiBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJOb24tcmVhY3RpdmUgRS5ERTIwMiBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIk5vbi1yZWFjdGl2ZSBFLkRFMjAyIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iTm9uLXJlYWN0aXZlIEUuREUyMDIgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBOb24tcmVhY3RpdmUgRS5ERTIwMiAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRS5ERTIwMyAtIEludmFsaWQKQGFjdGl2aXR5OiBISVYuRTQgVGVzdCBtb3RoZXIgZm9yIEhJViB1c2luZyB0ZXN0aW5nIGFsZ29yaXRobQpAZGVzY3JpcHRpb246IFRoZSByZXN1bHQgb2YgdGhlIEhJViBhc3NheSBpbiB0aGUgdGVzdGluZyBzdHJhdGVneSB3YXMgaW52YWxpZAoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiSW52YWxpZCBFLkRFMjAzIjoKICBleGlzdHMgIkludmFsaWQgRS5ERTIwMyBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIkludmFsaWQgRS5ERTIwMyBPYnNlcnZhdGlvbiIKZGVmaW5lICJJbnZhbGlkIEUuREUyMDMgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iSW52YWxpZCBFLkRFMjAzIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiSW52YWxpZCBFLkRFMjAzIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iSW52YWxpZCBFLkRFMjAzIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgSW52YWxpZCBFLkRFMjAzICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5FLkRFMjA0IC0gVGVzdCByZXN1bHQgb2YgSElWIGFzc2F5IDIKQGFjdGl2aXR5OiBISVYuRTQgVGVzdCBtb3RoZXIgZm9yIEhJViB1c2luZyB0ZXN0aW5nIGFsZ29yaXRobQpAZGVzY3JpcHRpb246IFRoZSByZXN1bHQgb2YgdGhlIHNlY29uZCBISVYgYXNzYXkgaW4gdGhlIHRlc3Rpbmcgc3RyYXRlZ3kKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIlRlc3QgcmVzdWx0IG9mIEhJViBhc3NheSAyIEUuREUyMDQiOgogIGV4aXN0cyAiVGVzdCByZXN1bHQgb2YgSElWIGFzc2F5IDIgRS5ERTIwNCBPYnNlcnZhdGlvbiIKZGVmaW5lICJUZXN0IHJlc3VsdCBvZiBISVYgYXNzYXkgMiBFLkRFMjA0IE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iVGVzdCByZXN1bHQgb2YgSElWIGFzc2F5IDIgRS5ERTIwNCBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIFRlc3QgcmVzdWx0IG9mIEhJViBhc3NheSAyIEUuREUyMDQgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkUuREUyMDUgLSBSZWFjdGl2ZQpAYWN0aXZpdHk6IEhJVi5FNCBUZXN0IG1vdGhlciBmb3IgSElWIHVzaW5nIHRlc3RpbmcgYWxnb3JpdGhtCkBkZXNjcmlwdGlvbjogVGhlIHJlc3VsdCBvZiB0aGUgSElWIGFzc2F5IGluIHRoZSB0ZXN0aW5nIHN0cmF0ZWd5IHdhcyByZWFjdGl2ZQoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiUmVhY3RpdmUgRS5ERTIwNSI6CiAgZXhpc3RzICJSZWFjdGl2ZSBFLkRFMjA1IENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiUmVhY3RpdmUgRS5ERTIwNSBPYnNlcnZhdGlvbiIKZGVmaW5lICJSZWFjdGl2ZSBFLkRFMjA1IENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIlJlYWN0aXZlIEUuREUyMDUgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJSZWFjdGl2ZSBFLkRFMjA1IE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iUmVhY3RpdmUgRS5ERTIwNSBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIFJlYWN0aXZlIEUuREUyMDUgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkUuREUyMDYgLSBOb24tcmVhY3RpdmUKQGFjdGl2aXR5OiBISVYuRTQgVGVzdCBtb3RoZXIgZm9yIEhJViB1c2luZyB0ZXN0aW5nIGFsZ29yaXRobQpAZGVzY3JpcHRpb246IFRoZSByZXN1bHQgb2YgdGhlIEhJViBhc3NheSBpbiB0aGUgdGVzdGluZyBzdHJhdGVneSB3YXMgbm9uLXJlYWN0aXZlCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJOb24tcmVhY3RpdmUgRS5ERTIwNiI6CiAgZXhpc3RzICJOb24tcmVhY3RpdmUgRS5ERTIwNiBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIk5vbi1yZWFjdGl2ZSBFLkRFMjA2IE9ic2VydmF0aW9uIgpkZWZpbmUgIk5vbi1yZWFjdGl2ZSBFLkRFMjA2IENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIk5vbi1yZWFjdGl2ZSBFLkRFMjA2IENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiTm9uLXJlYWN0aXZlIEUuREUyMDYgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJOb24tcmVhY3RpdmUgRS5ERTIwNiBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIE5vbi1yZWFjdGl2ZSBFLkRFMjA2ICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5FLkRFMjA3IC0gSW52YWxpZApAYWN0aXZpdHk6IEhJVi5FNCBUZXN0IG1vdGhlciBmb3IgSElWIHVzaW5nIHRlc3RpbmcgYWxnb3JpdGhtCkBkZXNjcmlwdGlvbjogVGhlIHJlc3VsdCBvZiB0aGUgSElWIGFzc2F5IGluIHRoZSB0ZXN0aW5nIHN0cmF0ZWd5IHdhcyBpbnZhbGlkCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJJbnZhbGlkIEUuREUyMDciOgogIGV4aXN0cyAiSW52YWxpZCBFLkRFMjA3IENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiSW52YWxpZCBFLkRFMjA3IE9ic2VydmF0aW9uIgpkZWZpbmUgIkludmFsaWQgRS5ERTIwNyBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJJbnZhbGlkIEUuREUyMDcgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJJbnZhbGlkIEUuREUyMDcgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJJbnZhbGlkIEUuREUyMDcgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBJbnZhbGlkIEUuREUyMDcgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkUuREUyMDggLSBUZXN0IHJlc3VsdCBvZiBISVYgYXNzYXkgMwpAYWN0aXZpdHk6IEhJVi5FNCBUZXN0IG1vdGhlciBmb3IgSElWIHVzaW5nIHRlc3RpbmcgYWxnb3JpdGhtCkBkZXNjcmlwdGlvbjogVGhlIHJlc3VsdCBvZiB0aGUgdGhpcmQgSElWIGFzc2F5IGluIHRoZSB0ZXN0aW5nIHN0cmF0ZWd5CiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJUZXN0IHJlc3VsdCBvZiBISVYgYXNzYXkgMyBFLkRFMjA4IjoKICBleGlzdHMgIlRlc3QgcmVzdWx0IG9mIEhJViBhc3NheSAzIEUuREUyMDggT2JzZXJ2YXRpb24iCmRlZmluZSAiVGVzdCByZXN1bHQgb2YgSElWIGFzc2F5IDMgRS5ERTIwOCBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIlRlc3QgcmVzdWx0IG9mIEhJViBhc3NheSAzIEUuREUyMDggT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBUZXN0IHJlc3VsdCBvZiBISVYgYXNzYXkgMyBFLkRFMjA4ICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5FLkRFMjA5IC0gUmVhY3RpdmUKQGFjdGl2aXR5OiBISVYuRTQgVGVzdCBtb3RoZXIgZm9yIEhJViB1c2luZyB0ZXN0aW5nIGFsZ29yaXRobQpAZGVzY3JpcHRpb246IFRoZSByZXN1bHQgb2YgdGhlIEhJViBhc3NheSBpbiB0aGUgdGVzdGluZyBzdHJhdGVneSB3YXMgcmVhY3RpdmUKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIlJlYWN0aXZlIEUuREUyMDkiOgogIGV4aXN0cyAiUmVhY3RpdmUgRS5ERTIwOSBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIlJlYWN0aXZlIEUuREUyMDkgT2JzZXJ2YXRpb24iCmRlZmluZSAiUmVhY3RpdmUgRS5ERTIwOSBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJSZWFjdGl2ZSBFLkRFMjA5IENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiUmVhY3RpdmUgRS5ERTIwOSBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIlJlYWN0aXZlIEUuREUyMDkgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBSZWFjdGl2ZSBFLkRFMjA5ICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5FLkRFMjEwIC0gTm9uLXJlYWN0aXZlCkBhY3Rpdml0eTogSElWLkU0IFRlc3QgbW90aGVyIGZvciBISVYgdXNpbmcgdGVzdGluZyBhbGdvcml0aG0KQGRlc2NyaXB0aW9uOiBUaGUgcmVzdWx0IG9mIHRoZSBISVYgYXNzYXkgaW4gdGhlIHRlc3Rpbmcgc3RyYXRlZ3kgd2FzIG5vbi1yZWFjdGl2ZQoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiTm9uLXJlYWN0aXZlIEUuREUyMTAiOgogIGV4aXN0cyAiTm9uLXJlYWN0aXZlIEUuREUyMTAgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJOb24tcmVhY3RpdmUgRS5ERTIxMCBPYnNlcnZhdGlvbiIKZGVmaW5lICJOb24tcmVhY3RpdmUgRS5ERTIxMCBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJOb24tcmVhY3RpdmUgRS5ERTIxMCBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIk5vbi1yZWFjdGl2ZSBFLkRFMjEwIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iTm9uLXJlYWN0aXZlIEUuREUyMTAgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBOb24tcmVhY3RpdmUgRS5ERTIxMCAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRS5ERTIxMSAtIEludmFsaWQKQGFjdGl2aXR5OiBISVYuRTQgVGVzdCBtb3RoZXIgZm9yIEhJViB1c2luZyB0ZXN0aW5nIGFsZ29yaXRobQpAZGVzY3JpcHRpb246IFRoZSByZXN1bHQgb2YgdGhlIEhJViBhc3NheSBpbiB0aGUgdGVzdGluZyBzdHJhdGVneSB3YXMgaW52YWxpZAoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiSW52YWxpZCBFLkRFMjExIjoKICBleGlzdHMgIkludmFsaWQgRS5ERTIxMSBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIkludmFsaWQgRS5ERTIxMSBPYnNlcnZhdGlvbiIKZGVmaW5lICJJbnZhbGlkIEUuREUyMTEgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iSW52YWxpZCBFLkRFMjExIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiSW52YWxpZCBFLkRFMjExIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iSW52YWxpZCBFLkRFMjExIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgSW52YWxpZCBFLkRFMjExICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5FLkRFMjEyIC0gVGVzdCByZXN1bHQgb2YgSElWIGFzc2F5IDEgcmVwZWF0ZWQKQGFjdGl2aXR5OiBISVYuRTQgVGVzdCBtb3RoZXIgZm9yIEhJViB1c2luZyB0ZXN0aW5nIGFsZ29yaXRobQpAZGVzY3JpcHRpb246IFRoZSByZXN1bHQgb2YgdGhlIHJlcGVhdGVkIGZpcnN0IEhJViBhc3NheSBpbiB0aGUgdGVzdGluZyBzdHJhdGVneQoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiVGVzdCByZXN1bHQgb2YgSElWIGFzc2F5IDEgcmVwZWF0ZWQgRS5ERTIxMiI6CiAgZXhpc3RzICJUZXN0IHJlc3VsdCBvZiBISVYgYXNzYXkgMSByZXBlYXRlZCBFLkRFMjEyIE9ic2VydmF0aW9uIgpkZWZpbmUgIlRlc3QgcmVzdWx0IG9mIEhJViBhc3NheSAxIHJlcGVhdGVkIEUuREUyMTIgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJUZXN0IHJlc3VsdCBvZiBISVYgYXNzYXkgMSByZXBlYXRlZCBFLkRFMjEyIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgVGVzdCByZXN1bHQgb2YgSElWIGFzc2F5IDEgcmVwZWF0ZWQgRS5ERTIxMiAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRS5ERTIxMyAtIFJlYWN0aXZlCkBhY3Rpdml0eTogSElWLkU0IFRlc3QgbW90aGVyIGZvciBISVYgdXNpbmcgdGVzdGluZyBhbGdvcml0aG0KQGRlc2NyaXB0aW9uOiBUaGUgcmVzdWx0IG9mIHRoZSBISVYgYXNzYXkgaW4gdGhlIHRlc3Rpbmcgc3RyYXRlZ3kgd2FzIHJlYWN0aXZlCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJSZWFjdGl2ZSBFLkRFMjEzIjoKICBleGlzdHMgIlJlYWN0aXZlIEUuREUyMTMgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJSZWFjdGl2ZSBFLkRFMjEzIE9ic2VydmF0aW9uIgpkZWZpbmUgIlJlYWN0aXZlIEUuREUyMTMgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iUmVhY3RpdmUgRS5ERTIxMyBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIlJlYWN0aXZlIEUuREUyMTMgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJSZWFjdGl2ZSBFLkRFMjEzIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgUmVhY3RpdmUgRS5ERTIxMyAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRS5ERTIxNCAtIE5vbi1yZWFjdGl2ZQpAYWN0aXZpdHk6IEhJVi5FNCBUZXN0IG1vdGhlciBmb3IgSElWIHVzaW5nIHRlc3RpbmcgYWxnb3JpdGhtCkBkZXNjcmlwdGlvbjogVGhlIHJlc3VsdCBvZiB0aGUgSElWIGFzc2F5IGluIHRoZSB0ZXN0aW5nIHN0cmF0ZWd5IHdhcyBub24tcmVhY3RpdmUKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIk5vbi1yZWFjdGl2ZSBFLkRFMjE0IjoKICBleGlzdHMgIk5vbi1yZWFjdGl2ZSBFLkRFMjE0IENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiTm9uLXJlYWN0aXZlIEUuREUyMTQgT2JzZXJ2YXRpb24iCmRlZmluZSAiTm9uLXJlYWN0aXZlIEUuREUyMTQgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iTm9uLXJlYWN0aXZlIEUuREUyMTQgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJOb24tcmVhY3RpdmUgRS5ERTIxNCBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIk5vbi1yZWFjdGl2ZSBFLkRFMjE0IE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgTm9uLXJlYWN0aXZlIEUuREUyMTQgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkUuREUyMTUgLSBJbnZhbGlkCkBhY3Rpdml0eTogSElWLkU0IFRlc3QgbW90aGVyIGZvciBISVYgdXNpbmcgdGVzdGluZyBhbGdvcml0aG0KQGRlc2NyaXB0aW9uOiBUaGUgcmVzdWx0IG9mIHRoZSBISVYgYXNzYXkgaW4gdGhlIHRlc3Rpbmcgc3RyYXRlZ3kgd2FzIGludmFsaWQKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkludmFsaWQgRS5ERTIxNSI6CiAgZXhpc3RzICJJbnZhbGlkIEUuREUyMTUgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJJbnZhbGlkIEUuREUyMTUgT2JzZXJ2YXRpb24iCmRlZmluZSAiSW52YWxpZCBFLkRFMjE1IENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIkludmFsaWQgRS5ERTIxNSBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIkludmFsaWQgRS5ERTIxNSBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkludmFsaWQgRS5ERTIxNSBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIEludmFsaWQgRS5ERTIxNSAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRS5ERTIxNiAtIFRlc3QgcmVzdWx0IG9mIHN5cGhpbGlzIGFzc2F5IDEKQGFjdGl2aXR5OiBISVYuRTQgVGVzdCBtb3RoZXIgZm9yIEhJViB1c2luZyB0ZXN0aW5nIGFsZ29yaXRobQpAZGVzY3JpcHRpb246IFRoZSByZXN1bHQgb2YgdGhlIGZpcnN0IHN5cGhpbGlzIGFzc2F5IGluIHRoZSB0ZXN0aW5nIHN0cmF0ZWd5CiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJUZXN0IHJlc3VsdCBvZiBzeXBoaWxpcyBhc3NheSAxIjoKICBleGlzdHMgIlRlc3QgcmVzdWx0IG9mIHN5cGhpbGlzIGFzc2F5IDEgT2JzZXJ2YXRpb24iCmRlZmluZSAiVGVzdCByZXN1bHQgb2Ygc3lwaGlsaXMgYXNzYXkgMSBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIlRlc3QgcmVzdWx0IG9mIHN5cGhpbGlzIGFzc2F5IDEgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBUZXN0IHJlc3VsdCBvZiBzeXBoaWxpcyBhc3NheSAxICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5FLkRFMjE3IC0gUmVhY3RpdmUKQGFjdGl2aXR5OiBISVYuRTQgVGVzdCBtb3RoZXIgZm9yIEhJViB1c2luZyB0ZXN0aW5nIGFsZ29yaXRobQpAZGVzY3JpcHRpb246IFRoZSByZXN1bHQgb2YgdGhlIGZpcnN0IHN5cGhpbGlzIGFzc2F5IGluIHRoZSB0ZXN0aW5nIHN0cmF0ZWd5IHdhcyByZWFjdGl2ZQoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiUmVhY3RpdmUgRS5ERTIxNyI6CiAgZXhpc3RzICJSZWFjdGl2ZSBFLkRFMjE3IENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiUmVhY3RpdmUgRS5ERTIxNyBPYnNlcnZhdGlvbiIKZGVmaW5lICJSZWFjdGl2ZSBFLkRFMjE3IENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIlJlYWN0aXZlIEUuREUyMTcgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJSZWFjdGl2ZSBFLkRFMjE3IE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iUmVhY3RpdmUgRS5ERTIxNyBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIFJlYWN0aXZlIEUuREUyMTcgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkUuREUyMTggLSBOb24tcmVhY3RpdmUKQGFjdGl2aXR5OiBISVYuRTQgVGVzdCBtb3RoZXIgZm9yIEhJViB1c2luZyB0ZXN0aW5nIGFsZ29yaXRobQpAZGVzY3JpcHRpb246IFRoZSByZXN1bHQgb2YgdGhlIGZpcnN0IHN5cGhpbGlzIGFzc2F5IGluIHRoZSB0ZXN0aW5nIHN0cmF0ZWd5IHdhcyBub24tcmVhY3RpdmUKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIk5vbi1yZWFjdGl2ZSBFLkRFMjE4IjoKICBleGlzdHMgIk5vbi1yZWFjdGl2ZSBFLkRFMjE4IENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiTm9uLXJlYWN0aXZlIEUuREUyMTggT2JzZXJ2YXRpb24iCmRlZmluZSAiTm9uLXJlYWN0aXZlIEUuREUyMTggQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iTm9uLXJlYWN0aXZlIEUuREUyMTggQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJOb24tcmVhY3RpdmUgRS5ERTIxOCBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIk5vbi1yZWFjdGl2ZSBFLkRFMjE4IE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgTm9uLXJlYWN0aXZlIEUuREUyMTggKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkUuREUyMTkgLSBJbnZhbGlkCkBhY3Rpdml0eTogSElWLkU0IFRlc3QgbW90aGVyIGZvciBISVYgdXNpbmcgdGVzdGluZyBhbGdvcml0aG0KQGRlc2NyaXB0aW9uOiBUaGUgcmVzdWx0IG9mIHRoZSBISVYgYXNzYXkgaW4gdGhlIHRlc3Rpbmcgc3RyYXRlZ3kgd2FzIGludmFsaWQKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkludmFsaWQgRS5ERTIxOSI6CiAgZXhpc3RzICJJbnZhbGlkIEUuREUyMTkgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJJbnZhbGlkIEUuREUyMTkgT2JzZXJ2YXRpb24iCmRlZmluZSAiSW52YWxpZCBFLkRFMjE5IENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIkludmFsaWQgRS5ERTIxOSBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIkludmFsaWQgRS5ERTIxOSBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkludmFsaWQgRS5ERTIxOSBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIEludmFsaWQgRS5ERTIxOSAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRS5ERTIyMCAtIFRlc3QgcmVzdWx0IG9mIHN5cGhpbGlzIGFzc2F5IDEgcmVwZWF0ZWQKQGFjdGl2aXR5OiBISVYuRTQgVGVzdCBtb3RoZXIgZm9yIEhJViB1c2luZyB0ZXN0aW5nIGFsZ29yaXRobQpAZGVzY3JpcHRpb246IFRoZSByZXN1bHQgb2YgdGhlIGZpcnN0IHN5cGhpbGlzIGFzc2F5IHJlcGVhdGVkIGluIHRoZSB0ZXN0aW5nIHN0cmF0ZWd5CiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJUZXN0IHJlc3VsdCBvZiBzeXBoaWxpcyBhc3NheSAxIHJlcGVhdGVkIjoKICBleGlzdHMgIlRlc3QgcmVzdWx0IG9mIHN5cGhpbGlzIGFzc2F5IDEgcmVwZWF0ZWQgT2JzZXJ2YXRpb24iCmRlZmluZSAiVGVzdCByZXN1bHQgb2Ygc3lwaGlsaXMgYXNzYXkgMSByZXBlYXRlZCBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIlRlc3QgcmVzdWx0IG9mIHN5cGhpbGlzIGFzc2F5IDEgcmVwZWF0ZWQgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBUZXN0IHJlc3VsdCBvZiBzeXBoaWxpcyBhc3NheSAxIHJlcGVhdGVkICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5FLkRFMjIxIC0gUmVhY3RpdmUKQGFjdGl2aXR5OiBISVYuRTQgVGVzdCBtb3RoZXIgZm9yIEhJViB1c2luZyB0ZXN0aW5nIGFsZ29yaXRobQpAZGVzY3JpcHRpb246IFRoZSByZXN1bHQgb2YgdGhlIGZpcnN0IHN5cGhpbGlzIGFzc2F5IHJlcGVhdGVkIGluIHRoZSB0ZXN0aW5nIHN0cmF0ZWd5IHdhcyByZWFjdGl2ZQoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiUmVhY3RpdmUgRS5ERTIyMSI6CiAgZXhpc3RzICJSZWFjdGl2ZSBFLkRFMjIxIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiUmVhY3RpdmUgRS5ERTIyMSBPYnNlcnZhdGlvbiIKZGVmaW5lICJSZWFjdGl2ZSBFLkRFMjIxIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIlJlYWN0aXZlIEUuREUyMjEgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJSZWFjdGl2ZSBFLkRFMjIxIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iUmVhY3RpdmUgRS5ERTIyMSBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIFJlYWN0aXZlIEUuREUyMjEgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkUuREUyMjIgLSBOb24tcmVhY3RpdmUKQGFjdGl2aXR5OiBISVYuRTQgVGVzdCBtb3RoZXIgZm9yIEhJViB1c2luZyB0ZXN0aW5nIGFsZ29yaXRobQpAZGVzY3JpcHRpb246IFRoZSByZXN1bHQgb2YgdGhlIGZpcnN0IHN5cGhpbGlzIGFzc2F5IHJlcGVhdGVkIGluIHRoZSB0ZXN0aW5nIHN0cmF0ZWd5IHdhcyBub24tcmVhY3RpdmUKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIk5vbi1yZWFjdGl2ZSBFLkRFMjIyIjoKICBleGlzdHMgIk5vbi1yZWFjdGl2ZSBFLkRFMjIyIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiTm9uLXJlYWN0aXZlIEUuREUyMjIgT2JzZXJ2YXRpb24iCmRlZmluZSAiTm9uLXJlYWN0aXZlIEUuREUyMjIgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iTm9uLXJlYWN0aXZlIEUuREUyMjIgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJOb24tcmVhY3RpdmUgRS5ERTIyMiBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIk5vbi1yZWFjdGl2ZSBFLkRFMjIyIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgTm9uLXJlYWN0aXZlIEUuREUyMjIgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkUuREUyMjMgLSBJbnZhbGlkCkBhY3Rpdml0eTogSElWLkU0IFRlc3QgbW90aGVyIGZvciBISVYgdXNpbmcgdGVzdGluZyBhbGdvcml0aG0KQGRlc2NyaXB0aW9uOiBUaGUgcmVzdWx0IG9mIHRoZSBmaXJzdCBzeXBoaWxpcyBhc3NheSByZXBlYXRlZCBpbiB0aGUgdGVzdGluZyBzdHJhdGVneSB3YXMgaW52YWxpZAoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiSW52YWxpZCBFLkRFMjIzIjoKICBleGlzdHMgIkludmFsaWQgRS5ERTIyMyBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIkludmFsaWQgRS5ERTIyMyBPYnNlcnZhdGlvbiIKZGVmaW5lICJJbnZhbGlkIEUuREUyMjMgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iSW52YWxpZCBFLkRFMjIzIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiSW52YWxpZCBFLkRFMjIzIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iSW52YWxpZCBFLkRFMjIzIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgSW52YWxpZCBFLkRFMjIzICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5HLkRFMSAtIENENCBjb3VudApAYWN0aXZpdHk6IEhJVi5EMjAgRGlhZ25vc3RpY3MKQGRlc2NyaXB0aW9uOiBDRDQgY2VsbCBjb3VudCBpbiBjZWxscy9tbV4zCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJDRDQgY291bnQgRy5ERTEiOgogIEVsZW1lbnRzLiJDRDQgY291bnQgRy5ERTEiIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiQ0Q0IGNvdW50IEcuREUxIFZhbHVlIjoKICAiQ0Q0IGNvdW50IEcuREUxIiBPCiAgcmV0dXJuIE8udmFsdWUKLyogRW5kIG9mIENENCBjb3VudCBHLkRFMSAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRy5ERTggLSBEYXRlIG9mIHZpcmFsIGxvYWQgc2FtcGxlIGNvbGxlY3Rpb24KQGFjdGl2aXR5OiBISVYuRDIwIERpYWdub3N0aWNzCkBkZXNjcmlwdGlvbjogRGF0ZSBhbmQgdGltZSB3aGVuIHRoZSBzYW1wbGUgd2FzIGNvbGxlY3RlZCB0byB0ZXN0IHRoZSBjbGllbnQncyBISVYgdmlyYWwgbG9hZAoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiRGF0ZSBvZiB2aXJhbCBsb2FkIHNhbXBsZSBjb2xsZWN0aW9uIEcuREU4IjoKICBFbGVtZW50cy4iRGF0ZSBvZiB2aXJhbCBsb2FkIHNhbXBsZSBjb2xsZWN0aW9uIEcuREU4IiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIkRhdGUgb2YgdmlyYWwgbG9hZCBzYW1wbGUgY29sbGVjdGlvbiBHLkRFOCBWYWx1ZSI6CiAgIkRhdGUgb2YgdmlyYWwgbG9hZCBzYW1wbGUgY29sbGVjdGlvbiBHLkRFOCIgTwogIHJldHVybiBPLnZhbHVlCi8qIEVuZCBvZiBEYXRlIG9mIHZpcmFsIGxvYWQgc2FtcGxlIGNvbGxlY3Rpb24gRy5ERTggKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkcuREUxMiAtIFZpcmFsIGxvYWQgdGVzdCByZXN1bHQKQGFjdGl2aXR5OiBISVYuRDIwIERpYWdub3N0aWNzCkBkZXNjcmlwdGlvbjogUmVzdWx0IGZyb20gdGhlIHZpcmFsIGxvYWQgdGVzdCBpbiBudW1iZXIgb2YgY29waWVzL21MCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJWaXJhbCBsb2FkIHRlc3QgcmVzdWx0IEcuREUxMiI6CiAgRWxlbWVudHMuIlZpcmFsIGxvYWQgdGVzdCByZXN1bHQgRy5ERTEyIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIlZpcmFsIGxvYWQgdGVzdCByZXN1bHQgRy5ERTEyIFZhbHVlIjoKICAiVmlyYWwgbG9hZCB0ZXN0IHJlc3VsdCBHLkRFMTIiIE8KICByZXR1cm4gTy52YWx1ZQovKiBFbmQgb2YgVmlyYWwgbG9hZCB0ZXN0IHJlc3VsdCBHLkRFMTIgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkcuREUxOCAtIEhCc0FnIHRlc3QgcmVzdWx0CkBhY3Rpdml0eTogSElWLkQyMCBEaWFnbm9zdGljcwpAZGVzY3JpcHRpb246IEhlcGF0aXRpcyBCIHZpcnVzIHRlc3QgcmVzdWx0IChIQnNBZykKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkhCc0FnIHRlc3QgcmVzdWx0IEcuREUxOCI6CiAgZXhpc3RzICJIQnNBZyB0ZXN0IHJlc3VsdCBHLkRFMTggT2JzZXJ2YXRpb24iCmRlZmluZSAiSEJzQWcgdGVzdCByZXN1bHQgRy5ERTE4IE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iSEJzQWcgdGVzdCByZXN1bHQgRy5ERTE4IE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgSEJzQWcgdGVzdCByZXN1bHQgRy5ERTE4ICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5HLkRFMTkgLSBQb3NpdGl2ZQpAYWN0aXZpdHk6IEhJVi5EMjAgRGlhZ25vc3RpY3MKQGRlc2NyaXB0aW9uOiBIQnNBZyB0ZXN0IHJlc3VsdCB3YXMgcG9zaXRpdmUKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIlBvc2l0aXZlIEcuREUxOSI6CiAgZXhpc3RzICJQb3NpdGl2ZSBHLkRFMTkgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJQb3NpdGl2ZSBHLkRFMTkgT2JzZXJ2YXRpb24iCmRlZmluZSAiUG9zaXRpdmUgRy5ERTE5IENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIlBvc2l0aXZlIEcuREUxOSBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIlBvc2l0aXZlIEcuREUxOSBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIlBvc2l0aXZlIEcuREUxOSBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIFBvc2l0aXZlIEcuREUxOSAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRy5ERTIwIC0gTmVnYXRpdmUKQGFjdGl2aXR5OiBISVYuRDIwIERpYWdub3N0aWNzCkBkZXNjcmlwdGlvbjogSEJzQWcgdGVzdCByZXN1bHQgd2FzIG5lZ2F0aXZlCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJOZWdhdGl2ZSBHLkRFMjAiOgogIGV4aXN0cyAiTmVnYXRpdmUgRy5ERTIwIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiTmVnYXRpdmUgRy5ERTIwIE9ic2VydmF0aW9uIgpkZWZpbmUgIk5lZ2F0aXZlIEcuREUyMCBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJOZWdhdGl2ZSBHLkRFMjAgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJOZWdhdGl2ZSBHLkRFMjAgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJOZWdhdGl2ZSBHLkRFMjAgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBOZWdhdGl2ZSBHLkRFMjAgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkcuREUyMSAtIEluZGV0ZXJtaW5hdGUKQGFjdGl2aXR5OiBISVYuRDIwIERpYWdub3N0aWNzCkBkZXNjcmlwdGlvbjogSEJzQWcgdGVzdCByZXN1bHQgd2FzIGluZGV0ZXJtaW5hdGUKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkluZGV0ZXJtaW5hdGUgRy5ERTIxIjoKICBleGlzdHMgIkluZGV0ZXJtaW5hdGUgRy5ERTIxIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiSW5kZXRlcm1pbmF0ZSBHLkRFMjEgT2JzZXJ2YXRpb24iCmRlZmluZSAiSW5kZXRlcm1pbmF0ZSBHLkRFMjEgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iSW5kZXRlcm1pbmF0ZSBHLkRFMjEgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJJbmRldGVybWluYXRlIEcuREUyMSBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkluZGV0ZXJtaW5hdGUgRy5ERTIxIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgSW5kZXRlcm1pbmF0ZSBHLkRFMjEgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkcuREU0MyAtIEhDViB0ZXN0IHJlc3VsdApAYWN0aXZpdHk6IEhJVi5EMjAgRGlhZ25vc3RpY3MKQGRlc2NyaXB0aW9uOiBIZXBhdGl0aXMgQyB2aXJ1cyB0ZXN0IHJlc3VsdCAoSENWIGFudGlib2R5LCBIQ1YgUk5BIG9yIEhDViBjb3JlIGFudGlnZW4pCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJIQ1YgdGVzdCByZXN1bHQgRy5ERTQzIjoKICBleGlzdHMgIkhDViB0ZXN0IHJlc3VsdCBHLkRFNDMgT2JzZXJ2YXRpb24iCmRlZmluZSAiSENWIHRlc3QgcmVzdWx0IEcuREU0MyBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkhDViB0ZXN0IHJlc3VsdCBHLkRFNDMgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBIQ1YgdGVzdCByZXN1bHQgRy5ERTQzICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5HLkRFNDQgLSBQb3NpdGl2ZQpAYWN0aXZpdHk6IEhJVi5EMjAgRGlhZ25vc3RpY3MKQGRlc2NyaXB0aW9uOiBIQ1YgdGVzdCByZXN1bHQgd2FzIHBvc2l0aXZlCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJQb3NpdGl2ZSBHLkRFNDQiOgogIGV4aXN0cyAiUG9zaXRpdmUgRy5ERTQ0IENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiUG9zaXRpdmUgRy5ERTQ0IE9ic2VydmF0aW9uIgpkZWZpbmUgIlBvc2l0aXZlIEcuREU0NCBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJQb3NpdGl2ZSBHLkRFNDQgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJQb3NpdGl2ZSBHLkRFNDQgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJQb3NpdGl2ZSBHLkRFNDQgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBQb3NpdGl2ZSBHLkRFNDQgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkcuREU0NSAtIE5lZ2F0aXZlCkBhY3Rpdml0eTogSElWLkQyMCBEaWFnbm9zdGljcwpAZGVzY3JpcHRpb246IEhDViB0ZXN0IHJlc3VsdCB3YXMgbmVnYXRpdmUKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIk5lZ2F0aXZlIEcuREU0NSI6CiAgZXhpc3RzICJOZWdhdGl2ZSBHLkRFNDUgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJOZWdhdGl2ZSBHLkRFNDUgT2JzZXJ2YXRpb24iCmRlZmluZSAiTmVnYXRpdmUgRy5ERTQ1IENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIk5lZ2F0aXZlIEcuREU0NSBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIk5lZ2F0aXZlIEcuREU0NSBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIk5lZ2F0aXZlIEcuREU0NSBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIE5lZ2F0aXZlIEcuREU0NSAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRy5ERTQ2IC0gSW5kZXRlcm1pbmF0ZQpAYWN0aXZpdHk6IEhJVi5EMjAgRGlhZ25vc3RpY3MKQGRlc2NyaXB0aW9uOiBIQ1YgdGVzdCByZXN1bHQgd2FzIGluZGV0ZXJtaW5hdGUKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkluZGV0ZXJtaW5hdGUgRy5ERTQ2IjoKICBleGlzdHMgIkluZGV0ZXJtaW5hdGUgRy5ERTQ2IENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiSW5kZXRlcm1pbmF0ZSBHLkRFNDYgT2JzZXJ2YXRpb24iCmRlZmluZSAiSW5kZXRlcm1pbmF0ZSBHLkRFNDYgQ29uZGl0aW9uIjoKICBFbGVtZW50cy4iSW5kZXRlcm1pbmF0ZSBHLkRFNDYgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJJbmRldGVybWluYXRlIEcuREU0NiBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkluZGV0ZXJtaW5hdGUgRy5ERTQ2IE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgSW5kZXRlcm1pbmF0ZSBHLkRFNDYgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkcuREU3MCAtIFN5cGhpbGlzIHRlc3QgcmVzdWx0CkBhY3Rpdml0eTogSElWLkQyMCBEaWFnbm9zdGljcwpAZGVzY3JpcHRpb246IFJlc3VsdCBmcm9tIHN5cGhpbGlzIHRlc3QKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIlN5cGhpbGlzIHRlc3QgcmVzdWx0IEcuREU3MCI6CiAgZXhpc3RzICJTeXBoaWxpcyB0ZXN0IHJlc3VsdCBHLkRFNzAgT2JzZXJ2YXRpb24iCmRlZmluZSAiU3lwaGlsaXMgdGVzdCByZXN1bHQgRy5ERTcwIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iU3lwaGlsaXMgdGVzdCByZXN1bHQgRy5ERTcwIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgU3lwaGlsaXMgdGVzdCByZXN1bHQgRy5ERTcwICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5HLkRFNzEgLSBQb3NpdGl2ZQpAYWN0aXZpdHk6IEhJVi5EMjAgRGlhZ25vc3RpY3MKQGRlc2NyaXB0aW9uOiBUZXN0IHJlc3VsdCBpcyBwb3NpdGl2ZSBmb3Igc3lwaGlsaXMKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIlBvc2l0aXZlIEcuREU3MSI6CiAgZXhpc3RzICJQb3NpdGl2ZSBHLkRFNzEgQ29uZGl0aW9uIgogICAgb3IgZXhpc3RzICJQb3NpdGl2ZSBHLkRFNzEgT2JzZXJ2YXRpb24iCmRlZmluZSAiUG9zaXRpdmUgRy5ERTcxIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIlBvc2l0aXZlIEcuREU3MSBDb25kaXRpb24iIEMKICAgIHdoZXJlIEMucHJldmFsZW5jZUludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIlBvc2l0aXZlIEcuREU3MSBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIlBvc2l0aXZlIEcuREU3MSBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIFBvc2l0aXZlIEcuREU3MSAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuRy5ERTcyIC0gTmVnYXRpdmUKQGFjdGl2aXR5OiBISVYuRDIwIERpYWdub3N0aWNzCkBkZXNjcmlwdGlvbjogVGVzdCByZXN1bHQgaXMgbmVnYXRpdmUgZm9yIHN5cGhpbGlzCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJOZWdhdGl2ZSBHLkRFNzIiOgogIGV4aXN0cyAiTmVnYXRpdmUgRy5ERTcyIENvbmRpdGlvbiIKICAgIG9yIGV4aXN0cyAiTmVnYXRpdmUgRy5ERTcyIE9ic2VydmF0aW9uIgpkZWZpbmUgIk5lZ2F0aXZlIEcuREU3MiBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJOZWdhdGl2ZSBHLkRFNzIgQ29uZGl0aW9uIiBDCiAgICB3aGVyZSBDLnByZXZhbGVuY2VJbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKZGVmaW5lICJOZWdhdGl2ZSBHLkRFNzIgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJOZWdhdGl2ZSBHLkRFNzIgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBOZWdhdGl2ZSBHLkRFNzIgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkcuREU3MyAtIEluY29uY2x1c2l2ZQpAYWN0aXZpdHk6IEhJVi5EMjAgRGlhZ25vc3RpY3MKQGRlc2NyaXB0aW9uOiBUZXN0IHJlc3VsdCBpcyBpbmNvbmNsdXNpdmUKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkluY29uY2x1c2l2ZSBHLkRFNzMiOgogIGV4aXN0cyAiSW5jb25jbHVzaXZlIEcuREU3MyBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIkluY29uY2x1c2l2ZSBHLkRFNzMgT2JzZXJ2YXRpb24iCmRlZmluZSAiSW5jb25jbHVzaXZlIEcuREU3MyBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJJbmNvbmNsdXNpdmUgRy5ERTczIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiSW5jb25jbHVzaXZlIEcuREU3MyBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkluY29uY2x1c2l2ZSBHLkRFNzMgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBJbmNvbmNsdXNpdmUgRy5ERTczICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ILkRFMzQgLSBISVYgc3RhdHVzIG9mIHBhcnRuZXIgb3IgY29udGFjdApAYWN0aXZpdHk6IEhJVi5CNiBDYXB0dXJlIG9yIHVwZGF0ZSBjbGllbnQgaGlzdG9yeQpAZGVzY3JpcHRpb246IEhJViBzdGF0dXMgb2YgdGhlIHBhcnRuZXIgb3IgY29udGFjdCBnaXZlbiBieSB0aGUgaW5kZXggY2FzZQoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiSElWIHN0YXR1cyBvZiBwYXJ0bmVyIG9yIGNvbnRhY3QiOgogIGV4aXN0cyAiSElWIHN0YXR1cyBvZiBwYXJ0bmVyIG9yIGNvbnRhY3QgT2JzZXJ2YXRpb24iCmRlZmluZSAiSElWIHN0YXR1cyBvZiBwYXJ0bmVyIG9yIGNvbnRhY3QgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJISVYgc3RhdHVzIG9mIHBhcnRuZXIgb3IgY29udGFjdCBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIEhJViBzdGF0dXMgb2YgcGFydG5lciBvciBjb250YWN0ICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5ILkRFMzUgLSBBbHJlYWR5IGtuZXcgcG9zaXRpdmUKQGFjdGl2aXR5OiBISVYuQjYgQ2FwdHVyZSBvciB1cGRhdGUgY2xpZW50IGhpc3RvcnkKQGRlc2NyaXB0aW9uOiBUaGUgcGFydG5lciBvciBjb250YWN0IG9mIHRoZSBpbmRleCBjYXNlIGFscmVhZHkga25ldyB0aGV5IGFyZSBISVYtcG9zaXRpdmUKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkFscmVhZHkga25ldyBwb3NpdGl2ZSI6CiAgRWxlbWVudHMuIkFscmVhZHkga25ldyBwb3NpdGl2ZSIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIEFscmVhZHkga25ldyBwb3NpdGl2ZSAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuSC5ERTM2IC0gTmV3bHkgZGlhZ25vc2VkCkBhY3Rpdml0eTogSElWLkI2IENhcHR1cmUgb3IgdXBkYXRlIGNsaWVudCBoaXN0b3J5CkBkZXNjcmlwdGlvbjogVGhlIHBhcnRuZXIgb3IgY29udGFjdCBvZiB0aGUgaW5kZXggY2FzZSBpcyBuZXdseSBkaWFnbm9zZWQgYXMgSElWLXBvc2l0aXZlCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJOZXdseSBkaWFnbm9zZWQiOgogIEVsZW1lbnRzLiJOZXdseSBkaWFnbm9zZWQiIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBOZXdseSBkaWFnbm9zZWQgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkguREUzNyAtIE5lZ2F0aXZlCkBhY3Rpdml0eTogSElWLkI2IENhcHR1cmUgb3IgdXBkYXRlIGNsaWVudCBoaXN0b3J5CkBkZXNjcmlwdGlvbjogVGhlIHBhcnRuZXIgb3IgY29udGFjdCBvZiB0aGUgaW5kZXggY2FzZSBpcyBuZXdseSBkaWFnbm9zZWQgaXMgSElWLW5lZ2F0aXZlCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJOZWdhdGl2ZSBILkRFMzcgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJOZWdhdGl2ZSBILkRFMzciIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBOZWdhdGl2ZSBILkRFMzcgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkguREU0NyAtIE9uIEFSVApAYWN0aXZpdHk6IEhJVi5IMyBSZWNvcmQgb3V0cmVhY2ggYW5kIHJlc3VsdApAZGVzY3JpcHRpb246IENsaWVudCBpcyBjdXJyZW50bHkgdGFraW5nIEFSVCAKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIk9uIEFSVCBILkRFNDcgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJPbiBBUlQgSC5ERTQ3IiBNUwogICAgd2hlcmUgTVMuY29udGV4dC5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBNUy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIE9uIEFSVCBILkRFNDcgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLlBSVi5ERTEgLSBBdCBlbGV2YXRlZCByaXNrIGZvciBISVYgYWNxdWlzaXRpb24KQGFjdGl2aXR5OiBISVYuQjYgQ2FwdHVyZSBvciB1cGRhdGUgY2xpZW50IGhpc3RvcnkKQGRlc2NyaXB0aW9uOiBDbGllbnQgaXMgYXQgZWxldmF0ZWQgcmlzayBmb3IgSElWIGFjcXVpc2l0aW9uLCBkZWZpbmVkIGFjY29yZGluZyB0byBjb3VudHJ5L3Byb2dyYW1tZSBjb250ZXh0CiovCmRlZmluZSAiQXQgZWxldmF0ZWQgcmlzayBmb3IgSElWIGFjcXVpc2l0aW9uIFBSVi5ERTEgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJBdCBlbGV2YXRlZCByaXNrIGZvciBISVYgYWNxdWlzaXRpb24gUFJWLkRFMSIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIEF0IGVsZXZhdGVkIHJpc2sgZm9yIEhJViBhY3F1aXNpdGlvbiBQUlYuREUxICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5TUlYuREUyIC0gSElWIHRlc3QgcmVzdWx0CkBhY3Rpdml0eTogSElWLkI3IFRlc3QgZm9yIEhJViB1c2luZyB0ZXN0aW5nIGFsZ29yaXRobQpAZGVzY3JpcHRpb246IFRoZSByZXN1bHQgZnJvbSBISVYgdGVzdGluZyBhZnRlciBhcHBseWluZyB0aGUgdGVzdGluZyBhbGdvcml0aG0KKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkhJViB0ZXN0IHJlc3VsdCBTUlYuREUyIjoKICBleGlzdHMgIkhJViB0ZXN0IHJlc3VsdCBTUlYuREUyIE9ic2VydmF0aW9uIgpkZWZpbmUgIkhJViB0ZXN0IHJlc3VsdCBTUlYuREUyIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iSElWIHRlc3QgcmVzdWx0IFNSVi5ERTIgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBISVYgdGVzdCByZXN1bHQgU1JWLkRFMiAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuU1JWLkRFNSAtIEhJViBjbGluaWNhbCBzdGFnZQpAYWN0aXZpdHk6IEhJVi5EOCBDYXB0dXJlIG9yIHVwZGF0ZSBjbGllbnQgaGlzdG9yeQpAZGVzY3JpcHRpb246IFdITyBjbGluaWNhbCBzdGFnZSBvZiBjbGllbnQgYmFzZWQgb24gc2lnbnMgYW5kIHN5bXB0b21zLiBXSE8gY2xpbmljYWwgc3RhZ2luZyBpcyBhIHdheSB0byBjYXRlZ29yaXplIEhJViBkaXNlYXNlIHNldmVyaXR5IGJhc2VkIG9uIG5ldyBvciByZWN1cnJlbnQgY2xpbmljYWwgZXZlbnRzLiBUaGVyZSBhcmUgNCBXSE8gY2xpbmljYWwgc3RhZ2VzIHRoYXQgcmFuZ2UgZnJvbSBtaWxkIHN5bXB0b21zIChXSE8gY2xpbmljYWwgc3RhZ2UgMSkgdG8gc2V2ZXJlIHN5bXB0b21zIChXSE8gY2xpbmljYWwgc3RhZ2UgNCkuCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJISVYgY2xpbmljYWwgc3RhZ2UgU1JWLkRFNSI6CiAgZXhpc3RzICJISVYgY2xpbmljYWwgc3RhZ2UgU1JWLkRFNSBPYnNlcnZhdGlvbiIKZGVmaW5lICJISVYgY2xpbmljYWwgc3RhZ2UgU1JWLkRFNSBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkhJViBjbGluaWNhbCBzdGFnZSBTUlYuREU1IE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgSElWIGNsaW5pY2FsIHN0YWdlIFNSVi5ERTUgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLlNSVi5ERTYgLSBBUlQgc3RhcnQgZGF0ZQpAYWN0aXZpdHk6IEhJVi5COCBQcm92aWRlIHBvc3QtdGVzdCBjb3Vuc2VsbGluZwpAZGVzY3JpcHRpb246IFRoZSBkYXRlIG9uIHdoaWNoIHRoZSBjbGllbnQgc3RhcnRlZCBvciByZXN0YXJ0ZWQgYW50aXJldHJvdmlyYWwgdGhlcmFweSAoQVJUKQoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiQVJUIHN0YXJ0IGRhdGUgU1JWLkRFNiI6CiAgRWxlbWVudHMuIkFSVCBzdGFydCBkYXRlIFNSVi5ERTYiIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiQVJUIHN0YXJ0IGRhdGUgU1JWLkRFNiBWYWx1ZSI6CiAgIkFSVCBzdGFydCBkYXRlIFNSVi5ERTYiIE8KICByZXR1cm4gTy52YWx1ZQovKiBFbmQgb2YgQVJUIHN0YXJ0IGRhdGUgU1JWLkRFNiAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuU1JWLkRFNyAtIEN1cnJlbnRseSBwcmVnbmFudApAYWN0aXZpdHk6IEhJVi5CNiBDYXB0dXJlIG9yIHVwZGF0ZSBjbGllbnQgaGlzdG9yeQpAZGVzY3JpcHRpb246IENsaWVudCBpcyBjdXJyZW50bHkgcHJlZ25hbnQKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkN1cnJlbnRseSBwcmVnbmFudCBTUlYuREU3IjoKICBleGlzdHMgIkN1cnJlbnRseSBwcmVnbmFudCBTUlYuREU3IE9ic2VydmF0aW9uIgpkZWZpbmUgIkN1cnJlbnRseSBwcmVnbmFudCBTUlYuREU3IE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iQ3VycmVudGx5IHByZWduYW50IFNSVi5ERTcgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBDdXJyZW50bHkgcHJlZ25hbnQgU1JWLkRFNyAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuU1JWLkRFOCAtIENENCBjb3VudApAYWN0aXZpdHk6IEhJVi5EMjAgRGlhZ25vc3RpY3MKQGRlc2NyaXB0aW9uOiBDRDQgY2VsbCBjb3VudCBpbiBjZWxscy9tbV4zCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJDRDQgY291bnQgU1JWLkRFOCI6CiAgRWxlbWVudHMuIkNENCBjb3VudCBTUlYuREU4IiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQpkZWZpbmUgIkNENCBjb3VudCBTUlYuREU4IFZhbHVlIjoKICAiQ0Q0IGNvdW50IFNSVi5ERTgiIE8KICByZXR1cm4gTy52YWx1ZQovKiBFbmQgb2YgQ0Q0IGNvdW50IFNSVi5ERTggKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLlNSVi5ERTEyIC0gRGF0ZSBvZiB2aXJhbCBsb2FkIHNhbXBsZSBjb2xsZWN0aW9uCkBhY3Rpdml0eTogSElWLkQxMCBDb3Vuc2VsIHJldHVybmluZyBjbGllbnQKQGRlc2NyaXB0aW9uOiBEYXRlIGFuZCB0aW1lIHdoZW4gdGhlIHNhbXBsZSB3YXMgY29sbGVjdGVkIHRvIHRlc3QgdGhlIGNsaWVudCdzIEhJViB2aXJhbCBsb2FkCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJEYXRlIG9mIHZpcmFsIGxvYWQgc2FtcGxlIGNvbGxlY3Rpb24gU1JWLkRFMTIiOgogIEVsZW1lbnRzLiJEYXRlIG9mIHZpcmFsIGxvYWQgc2FtcGxlIGNvbGxlY3Rpb24gU1JWLkRFMTIiIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiRGF0ZSBvZiB2aXJhbCBsb2FkIHNhbXBsZSBjb2xsZWN0aW9uIFNSVi5ERTEyIFZhbHVlIjoKICAiRGF0ZSBvZiB2aXJhbCBsb2FkIHNhbXBsZSBjb2xsZWN0aW9uIFNSVi5ERTEyIiBPCiAgcmV0dXJuIE8udmFsdWUKLyogRW5kIG9mIERhdGUgb2YgdmlyYWwgbG9hZCBzYW1wbGUgY29sbGVjdGlvbiBTUlYuREUxMiAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuU1JWLkRFMTMgLSBWaXJhbCBsb2FkIHRlc3QgcmVzdWx0CkBhY3Rpdml0eTogSElWLkQyMCBEaWFnbm9zdGljcwpAZGVzY3JpcHRpb246IFJlc3VsdCBmcm9tIHRoZSB2aXJhbCBsb2FkIHRlc3QgaW4gbnVtYmVyIG9mIGNvcGllcy9tTAoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiVmlyYWwgbG9hZCB0ZXN0IHJlc3VsdCBTUlYuREUxMyI6CiAgRWxlbWVudHMuIlZpcmFsIGxvYWQgdGVzdCByZXN1bHQgU1JWLkRFMTMiIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiVmlyYWwgbG9hZCB0ZXN0IHJlc3VsdCBTUlYuREUxMyBWYWx1ZSI6CiAgIlZpcmFsIGxvYWQgdGVzdCByZXN1bHQgU1JWLkRFMTMiIE8KICByZXR1cm4gTy52YWx1ZQovKiBFbmQgb2YgVmlyYWwgbG9hZCB0ZXN0IHJlc3VsdCBTUlYuREUxMyAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuU1JWLkRFMTUgLSBWaXNpdCBkYXRlCkBhY3Rpdml0eTogSElWLkEyIEdhdGhlciBjbGllbnQgZGV0YWlscwpAZGVzY3JpcHRpb246IFRoZSBkYXRlIGFuZCB0aW1lIG9mIHRoZSBjbGllbnQncyB2aXNpdAoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiVmlzaXQgZGF0ZSBTUlYuREUxNSI6CiAgRWxlbWVudHMuIlZpc2l0IGRhdGUgU1JWLkRFMTUiIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiVmlzaXQgZGF0ZSBTUlYuREUxNSBWYWx1ZSI6CiAgIlZpc2l0IGRhdGUgU1JWLkRFMTUiIE8KICByZXR1cm4gTy52YWx1ZQovKiBFbmQgb2YgVmlzaXQgZGF0ZSBTUlYuREUxNSAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuU1JWLkRFMTggLSBBTkMgY29udGFjdCBkYXRlCkBhY3Rpdml0eTogSElWLkUxIENhcHR1cmUgb3IgdXBkYXRlIG1vdGhlcidzIGhpc3RvcnkKQGRlc2NyaXB0aW9uOiBUaGUgZGF0ZSBhbmQgdGltZSBvZiB0aGUgY2xpZW50J3MgQU5DIGNvbnRhY3QgKGluIHRoZSBBTkMgREFLIHRoaXMgaXMgY2FsbGVkICdDb250YWN0IGRhdGUnKQoqLwovLyBUT0RPOiBSZXBsYWNlIHBsYWNlaG9sZGVyIHdpdGggcmVsZXZhbnQgQ1FMIGxvZ2ljCmRlZmluZSAiQU5DIGNvbnRhY3QgZGF0ZSBTUlYuREUxOCI6CiAgRWxlbWVudHMuIkFOQyBjb250YWN0IGRhdGUgU1JWLkRFMTgiIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiQU5DIGNvbnRhY3QgZGF0ZSBTUlYuREUxOCBWYWx1ZSI6CiAgIkFOQyBjb250YWN0IGRhdGUgU1JWLkRFMTgiIE8KICByZXR1cm4gTy52YWx1ZQovKiBFbmQgb2YgQU5DIGNvbnRhY3QgZGF0ZSBTUlYuREUxOCAqLwoKLyoKQGRhdGFFbGVtZW50OiBISVYuU1JWLkRFMjEgLSBUZXN0IHJlc3VsdCBvZiBISVYgYXNzYXkgMQpAYWN0aXZpdHk6IEhJVi5FNCBUZXN0IG1vdGhlciBmb3IgSElWIHVzaW5nIHRlc3RpbmcgYWxnb3JpdGhtCkBkZXNjcmlwdGlvbjogVGhlIHJlc3VsdCBvZiB0aGUgZmlyc3QgSElWIGFzc2F5IGluIHRoZSB0ZXN0aW5nIHN0cmF0ZWd5CiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJUZXN0IHJlc3VsdCBvZiBISVYgYXNzYXkgMSBTUlYuREUyMSI6CiAgZXhpc3RzICJUZXN0IHJlc3VsdCBvZiBISVYgYXNzYXkgMSBTUlYuREUyMSBPYnNlcnZhdGlvbiIKZGVmaW5lICJUZXN0IHJlc3VsdCBvZiBISVYgYXNzYXkgMSBTUlYuREUyMSBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIlRlc3QgcmVzdWx0IG9mIEhJViBhc3NheSAxIFNSVi5ERTIxIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgVGVzdCByZXN1bHQgb2YgSElWIGFzc2F5IDEgU1JWLkRFMjEgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkNvbmZpZy5ERTYgLSBNYWxhcmlhLWVuZGVtaWMgc2V0dGluZwpAYWN0aXZpdHk6IEhJVi5Db25maWd1cmF0aW9uCkBkZXNjcmlwdGlvbjogV2hldGhlciB0aGUgc2V0dGluZyBpcyBhIG1hbGFyaWEtZW5kZW1pYyBzZXR0aW5nCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJNYWxhcmlhLWVuZGVtaWMgc2V0dGluZyI6CiAgZXhpc3RzICJNYWxhcmlhLWVuZGVtaWMgc2V0dGluZyBPYnNlcnZhdGlvbiIKZGVmaW5lICJNYWxhcmlhLWVuZGVtaWMgc2V0dGluZyBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIk1hbGFyaWEtZW5kZW1pYyBzZXR0aW5nIE9ic2VydmF0aW9uIiBPCiAgICB3aGVyZSBPLmVuY291bnRlci5yZWZlcmVuY2VzKEVuY291bnRlcklkKQogICAgICBvciBPLmVmZmVjdGl2ZS50b0ludGVydmFsKCkgc3RhcnRzIG9uIG9yIGJlZm9yZSBUb2RheQovKiBFbmQgb2YgTWFsYXJpYS1lbmRlbWljIHNldHRpbmcgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkNvbmZpZy5ERTEyIC0gSElWIGJ1cmRlbiBvZiB0aGUgc2V0dGluZwpAYWN0aXZpdHk6IEhJVi5Db25maWd1cmF0aW9uCkBkZXNjcmlwdGlvbjogSElWIGJ1cmRlbiBvZiB0aGUgc2V0dGluZyAoaGlnaCBvciBsb3cpIGJhc2VkIG9uIHRoZSBuYXRpb25hbCBISVYgcHJldmFsZW5jZSBvciB3aGVyZSB0aGUgSElWIHByZXZhbGVuY2UgYW5kL29yIGluY2lkZW5jZSBpbiBhIGdlb2dyYXBoaWNhbCBzZXR0aW5nIGlzIGhpZ2hlciB0aGFuIG5hdGlvbmFsIHByZXZhbGVuY2UgYW5kLCB0aGVyZWZvcmUsIG5lZWRzIHByaW9yaXR5IGluIHRoZSBISVYgcmVzcG9uc2UKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkhJViBidXJkZW4gb2YgdGhlIHNldHRpbmciOgogIGV4aXN0cyAiSElWIGJ1cmRlbiBvZiB0aGUgc2V0dGluZyBPYnNlcnZhdGlvbiIKZGVmaW5lICJISVYgYnVyZGVuIG9mIHRoZSBzZXR0aW5nIE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iSElWIGJ1cmRlbiBvZiB0aGUgc2V0dGluZyBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIEhJViBidXJkZW4gb2YgdGhlIHNldHRpbmcgKi8KCi8qCkBkYXRhRWxlbWVudDogSElWLkNvbmZpZy5ERTEzIC0gSGlnaCBISVYgYnVyZGVuIHNldHRpbmcKQGFjdGl2aXR5OiBISVYuQ29uZmlndXJhdGlvbgpAZGVzY3JpcHRpb246IFNldHRpbmdzIHdpdGggPjUlIG5hdGlvbmFsIEhJViBwcmV2YWxlbmNlIGFuZCBzdWJwb3B1bGF0aW9ucyBhbmQgZ2VvZ3JhcGhpYyBzZXR0aW5ncyB3aGVyZSBISVYgcHJldmFsZW5jZSBhbmQvb3IgaW5jaWRlbmNlIGlzIGhpZ2hlciB0aGFuIG5hdGlvbmFsbHkuCiovCi8vIFRPRE86IFJlcGxhY2UgcGxhY2Vob2xkZXIgd2l0aCByZWxldmFudCBDUUwgbG9naWMKZGVmaW5lICJIaWdoIEhJViBidXJkZW4gc2V0dGluZyI6CiAgZXhpc3RzICJIaWdoIEhJViBidXJkZW4gc2V0dGluZyBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIkhpZ2ggSElWIGJ1cmRlbiBzZXR0aW5nIE9ic2VydmF0aW9uIgpkZWZpbmUgIkhpZ2ggSElWIGJ1cmRlbiBzZXR0aW5nIENvbmRpdGlvbiI6CiAgRWxlbWVudHMuIkhpZ2ggSElWIGJ1cmRlbiBzZXR0aW5nIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiSGlnaCBISVYgYnVyZGVuIHNldHRpbmcgT2JzZXJ2YXRpb24iOgogIEVsZW1lbnRzLiJIaWdoIEhJViBidXJkZW4gc2V0dGluZyBPYnNlcnZhdGlvbiIgTwogICAgd2hlcmUgTy5lbmNvdW50ZXIucmVmZXJlbmNlcyhFbmNvdW50ZXJJZCkKICAgICAgb3IgTy5lZmZlY3RpdmUudG9JbnRlcnZhbCgpIHN0YXJ0cyBvbiBvciBiZWZvcmUgVG9kYXkKLyogRW5kIG9mIEhpZ2ggSElWIGJ1cmRlbiBzZXR0aW5nICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5Db25maWcuREUxNCAtIExvdyBISVYgYnVyZGVuIHNldHRpbmcKQGFjdGl2aXR5OiBISVYuQ29uZmlndXJhdGlvbgpAZGVzY3JpcHRpb246IFNldHRpbmdzIHdpdGggPDUlIEhJViBuYXRpb25hbCBwcmV2YWxlbmNlIGJ1dCB3aGVyZSBjZXJ0YWluIHBvcHVsYXRpb25zIChwcmltYXJpbHkga2V5IHBvcHVsYXRpb25zIGFuZCB0aGVpciBwYXJ0bmVycykgYW5kIGdlb2dyYXBoaWMgc2V0dGluZ3MgbWF5IGhhdmUgaGlnaGVyIEhJViBwcmV2YWxlbmNlIGFuZC9vciBpbmNpZGVuY2UgdGhhbiBuYXRpb25hbGx5IGFuZCwgdGhlcmVmb3JlLCBuZWVkIHByaW9yaXR5IGluIHRoZSBISVYgcmVzcG9uc2UKKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkxvdyBISVYgYnVyZGVuIHNldHRpbmciOgogIGV4aXN0cyAiTG93IEhJViBidXJkZW4gc2V0dGluZyBDb25kaXRpb24iCiAgICBvciBleGlzdHMgIkxvdyBISVYgYnVyZGVuIHNldHRpbmcgT2JzZXJ2YXRpb24iCmRlZmluZSAiTG93IEhJViBidXJkZW4gc2V0dGluZyBDb25kaXRpb24iOgogIEVsZW1lbnRzLiJMb3cgSElWIGJ1cmRlbiBzZXR0aW5nIENvbmRpdGlvbiIgQwogICAgd2hlcmUgQy5wcmV2YWxlbmNlSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5CmRlZmluZSAiTG93IEhJViBidXJkZW4gc2V0dGluZyBPYnNlcnZhdGlvbiI6CiAgRWxlbWVudHMuIkxvdyBISVYgYnVyZGVuIHNldHRpbmcgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBMb3cgSElWIGJ1cmRlbiBzZXR0aW5nICovCgovKgpAZGF0YUVsZW1lbnQ6IEhJVi5Db25maWcuREUxNSAtIEhQViBETkEgdGVzdGluZyBvcGVyYXRpb25hbCBhdCB0aGUgaGVhbHRoIGZhY2lsaXR5CkBhY3Rpdml0eTogSElWLkNvbmZpZ3VyYXRpb24KQGRlc2NyaXB0aW9uOiBJcyBIUFYgRE5BIHRlc3Rpbmcgb3BlcmF0aW9uYWwgYXQgdGhlIGhlYWx0aCBmYWNpbGl0eSBmb3IgY2VydmljYWwgY2FuY2VyIHNjcmVlbmluZz8KKi8KLy8gVE9ETzogUmVwbGFjZSBwbGFjZWhvbGRlciB3aXRoIHJlbGV2YW50IENRTCBsb2dpYwpkZWZpbmUgIkhQViBETkEgdGVzdGluZyBvcGVyYXRpb25hbCBhdCB0aGUgaGVhbHRoIGZhY2lsaXR5IjoKICBleGlzdHMgIkhQViBETkEgdGVzdGluZyBvcGVyYXRpb25hbCBhdCB0aGUgaGVhbHRoIGZhY2lsaXR5IE9ic2VydmF0aW9uIgpkZWZpbmUgIkhQViBETkEgdGVzdGluZyBvcGVyYXRpb25hbCBhdCB0aGUgaGVhbHRoIGZhY2lsaXR5IE9ic2VydmF0aW9uIjoKICBFbGVtZW50cy4iSFBWIEROQSB0ZXN0aW5nIG9wZXJhdGlvbmFsIGF0IHRoZSBoZWFsdGggZmFjaWxpdHkgT2JzZXJ2YXRpb24iIE8KICAgIHdoZXJlIE8uZW5jb3VudGVyLnJlZmVyZW5jZXMoRW5jb3VudGVySWQpCiAgICAgIG9yIE8uZWZmZWN0aXZlLnRvSW50ZXJ2YWwoKSBzdGFydHMgb24gb3IgYmVmb3JlIFRvZGF5Ci8qIEVuZCBvZiBIUFYgRE5BIHRlc3Rpbmcgb3BlcmF0aW9uYWwgYXQgdGhlIGhlYWx0aCBmYWNpbGl0eSAqLwoKCi8qCiAqIEN1c3RvbSBlbGVtZW50cyBhbmQgbG9naWMgZm9yIHVzZSBEVCBhbmQgSU5EIENRTCBMaWJyYXJpZXMKICovCg=="
  } ]
}